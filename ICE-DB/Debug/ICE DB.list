
ICE DB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008050  08005b48  08005b48  00015b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800db98  0800db98  0001db98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800db9c  0800db9c  0001db9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  0800dba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000080  0800dc20  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000012c  0800dc20  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001360e  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024dc  00000000  00000000  000336b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a84e  00000000  00000000  00035b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac0  00000000  00000000  000403e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001388  00000000  00000000  00040ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005662  00000000  00000000  00042230  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003cae  00000000  00000000  00047892  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b540  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ac0  00000000  00000000  0004b5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b2c 	.word	0x08005b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005b2c 	.word	0x08005b2c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2iz>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d215      	bcs.n	8000a2a <__aeabi_d2iz+0x36>
 80009fe:	d511      	bpl.n	8000a24 <__aeabi_d2iz+0x30>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d912      	bls.n	8000a30 <__aeabi_d2iz+0x3c>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1e:	bf18      	it	ne
 8000a20:	4240      	negne	r0, r0
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d105      	bne.n	8000a3c <__aeabi_d2iz+0x48>
 8000a30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	bf08      	it	eq
 8000a36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_InitTick+0x3c>)
{
 8000a48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4a:	7818      	ldrb	r0, [r3, #0]
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a54:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <HAL_InitTick+0x40>)
 8000a56:	6810      	ldr	r0, [r2, #0]
 8000a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5c:	f000 f892 	bl	8000b84 <HAL_SYSTICK_Config>
 8000a60:	4604      	mov	r4, r0
 8000a62:	b958      	cbnz	r0, 8000a7c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	2d0f      	cmp	r5, #15
 8000a66:	d809      	bhi.n	8000a7c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f854 	bl	8000b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_InitTick+0x44>)
 8000a76:	4620      	mov	r0, r4
 8000a78:	601d      	str	r5, [r3, #0]
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a7c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x20>)
{
 8000a8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9a:	f000 f82d 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ffd0 	bl	8000a44 <HAL_InitTick>
  HAL_MspInit();
 8000aa4:	f001 fa16 	bl	8001ed4 <HAL_MspInit>
}
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd08      	pop	{r3, pc}
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x10>)
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_IncTick+0x14>)
 8000ab4:	6811      	ldr	r1, [r2, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200000c0 	.word	0x200000c0
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ac8:	4b01      	ldr	r3, [pc, #4]	; (8000ad0 <HAL_GetTick+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000c0 	.word	0x200000c0

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff6 	bl	8000ac8 <HAL_GetTick>
 8000adc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	4b04      	ldrne	r3, [pc, #16]	; (8000af4 <HAL_Delay+0x20>)
 8000ae4:	781b      	ldrbne	r3, [r3, #0]
 8000ae6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae8:	f7ff ffee 	bl	8000ac8 <HAL_GetTick>
 8000aec:	1b40      	subs	r0, r0, r5
 8000aee:	4284      	cmp	r4, r0
 8000af0:	d8fa      	bhi.n	8000ae8 <HAL_Delay+0x14>
  {
  }
}
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
 8000af4:	20000000 	.word	0x20000000

08000af8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b14:	60d3      	str	r3, [r2, #12]
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1e:	b530      	push	{r4, r5, lr}
 8000b20:	68dc      	ldr	r4, [r3, #12]
 8000b22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	bf28      	it	cs
 8000b30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b38:	bf98      	it	ls
 8000b3a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b40:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b44:	bf88      	it	hi
 8000b46:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4019      	ands	r1, r3
 8000b4a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b50:	3c01      	subs	r4, #1
 8000b52:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000b54:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b56:	ea42 0201 	orr.w	r2, r2, r1
 8000b5a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	bfa9      	itett	ge
 8000b60:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	4b06      	ldrlt	r3, [pc, #24]	; (8000b80 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	b2d2      	uxtbge	r2, r2
 8000b68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	bfbb      	ittet	lt
 8000b6e:	f000 000f 	andlt.w	r0, r0, #15
 8000b72:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	541a      	strblt	r2, [r3, r0]
 8000b7a:	bd30      	pop	{r4, r5, pc}
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	e000ed14 	.word	0xe000ed14

08000b84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	3801      	subs	r0, #1
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d20a      	bcs.n	8000ba2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	4b66      	ldr	r3, [pc, #408]	; (8000d54 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bba:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000d64 <HAL_GPIO_Init+0x1b4>
 8000bbe:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000d68 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	680a      	ldr	r2, [r1, #0]
 8000bc4:	fa32 f506 	lsrs.w	r5, r2, r6
 8000bc8:	d102      	bne.n	8000bd0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000bca:	b003      	add	sp, #12
 8000bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000bd0:	f04f 0801 	mov.w	r8, #1
 8000bd4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000bdc:	4590      	cmp	r8, r2
 8000bde:	d17f      	bne.n	8000ce0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000be0:	684d      	ldr	r5, [r1, #4]
 8000be2:	2d12      	cmp	r5, #18
 8000be4:	f000 80aa 	beq.w	8000d3c <HAL_GPIO_Init+0x18c>
 8000be8:	f200 8083 	bhi.w	8000cf2 <HAL_GPIO_Init+0x142>
 8000bec:	2d02      	cmp	r5, #2
 8000bee:	f000 80a2 	beq.w	8000d36 <HAL_GPIO_Init+0x186>
 8000bf2:	d877      	bhi.n	8000ce4 <HAL_GPIO_Init+0x134>
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	f000 8089 	beq.w	8000d0c <HAL_GPIO_Init+0x15c>
 8000bfa:	2d01      	cmp	r5, #1
 8000bfc:	f000 8099 	beq.w	8000d32 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c00:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	bf93      	iteet	ls
 8000c08:	4682      	movls	sl, r0
 8000c0a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c0e:	3d08      	subhi	r5, #8
 8000c10:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c14:	bf92      	itee	ls
 8000c16:	00b5      	lslls	r5, r6, #2
 8000c18:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000c1c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c1e:	fa09 f805 	lsl.w	r8, r9, r5
 8000c22:	ea2b 0808 	bic.w	r8, fp, r8
 8000c26:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c2a:	bf88      	it	hi
 8000c2c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c30:	ea48 0505 	orr.w	r5, r8, r5
 8000c34:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c38:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c3c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c40:	d04e      	beq.n	8000ce0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c42:	4d45      	ldr	r5, [pc, #276]	; (8000d58 <HAL_GPIO_Init+0x1a8>)
 8000c44:	4f44      	ldr	r7, [pc, #272]	; (8000d58 <HAL_GPIO_Init+0x1a8>)
 8000c46:	69ad      	ldr	r5, [r5, #24]
 8000c48:	f026 0803 	bic.w	r8, r6, #3
 8000c4c:	f045 0501 	orr.w	r5, r5, #1
 8000c50:	61bd      	str	r5, [r7, #24]
 8000c52:	69bd      	ldr	r5, [r7, #24]
 8000c54:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c58:	f005 0501 	and.w	r5, r5, #1
 8000c5c:	9501      	str	r5, [sp, #4]
 8000c5e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c62:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c66:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000c6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c70:	fa09 f90b 	lsl.w	r9, r9, fp
 8000c74:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c78:	4d38      	ldr	r5, [pc, #224]	; (8000d5c <HAL_GPIO_Init+0x1ac>)
 8000c7a:	42a8      	cmp	r0, r5
 8000c7c:	d063      	beq.n	8000d46 <HAL_GPIO_Init+0x196>
 8000c7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c82:	42a8      	cmp	r0, r5
 8000c84:	d061      	beq.n	8000d4a <HAL_GPIO_Init+0x19a>
 8000c86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c8a:	42a8      	cmp	r0, r5
 8000c8c:	d05f      	beq.n	8000d4e <HAL_GPIO_Init+0x19e>
 8000c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c92:	42a8      	cmp	r0, r5
 8000c94:	bf0c      	ite	eq
 8000c96:	2503      	moveq	r5, #3
 8000c98:	2504      	movne	r5, #4
 8000c9a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c9e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000cac:	bf14      	ite	ne
 8000cae:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cb0:	4395      	biceq	r5, r2
 8000cb2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000cba:	bf14      	ite	ne
 8000cbc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cbe:	4395      	biceq	r5, r2
 8000cc0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc8:	bf14      	ite	ne
 8000cca:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ccc:	4395      	biceq	r5, r2
 8000cce:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd6:	bf14      	ite	ne
 8000cd8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cda:	ea25 0202 	biceq.w	r2, r5, r2
 8000cde:	60da      	str	r2, [r3, #12]
	position++;
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e76e      	b.n	8000bc2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000ce4:	2d03      	cmp	r5, #3
 8000ce6:	d022      	beq.n	8000d2e <HAL_GPIO_Init+0x17e>
 8000ce8:	2d11      	cmp	r5, #17
 8000cea:	d189      	bne.n	8000c00 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cec:	68cc      	ldr	r4, [r1, #12]
 8000cee:	3404      	adds	r4, #4
          break;
 8000cf0:	e786      	b.n	8000c00 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000cf2:	4f1b      	ldr	r7, [pc, #108]	; (8000d60 <HAL_GPIO_Init+0x1b0>)
 8000cf4:	42bd      	cmp	r5, r7
 8000cf6:	d009      	beq.n	8000d0c <HAL_GPIO_Init+0x15c>
 8000cf8:	d812      	bhi.n	8000d20 <HAL_GPIO_Init+0x170>
 8000cfa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000d6c <HAL_GPIO_Init+0x1bc>
 8000cfe:	454d      	cmp	r5, r9
 8000d00:	d004      	beq.n	8000d0c <HAL_GPIO_Init+0x15c>
 8000d02:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d06:	454d      	cmp	r5, r9
 8000d08:	f47f af7a 	bne.w	8000c00 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0c:	688c      	ldr	r4, [r1, #8]
 8000d0e:	b1c4      	cbz	r4, 8000d42 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d10:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000d12:	bf0c      	ite	eq
 8000d14:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d18:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2408      	movs	r4, #8
 8000d1e:	e76f      	b.n	8000c00 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000d20:	4575      	cmp	r5, lr
 8000d22:	d0f3      	beq.n	8000d0c <HAL_GPIO_Init+0x15c>
 8000d24:	4565      	cmp	r5, ip
 8000d26:	d0f1      	beq.n	8000d0c <HAL_GPIO_Init+0x15c>
 8000d28:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000d70 <HAL_GPIO_Init+0x1c0>
 8000d2c:	e7eb      	b.n	8000d06 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2e:	2400      	movs	r4, #0
 8000d30:	e766      	b.n	8000c00 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d32:	68cc      	ldr	r4, [r1, #12]
          break;
 8000d34:	e764      	b.n	8000c00 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d36:	68cc      	ldr	r4, [r1, #12]
 8000d38:	3408      	adds	r4, #8
          break;
 8000d3a:	e761      	b.n	8000c00 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d3c:	68cc      	ldr	r4, [r1, #12]
 8000d3e:	340c      	adds	r4, #12
          break;
 8000d40:	e75e      	b.n	8000c00 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2404      	movs	r4, #4
 8000d44:	e75c      	b.n	8000c00 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d46:	2500      	movs	r5, #0
 8000d48:	e7a7      	b.n	8000c9a <HAL_GPIO_Init+0xea>
 8000d4a:	2501      	movs	r5, #1
 8000d4c:	e7a5      	b.n	8000c9a <HAL_GPIO_Init+0xea>
 8000d4e:	2502      	movs	r5, #2
 8000d50:	e7a3      	b.n	8000c9a <HAL_GPIO_Init+0xea>
 8000d52:	bf00      	nop
 8000d54:	40010400 	.word	0x40010400
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	10210000 	.word	0x10210000
 8000d64:	10310000 	.word	0x10310000
 8000d68:	10320000 	.word	0x10320000
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	10220000 	.word	0x10220000

08000d74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d74:	6883      	ldr	r3, [r0, #8]
 8000d76:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d78:	bf14      	ite	ne
 8000d7a:	2001      	movne	r0, #1
 8000d7c:	2000      	moveq	r0, #0
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d80:	b10a      	cbz	r2, 8000d86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	6101      	str	r1, [r0, #16]
 8000d84:	4770      	bx	lr
 8000d86:	0409      	lsls	r1, r1, #16
 8000d88:	e7fb      	b.n	8000d82 <HAL_GPIO_WritePin+0x2>
	...

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d90:	4605      	mov	r5, r0
 8000d92:	b908      	cbnz	r0, 8000d98 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d94:	2001      	movs	r0, #1
 8000d96:	e03c      	b.n	8000e12 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d98:	6803      	ldr	r3, [r0, #0]
 8000d9a:	07db      	lsls	r3, r3, #31
 8000d9c:	d410      	bmi.n	8000dc0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	079f      	lsls	r7, r3, #30
 8000da2:	d45d      	bmi.n	8000e60 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	0719      	lsls	r1, r3, #28
 8000da8:	f100 8094 	bmi.w	8000ed4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	075a      	lsls	r2, r3, #29
 8000db0:	f100 80be 	bmi.w	8000f30 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db4:	69e8      	ldr	r0, [r5, #28]
 8000db6:	2800      	cmp	r0, #0
 8000db8:	f040 812c 	bne.w	8001014 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e028      	b.n	8000e12 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc0:	4c8f      	ldr	r4, [pc, #572]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d007      	beq.n	8000ddc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d109      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
 8000dd6:	6863      	ldr	r3, [r4, #4]
 8000dd8:	03de      	lsls	r6, r3, #15
 8000dda:	d506      	bpl.n	8000dea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	039c      	lsls	r4, r3, #14
 8000de0:	d5dd      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x12>
 8000de2:	686b      	ldr	r3, [r5, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1da      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
 8000de8:	e7d4      	b.n	8000d94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dea:	686b      	ldr	r3, [r5, #4]
 8000dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df0:	d112      	bne.n	8000e18 <HAL_RCC_OscConfig+0x8c>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fe65 	bl	8000ac8 <HAL_GetTick>
 8000dfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	0398      	lsls	r0, r3, #14
 8000e04:	d4cb      	bmi.n	8000d9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fe5f 	bl	8000ac8 <HAL_GetTick>
 8000e0a:	1b80      	subs	r0, r0, r6
 8000e0c:	2864      	cmp	r0, #100	; 0x64
 8000e0e:	d9f7      	bls.n	8000e00 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000e10:	2003      	movs	r0, #3
}
 8000e12:	b002      	add	sp, #8
 8000e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e18:	b99b      	cbnz	r3, 8000e42 <HAL_RCC_OscConfig+0xb6>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6023      	str	r3, [r4, #0]
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fe4d 	bl	8000ac8 <HAL_GetTick>
 8000e2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	0399      	lsls	r1, r3, #14
 8000e34:	d5b3      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e36:	f7ff fe47 	bl	8000ac8 <HAL_GetTick>
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	2864      	cmp	r0, #100	; 0x64
 8000e3e:	d9f7      	bls.n	8000e30 <HAL_RCC_OscConfig+0xa4>
 8000e40:	e7e6      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	d103      	bne.n	8000e52 <HAL_RCC_OscConfig+0xc6>
 8000e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	e7cf      	b.n	8000df2 <HAL_RCC_OscConfig+0x66>
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6023      	str	r3, [r4, #0]
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	e7cb      	b.n	8000df8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e60:	4c67      	ldr	r4, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000e62:	6863      	ldr	r3, [r4, #4]
 8000e64:	f013 0f0c 	tst.w	r3, #12
 8000e68:	d007      	beq.n	8000e7a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e6a:	6863      	ldr	r3, [r4, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d110      	bne.n	8000e96 <HAL_RCC_OscConfig+0x10a>
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	03da      	lsls	r2, r3, #15
 8000e78:	d40d      	bmi.n	8000e96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	079b      	lsls	r3, r3, #30
 8000e7e:	d502      	bpl.n	8000e86 <HAL_RCC_OscConfig+0xfa>
 8000e80:	692b      	ldr	r3, [r5, #16]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d186      	bne.n	8000d94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	696a      	ldr	r2, [r5, #20]
 8000e8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e92:	6023      	str	r3, [r4, #0]
 8000e94:	e786      	b.n	8000da4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e96:	692a      	ldr	r2, [r5, #16]
 8000e98:	4b5a      	ldr	r3, [pc, #360]	; (8001004 <HAL_RCC_OscConfig+0x278>)
 8000e9a:	b16a      	cbz	r2, 8000eb8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fe12 	bl	8000ac8 <HAL_GetTick>
 8000ea4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	079f      	lsls	r7, r3, #30
 8000eaa:	d4ec      	bmi.n	8000e86 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fe0c 	bl	8000ac8 <HAL_GetTick>
 8000eb0:	1b80      	subs	r0, r0, r6
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	d9f7      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x11a>
 8000eb6:	e7ab      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000eb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eba:	f7ff fe05 	bl	8000ac8 <HAL_GetTick>
 8000ebe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	0798      	lsls	r0, r3, #30
 8000ec4:	f57f af6e 	bpl.w	8000da4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fdfe 	bl	8000ac8 <HAL_GetTick>
 8000ecc:	1b80      	subs	r0, r0, r6
 8000ece:	2802      	cmp	r0, #2
 8000ed0:	d9f6      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x134>
 8000ed2:	e79d      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed4:	69aa      	ldr	r2, [r5, #24]
 8000ed6:	4c4a      	ldr	r4, [pc, #296]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	b1da      	cbz	r2, 8000f14 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fdf2 	bl	8000ac8 <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ee8:	079b      	lsls	r3, r3, #30
 8000eea:	d50d      	bpl.n	8000f08 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_RCC_OscConfig+0x280>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ef8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000efa:	bf00      	nop
  }
  while (Delay --);
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	1e5a      	subs	r2, r3, #1
 8000f00:	9201      	str	r2, [sp, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_RCC_OscConfig+0x16e>
 8000f06:	e751      	b.n	8000dac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fdde 	bl	8000ac8 <HAL_GetTick>
 8000f0c:	1b80      	subs	r0, r0, r6
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9e9      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x15a>
 8000f12:	e77d      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000f14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f16:	f7ff fdd7 	bl	8000ac8 <HAL_GetTick>
 8000f1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f1e:	079f      	lsls	r7, r3, #30
 8000f20:	f57f af44 	bpl.w	8000dac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fdd0 	bl	8000ac8 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9f6      	bls.n	8000f1c <HAL_RCC_OscConfig+0x190>
 8000f2e:	e76f      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f30:	4c33      	ldr	r4, [pc, #204]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000f32:	69e3      	ldr	r3, [r4, #28]
 8000f34:	00d8      	lsls	r0, r3, #3
 8000f36:	d424      	bmi.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000f38:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	69e3      	ldr	r3, [r4, #28]
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61e3      	str	r3, [r4, #28]
 8000f42:	69e3      	ldr	r3, [r4, #28]
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	4e30      	ldr	r6, [pc, #192]	; (8001010 <HAL_RCC_OscConfig+0x284>)
 8000f4e:	6833      	ldr	r3, [r6, #0]
 8000f50:	05d9      	lsls	r1, r3, #23
 8000f52:	d518      	bpl.n	8000f86 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f54:	68eb      	ldr	r3, [r5, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d126      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x21c>
 8000f5a:	6a23      	ldr	r3, [r4, #32]
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f62:	f7ff fdb1 	bl	8000ac8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f6a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	6a23      	ldr	r3, [r4, #32]
 8000f6e:	079b      	lsls	r3, r3, #30
 8000f70:	d53f      	bpl.n	8000ff2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000f72:	2f00      	cmp	r7, #0
 8000f74:	f43f af1e 	beq.w	8000db4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f78:	69e3      	ldr	r3, [r4, #28]
 8000f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	61e3      	str	r3, [r4, #28]
 8000f80:	e718      	b.n	8000db4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f82:	2700      	movs	r7, #0
 8000f84:	e7e2      	b.n	8000f4c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f86:	6833      	ldr	r3, [r6, #0]
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fd9b 	bl	8000ac8 <HAL_GetTick>
 8000f92:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	6833      	ldr	r3, [r6, #0]
 8000f96:	05da      	lsls	r2, r3, #23
 8000f98:	d4dc      	bmi.n	8000f54 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9a:	f7ff fd95 	bl	8000ac8 <HAL_GetTick>
 8000f9e:	eba0 0008 	sub.w	r0, r0, r8
 8000fa2:	2864      	cmp	r0, #100	; 0x64
 8000fa4:	d9f6      	bls.n	8000f94 <HAL_RCC_OscConfig+0x208>
 8000fa6:	e733      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	b9ab      	cbnz	r3, 8000fd6 <HAL_RCC_OscConfig+0x24a>
 8000faa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	6223      	str	r3, [r4, #32]
 8000fb6:	6a23      	ldr	r3, [r4, #32]
 8000fb8:	f023 0304 	bic.w	r3, r3, #4
 8000fbc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fd83 	bl	8000ac8 <HAL_GetTick>
 8000fc2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc4:	6a23      	ldr	r3, [r4, #32]
 8000fc6:	0798      	lsls	r0, r3, #30
 8000fc8:	d5d3      	bpl.n	8000f72 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fca:	f7ff fd7d 	bl	8000ac8 <HAL_GetTick>
 8000fce:	1b80      	subs	r0, r0, r6
 8000fd0:	4540      	cmp	r0, r8
 8000fd2:	d9f7      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x238>
 8000fd4:	e71c      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	6a23      	ldr	r3, [r4, #32]
 8000fda:	d103      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x258>
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6223      	str	r3, [r4, #32]
 8000fe2:	e7ba      	b.n	8000f5a <HAL_RCC_OscConfig+0x1ce>
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6223      	str	r3, [r4, #32]
 8000fea:	6a23      	ldr	r3, [r4, #32]
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	e7b6      	b.n	8000f60 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fd69 	bl	8000ac8 <HAL_GetTick>
 8000ff6:	eba0 0008 	sub.w	r0, r0, r8
 8000ffa:	42b0      	cmp	r0, r6
 8000ffc:	d9b6      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1e0>
 8000ffe:	e707      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
 8001000:	40021000 	.word	0x40021000
 8001004:	42420000 	.word	0x42420000
 8001008:	42420480 	.word	0x42420480
 800100c:	2000000c 	.word	0x2000000c
 8001010:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x334>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	461c      	mov	r4, r3
 800101a:	f002 020c 	and.w	r2, r2, #12
 800101e:	2a08      	cmp	r2, #8
 8001020:	d03d      	beq.n	800109e <HAL_RCC_OscConfig+0x312>
 8001022:	2300      	movs	r3, #0
 8001024:	4e27      	ldr	r6, [pc, #156]	; (80010c4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001026:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001028:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102a:	d12b      	bne.n	8001084 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800102c:	f7ff fd4c 	bl	8000ac8 <HAL_GetTick>
 8001030:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0199      	lsls	r1, r3, #6
 8001036:	d41f      	bmi.n	8001078 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001038:	6a2b      	ldr	r3, [r5, #32]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d105      	bne.n	800104c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001040:	6862      	ldr	r2, [r4, #4]
 8001042:	68a9      	ldr	r1, [r5, #8]
 8001044:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001048:	430a      	orrs	r2, r1
 800104a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800104e:	6862      	ldr	r2, [r4, #4]
 8001050:	430b      	orrs	r3, r1
 8001052:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001056:	4313      	orrs	r3, r2
 8001058:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800105a:	2301      	movs	r3, #1
 800105c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800105e:	f7ff fd33 	bl	8000ac8 <HAL_GetTick>
 8001062:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	019a      	lsls	r2, r3, #6
 8001068:	f53f aea8 	bmi.w	8000dbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fd2c 	bl	8000ac8 <HAL_GetTick>
 8001070:	1b40      	subs	r0, r0, r5
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f6      	bls.n	8001064 <HAL_RCC_OscConfig+0x2d8>
 8001076:	e6cb      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fd26 	bl	8000ac8 <HAL_GetTick>
 800107c:	1bc0      	subs	r0, r0, r7
 800107e:	2802      	cmp	r0, #2
 8001080:	d9d7      	bls.n	8001032 <HAL_RCC_OscConfig+0x2a6>
 8001082:	e6c5      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001084:	f7ff fd20 	bl	8000ac8 <HAL_GetTick>
 8001088:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	019b      	lsls	r3, r3, #6
 800108e:	f57f ae95 	bpl.w	8000dbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001092:	f7ff fd19 	bl	8000ac8 <HAL_GetTick>
 8001096:	1b40      	subs	r0, r0, r5
 8001098:	2802      	cmp	r0, #2
 800109a:	d9f6      	bls.n	800108a <HAL_RCC_OscConfig+0x2fe>
 800109c:	e6b8      	b.n	8000e10 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109e:	2801      	cmp	r0, #1
 80010a0:	f43f aeb7 	beq.w	8000e12 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80010a4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a6:	6a2b      	ldr	r3, [r5, #32]
 80010a8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f47f ae71 	bne.w	8000d94 <HAL_RCC_OscConfig+0x8>
 80010b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80010b8:	1ac0      	subs	r0, r0, r3
 80010ba:	bf18      	it	ne
 80010bc:	2001      	movne	r0, #1
 80010be:	e6a8      	b.n	8000e12 <HAL_RCC_OscConfig+0x86>
 80010c0:	40021000 	.word	0x40021000
 80010c4:	42420060 	.word	0x42420060

080010c8 <HAL_RCC_GetSysClockFreq>:
{
 80010c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80010cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ce:	ac02      	add	r4, sp, #8
 80010d0:	f103 0510 	add.w	r5, r3, #16
 80010d4:	4622      	mov	r2, r4
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	6859      	ldr	r1, [r3, #4]
 80010da:	3308      	adds	r3, #8
 80010dc:	c203      	stmia	r2!, {r0, r1}
 80010de:	42ab      	cmp	r3, r5
 80010e0:	4614      	mov	r4, r2
 80010e2:	d1f7      	bne.n	80010d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010e4:	2301      	movs	r3, #1
 80010e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80010ea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80010ec:	4911      	ldr	r1, [pc, #68]	; (8001134 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010ee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80010f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010f4:	f003 020c 	and.w	r2, r3, #12
 80010f8:	2a08      	cmp	r2, #8
 80010fa:	d117      	bne.n	800112c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001100:	a806      	add	r0, sp, #24
 8001102:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001104:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001106:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800110a:	d50c      	bpl.n	8001126 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800110c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001110:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001114:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001116:	aa06      	add	r2, sp, #24
 8001118:	4413      	add	r3, r2
 800111a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800111e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001122:	b007      	add	sp, #28
 8001124:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_RCC_GetSysClockFreq+0x74>)
 8001128:	4350      	muls	r0, r2
 800112a:	e7fa      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800112e:	e7f8      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0x5a>
 8001130:	08005b48 	.word	0x08005b48
 8001134:	40021000 	.word	0x40021000
 8001138:	007a1200 	.word	0x007a1200
 800113c:	003d0900 	.word	0x003d0900

08001140 <HAL_RCC_ClockConfig>:
{
 8001140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001144:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001146:	4604      	mov	r4, r0
 8001148:	b910      	cbnz	r0, 8001150 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4a45      	ldr	r2, [pc, #276]	; (8001268 <HAL_RCC_ClockConfig+0x128>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	428b      	cmp	r3, r1
 800115a:	d329      	bcc.n	80011b0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	6821      	ldr	r1, [r4, #0]
 800115e:	078e      	lsls	r6, r1, #30
 8001160:	d431      	bmi.n	80011c6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	07ca      	lsls	r2, r1, #31
 8001164:	d444      	bmi.n	80011f0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001166:	4a40      	ldr	r2, [pc, #256]	; (8001268 <HAL_RCC_ClockConfig+0x128>)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	429d      	cmp	r5, r3
 8001170:	d367      	bcc.n	8001242 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	4d3d      	ldr	r5, [pc, #244]	; (800126c <HAL_RCC_ClockConfig+0x12c>)
 8001176:	f012 0f04 	tst.w	r2, #4
 800117a:	d16e      	bne.n	800125a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117c:	0713      	lsls	r3, r2, #28
 800117e:	d506      	bpl.n	800118e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001180:	686b      	ldr	r3, [r5, #4]
 8001182:	6922      	ldr	r2, [r4, #16]
 8001184:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001188:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800118c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800118e:	f7ff ff9b 	bl	80010c8 <HAL_RCC_GetSysClockFreq>
 8001192:	686b      	ldr	r3, [r5, #4]
 8001194:	4a36      	ldr	r2, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x130>)
 8001196:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	40d8      	lsrs	r0, r3
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_RCC_ClockConfig+0x134>)
 80011a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <HAL_RCC_ClockConfig+0x138>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f7ff fc4d 	bl	8000a44 <HAL_InitTick>
  return HAL_OK;
 80011aa:	2000      	movs	r0, #0
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	4299      	cmp	r1, r3
 80011c2:	d1c2      	bne.n	800114a <HAL_RCC_ClockConfig+0xa>
 80011c4:	e7ca      	b.n	800115c <HAL_RCC_ClockConfig+0x1c>
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011cc:	bf1e      	ittt	ne
 80011ce:	685a      	ldrne	r2, [r3, #4]
 80011d0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80011d4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d8:	bf42      	ittt	mi
 80011da:	685a      	ldrmi	r2, [r3, #4]
 80011dc:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80011e0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	68a0      	ldr	r0, [r4, #8]
 80011e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011ea:	4302      	orrs	r2, r0
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	e7b8      	b.n	8001162 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f0:	6862      	ldr	r2, [r4, #4]
 80011f2:	4e1e      	ldr	r6, [pc, #120]	; (800126c <HAL_RCC_ClockConfig+0x12c>)
 80011f4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f8:	d11b      	bne.n	8001232 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	d0a4      	beq.n	800114a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001200:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001202:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	4313      	orrs	r3, r2
 800120c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800120e:	f7ff fc5b 	bl	8000ac8 <HAL_GetTick>
 8001212:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001214:	6873      	ldr	r3, [r6, #4]
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001220:	d0a1      	beq.n	8001166 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001222:	f7ff fc51 	bl	8000ac8 <HAL_GetTick>
 8001226:	1bc0      	subs	r0, r0, r7
 8001228:	4540      	cmp	r0, r8
 800122a:	d9f3      	bls.n	8001214 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
}
 800122e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001232:	2a02      	cmp	r2, #2
 8001234:	d102      	bne.n	800123c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001236:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800123a:	e7e0      	b.n	80011fe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	f013 0f02 	tst.w	r3, #2
 8001240:	e7dd      	b.n	80011fe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f023 0307 	bic.w	r3, r3, #7
 8001248:	432b      	orrs	r3, r5
 800124a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	429d      	cmp	r5, r3
 8001254:	f47f af79 	bne.w	800114a <HAL_RCC_ClockConfig+0xa>
 8001258:	e78b      	b.n	8001172 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800125a:	686b      	ldr	r3, [r5, #4]
 800125c:	68e1      	ldr	r1, [r4, #12]
 800125e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001262:	430b      	orrs	r3, r1
 8001264:	606b      	str	r3, [r5, #4]
 8001266:	e789      	b.n	800117c <HAL_RCC_ClockConfig+0x3c>
 8001268:	40022000 	.word	0x40022000
 800126c:	40021000 	.word	0x40021000
 8001270:	0800d436 	.word	0x0800d436
 8001274:	2000000c 	.word	0x2000000c
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800127c:	2302      	movs	r3, #2
 800127e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001282:	6803      	ldr	r3, [r0, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800128a:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 800128c:	bf1e      	ittt	ne
 800128e:	681a      	ldrne	r2, [r3, #0]
 8001290:	f042 0201 	orrne.w	r2, r2, #1
 8001294:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001296:	2301      	movs	r3, #1
 8001298:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800129c:	2000      	movs	r0, #0
 800129e:	4770      	bx	lr

080012a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80012a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a4:	4290      	cmp	r0, r2
 80012a6:	d00a      	beq.n	80012be <TIM_Base_SetConfig+0x1e>
 80012a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012ac:	d007      	beq.n	80012be <TIM_Base_SetConfig+0x1e>
 80012ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d003      	beq.n	80012be <TIM_Base_SetConfig+0x1e>
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d115      	bne.n	80012ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012c4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <TIM_Base_SetConfig+0x6c>)
 80012c8:	4290      	cmp	r0, r2
 80012ca:	d00a      	beq.n	80012e2 <TIM_Base_SetConfig+0x42>
 80012cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012d0:	d007      	beq.n	80012e2 <TIM_Base_SetConfig+0x42>
 80012d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012d6:	4290      	cmp	r0, r2
 80012d8:	d003      	beq.n	80012e2 <TIM_Base_SetConfig+0x42>
 80012da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012de:	4290      	cmp	r0, r2
 80012e0:	d103      	bne.n	80012ea <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012e2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012ea:	694a      	ldr	r2, [r1, #20]
 80012ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80012f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012f4:	688b      	ldr	r3, [r1, #8]
 80012f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012f8:	680b      	ldr	r3, [r1, #0]
 80012fa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <TIM_Base_SetConfig+0x6c>)
 80012fe:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001300:	bf04      	itt	eq
 8001302:	690b      	ldreq	r3, [r1, #16]
 8001304:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001306:	2301      	movs	r3, #1
 8001308:	6143      	str	r3, [r0, #20]
 800130a:	4770      	bx	lr
 800130c:	40012c00 	.word	0x40012c00

08001310 <HAL_TIM_Base_Init>:
{
 8001310:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001312:	4604      	mov	r4, r0
 8001314:	b1a0      	cbz	r0, 8001340 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800131a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800131e:	b91b      	cbnz	r3, 8001328 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001320:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001324:	f000 fdf8 	bl	8001f18 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800132a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800132c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001330:	1d21      	adds	r1, r4, #4
 8001332:	f7ff ffb5 	bl	80012a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001336:	2301      	movs	r3, #1
  return HAL_OK;
 8001338:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800133a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800133e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
}
 8001342:	bd10      	pop	{r4, pc}

08001344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001344:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001346:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001348:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800134a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800134e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001352:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001354:	6083      	str	r3, [r0, #8]
 8001356:	bd10      	pop	{r4, pc}

08001358 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001358:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800135c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800135e:	2b01      	cmp	r3, #1
{
 8001360:	4604      	mov	r4, r0
 8001362:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001366:	d019      	beq.n	800139c <HAL_TIM_ConfigClockSource+0x44>
 8001368:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800136a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800136e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001370:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001374:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800137a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800137e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001380:	680b      	ldr	r3, [r1, #0]
 8001382:	2b40      	cmp	r3, #64	; 0x40
 8001384:	d065      	beq.n	8001452 <HAL_TIM_ConfigClockSource+0xfa>
 8001386:	d815      	bhi.n	80013b4 <HAL_TIM_ConfigClockSource+0x5c>
 8001388:	2b10      	cmp	r3, #16
 800138a:	d00c      	beq.n	80013a6 <HAL_TIM_ConfigClockSource+0x4e>
 800138c:	d807      	bhi.n	800139e <HAL_TIM_ConfigClockSource+0x46>
 800138e:	b153      	cbz	r3, 80013a6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001390:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001392:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001398:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800139c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d001      	beq.n	80013a6 <HAL_TIM_ConfigClockSource+0x4e>
 80013a2:	2b30      	cmp	r3, #48	; 0x30
 80013a4:	d1f4      	bne.n	8001390 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80013a6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013a8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80013ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013b0:	4313      	orrs	r3, r2
 80013b2:	e01a      	b.n	80013ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80013b4:	2b60      	cmp	r3, #96	; 0x60
 80013b6:	d034      	beq.n	8001422 <HAL_TIM_ConfigClockSource+0xca>
 80013b8:	d819      	bhi.n	80013ee <HAL_TIM_ConfigClockSource+0x96>
 80013ba:	2b50      	cmp	r3, #80	; 0x50
 80013bc:	d1e8      	bne.n	8001390 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013be:	684a      	ldr	r2, [r1, #4]
 80013c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013c4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013c6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ca:	f025 0501 	bic.w	r5, r5, #1
 80013ce:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013d0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80013d2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013d8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80013de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80013e0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013e6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80013ea:	6083      	str	r3, [r0, #8]
 80013ec:	e7d0      	b.n	8001390 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80013ee:	2b70      	cmp	r3, #112	; 0x70
 80013f0:	d00c      	beq.n	800140c <HAL_TIM_ConfigClockSource+0xb4>
 80013f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f6:	d1cb      	bne.n	8001390 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80013f8:	68cb      	ldr	r3, [r1, #12]
 80013fa:	684a      	ldr	r2, [r1, #4]
 80013fc:	6889      	ldr	r1, [r1, #8]
 80013fe:	f7ff ffa1 	bl	8001344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	6893      	ldr	r3, [r2, #8]
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	e008      	b.n	800141e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800140c:	68cb      	ldr	r3, [r1, #12]
 800140e:	684a      	ldr	r2, [r1, #4]
 8001410:	6889      	ldr	r1, [r1, #8]
 8001412:	f7ff ff97 	bl	8001344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800141a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800141e:	6093      	str	r3, [r2, #8]
      break;
 8001420:	e7b6      	b.n	8001390 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001422:	684d      	ldr	r5, [r1, #4]
 8001424:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001426:	6a01      	ldr	r1, [r0, #32]
 8001428:	f021 0110 	bic.w	r1, r1, #16
 800142c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800142e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001430:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001432:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800143a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800143e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001442:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001444:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001446:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800144c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001450:	e7cb      	b.n	80013ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001452:	684a      	ldr	r2, [r1, #4]
 8001454:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001456:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001458:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800145a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800145e:	f025 0501 	bic.w	r5, r5, #1
 8001462:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001464:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001466:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800146c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001470:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001472:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001474:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800147a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800147e:	e7b4      	b.n	80013ea <HAL_TIM_ConfigClockSource+0x92>

08001480 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001480:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001484:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001486:	2b01      	cmp	r3, #1
 8001488:	f04f 0302 	mov.w	r3, #2
 800148c:	d014      	beq.n	80014b8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800148e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001490:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001494:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001496:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001498:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800149a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800149c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80014a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014a4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014a6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014a8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80014aa:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014b2:	2300      	movs	r3, #0
 80014b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014b8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014ba:	bd30      	pop	{r4, r5, pc}

080014bc <LCD_Showthrmo>:
			d = d + 4 * (x - y) + 10;
			y--;
		}
	}
}
void LCD_Showthrmo(uint16_t color) {
 80014bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t temp1;
	uint8_t counter = 0;
	uint16_t index = 0;
 80014c0:	2700      	movs	r7, #0
	temp1 = thermo[index];
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <LCD_Showthrmo+0x5c>)
void LCD_Showthrmo(uint16_t color) {
 80014c4:	4681      	mov	r9, r0
	temp1 = thermo[index];
 80014c6:	24dc      	movs	r4, #220	; 0xdc
	uint8_t counter = 0;
 80014c8:	463e      	mov	r6, r7
 80014ca:	469a      	mov	sl, r3
	temp1 = thermo[index];
 80014cc:	f893 8000 	ldrb.w	r8, [r3]
void LCD_Showthrmo(uint16_t color) {
 80014d0:	250a      	movs	r5, #10
	for (uint16_t i = 0; i < 30; i++) {
		for (uint16_t j = 0; j < 80; j++) {
			if (temp1 & 0x01) {
				drawPixel(10 + j, 220 + i, color);
 80014d2:	fa0f fb84 	sxth.w	fp, r4
			if (temp1 & 0x01) {
 80014d6:	f018 0f01 	tst.w	r8, #1
 80014da:	d004      	beq.n	80014e6 <LCD_Showthrmo+0x2a>
				drawPixel(10 + j, 220 + i, color);
 80014dc:	464a      	mov	r2, r9
 80014de:	4659      	mov	r1, fp
 80014e0:	b228      	sxth	r0, r5
 80014e2:	f001 fd73 	bl	8002fcc <drawPixel>
			}
			temp1 >>= 1;
			counter++;
 80014e6:	3601      	adds	r6, #1
 80014e8:	b2f6      	uxtb	r6, r6
			if (counter == 8) {
 80014ea:	2e08      	cmp	r6, #8
				index++;
 80014ec:	bf08      	it	eq
 80014ee:	3701      	addeq	r7, #1
 80014f0:	f105 0501 	add.w	r5, r5, #1
 80014f4:	bf08      	it	eq
 80014f6:	b2bf      	uxtheq	r7, r7
 80014f8:	b2ad      	uxth	r5, r5
			temp1 >>= 1;
 80014fa:	bf12      	itee	ne
 80014fc:	ea4f 0858 	movne.w	r8, r8, lsr #1
				temp1 = thermo[index];
 8001500:	f81a 8007 	ldrbeq.w	r8, [sl, r7]
				counter = 0;
 8001504:	2600      	moveq	r6, #0
		for (uint16_t j = 0; j < 80; j++) {
 8001506:	2d5a      	cmp	r5, #90	; 0x5a
 8001508:	d1e5      	bne.n	80014d6 <LCD_Showthrmo+0x1a>
 800150a:	3401      	adds	r4, #1
 800150c:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < 30; i++) {
 800150e:	2cfa      	cmp	r4, #250	; 0xfa
 8001510:	d1de      	bne.n	80014d0 <LCD_Showthrmo+0x14>
 8001512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001516:	bf00      	nop
 8001518:	0800d2e0 	.word	0x0800d2e0

0800151c <ShowIntroScreen>:
			}
		}
	}
}
void ShowIntroScreen(uint16_t fc) {
 800151c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fillScreen(BLACK);
	uint8_t temp1;
	uint8_t counter = 0;
	uint16_t index = 0;
 8001520:	2700      	movs	r7, #0
void ShowIntroScreen(uint16_t fc) {
 8001522:	4680      	mov	r8, r0
	fillScreen(BLACK);
 8001524:	2000      	movs	r0, #0
 8001526:	f002 fb89 	bl	8003c3c <fillScreen>
	temp1 = IntroScreenBitmap[index];
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <ShowIntroScreen+0x6c>)
	for (uint16_t i = 60; i < 260; i++) {
 800152c:	243c      	movs	r4, #60	; 0x3c
	uint8_t counter = 0;
 800152e:	463e      	mov	r6, r7
 8001530:	469a      	mov	sl, r3
	temp1 = IntroScreenBitmap[index];
 8001532:	f893 9000 	ldrb.w	r9, [r3]
void ShowIntroScreen(uint16_t fc) {
 8001536:	2500      	movs	r5, #0
		for (uint16_t j = 0; j < 472; j++) {
			if ((temp1 & 0x01)) /* The condition here is inverted because the array of the picture was inverted */
			{
				drawPixel(j, i, fc);
 8001538:	fa0f fb84 	sxth.w	fp, r4
			if ((temp1 & 0x01)) /* The condition here is inverted because the array of the picture was inverted */
 800153c:	f019 0f01 	tst.w	r9, #1
 8001540:	d004      	beq.n	800154c <ShowIntroScreen+0x30>
				drawPixel(j, i, fc);
 8001542:	4642      	mov	r2, r8
 8001544:	4659      	mov	r1, fp
 8001546:	b228      	sxth	r0, r5
 8001548:	f001 fd40 	bl	8002fcc <drawPixel>
			}
			temp1 >>= 1;
			counter++;
 800154c:	3601      	adds	r6, #1
 800154e:	b2f6      	uxtb	r6, r6
			if (counter == 8) {
 8001550:	2e08      	cmp	r6, #8
				index++;
 8001552:	bf08      	it	eq
 8001554:	3701      	addeq	r7, #1
		for (uint16_t j = 0; j < 472; j++) {
 8001556:	f105 0501 	add.w	r5, r5, #1
				index++;
 800155a:	bf08      	it	eq
 800155c:	b2bf      	uxtheq	r7, r7
		for (uint16_t j = 0; j < 472; j++) {
 800155e:	b2ad      	uxth	r5, r5
			temp1 >>= 1;
 8001560:	bf12      	itee	ne
 8001562:	ea4f 0959 	movne.w	r9, r9, lsr #1
				temp1 = IntroScreenBitmap[index];
 8001566:	f81a 9007 	ldrbeq.w	r9, [sl, r7]
				counter = 0;
 800156a:	2600      	moveq	r6, #0
		for (uint16_t j = 0; j < 472; j++) {
 800156c:	f5b5 7fec 	cmp.w	r5, #472	; 0x1d8
 8001570:	d1e4      	bne.n	800153c <ShowIntroScreen+0x20>
	for (uint16_t i = 60; i < 260; i++) {
 8001572:	3401      	adds	r4, #1
 8001574:	b2a4      	uxth	r4, r4
 8001576:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800157a:	d1dc      	bne.n	8001536 <ShowIntroScreen+0x1a>
			}
		}
	}
	HAL_Delay(2000);
 800157c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8001580:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(2000);
 8001584:	f7ff baa6 	b.w	8000ad4 <HAL_Delay>
 8001588:	080088e4 	.word	0x080088e4
 800158c:	00000000 	.word	0x00000000

08001590 <drawPointer>:
void drawPointer(uint16_t x0, uint16_t y0, uint16_t r, uint16_t theta,
		uint8_t thickness, uint16_t color) {
 8001590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001594:	4604      	mov	r4, r0
 8001596:	b08b      	sub	sp, #44	; 0x2c
	int16_t x = x0 - r * cos(theta * 3.14 / 180);
 8001598:	4610      	mov	r0, r2
		uint8_t thickness, uint16_t color) {
 800159a:	460d      	mov	r5, r1
 800159c:	4692      	mov	sl, r2
 800159e:	461e      	mov	r6, r3
	int16_t x = x0 - r * cos(theta * 3.14 / 180);
 80015a0:	f7fe ff28 	bl	80003f4 <__aeabi_i2d>
 80015a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80015a8:	4630      	mov	r0, r6
 80015aa:	f7fe ff23 	bl	80003f4 <__aeabi_i2d>
 80015ae:	a330      	add	r3, pc, #192	; (adr r3, 8001670 <drawPointer+0xe0>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7fe ff84 	bl	80004c0 <__aeabi_dmul>
 80015b8:	2200      	movs	r2, #0
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <drawPointer+0xe8>)
 80015bc:	f7ff f8aa 	bl	8000714 <__aeabi_ddiv>
 80015c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80015c4:	f003 fa64 	bl	8004a90 <cos>
 80015c8:	4606      	mov	r6, r0
 80015ca:	4620      	mov	r0, r4
 80015cc:	460f      	mov	r7, r1
 80015ce:	f7fe ff11 	bl	80003f4 <__aeabi_i2d>
 80015d2:	4632      	mov	r2, r6
 80015d4:	4680      	mov	r8, r0
 80015d6:	4689      	mov	r9, r1
 80015d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015dc:	463b      	mov	r3, r7
 80015de:	f7fe ff6f 	bl	80004c0 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4640      	mov	r0, r8
 80015e8:	4649      	mov	r1, r9
 80015ea:	f7fe fdb5 	bl	8000158 <__aeabi_dsub>
 80015ee:	f7ff fa01 	bl	80009f4 <__aeabi_d2iz>
 80015f2:	b203      	sxth	r3, r0
	int16_t y = y0 - r * sin(theta * 3.14 / 180);
 80015f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	int16_t x = x0 - r * cos(theta * 3.14 / 180);
 80015f8:	9307      	str	r3, [sp, #28]
	int16_t y = y0 - r * sin(theta * 3.14 / 180);
 80015fa:	f003 fa7f 	bl	8004afc <sin>
 80015fe:	4680      	mov	r8, r0
 8001600:	4628      	mov	r0, r5
 8001602:	4689      	mov	r9, r1
 8001604:	f7fe fef6 	bl	80003f4 <__aeabi_i2d>
 8001608:	4642      	mov	r2, r8
 800160a:	4606      	mov	r6, r0
 800160c:	460f      	mov	r7, r1
 800160e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001612:	464b      	mov	r3, r9
 8001614:	f7fe ff54 	bl	80004c0 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4630      	mov	r0, r6
 800161e:	4639      	mov	r1, r7
 8001620:	f7fe fd9a 	bl	8000158 <__aeabi_dsub>
 8001624:	f7ff f9e6 	bl	80009f4 <__aeabi_d2iz>

	fillTriangle((x0 - ((y - y0) * thickness / r)),
			(y0 - ((x0 - x) * thickness / r)),
 8001628:	9b07      	ldr	r3, [sp, #28]
		uint8_t thickness, uint16_t color) {
 800162a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
	int16_t y = y0 - r * sin(theta * 3.14 / 180);
 800162e:	b200      	sxth	r0, r0
			(y0 - ((x0 - x) * thickness / r)),
 8001630:	1ae1      	subs	r1, r4, r3
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 8001632:	1b46      	subs	r6, r0, r5
			(y0 - ((x0 - x) * thickness / r)),
 8001634:	fb0b f101 	mul.w	r1, fp, r1
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 8001638:	fb0b f606 	mul.w	r6, fp, r6
			(y0 - ((x0 - x) * thickness / r)),
 800163c:	fb91 f1fa 	sdiv	r1, r1, sl
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 8001640:	fb96 f6fa 	sdiv	r6, r6, sl
			(y0 - ((x0 - x) * thickness / r)),
 8001644:	b289      	uxth	r1, r1
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 8001646:	b2b6      	uxth	r6, r6
			(x0 + ((y - y0) * thickness / r)),
			(y0 + ((x0 - x) * thickness / r)), x, y, color);
 8001648:	186b      	adds	r3, r5, r1
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 800164a:	9001      	str	r0, [sp, #4]
			(y0 - ((x0 - x) * thickness / r)),
 800164c:	1a69      	subs	r1, r5, r1
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 800164e:	9807      	ldr	r0, [sp, #28]
 8001650:	f8bd 5054 	ldrh.w	r5, [sp, #84]	; 0x54
			(x0 + ((y - y0) * thickness / r)),
 8001654:	19a2      	adds	r2, r4, r6
	fillTriangle((x0 - ((y - y0) * thickness / r)),
 8001656:	1ba4      	subs	r4, r4, r6
 8001658:	9000      	str	r0, [sp, #0]
 800165a:	9502      	str	r5, [sp, #8]
 800165c:	b21b      	sxth	r3, r3
 800165e:	b212      	sxth	r2, r2
 8001660:	b209      	sxth	r1, r1
 8001662:	b220      	sxth	r0, r4
 8001664:	f002 fb3c 	bl	8003ce0 <fillTriangle>
}
 8001668:	b00b      	add	sp, #44	; 0x2c
 800166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166e:	bf00      	nop
 8001670:	51eb851f 	.word	0x51eb851f
 8001674:	40091eb8 	.word	0x40091eb8
 8001678:	40668000 	.word	0x40668000

0800167c <LCD_ShowScale>:
		uint16_t theta, uint8_t thickness, uint16_t Color) {
	drawPointer(r * cos(theta * 3.14 / 180) + x0,
			y0 - r * sin(theta * 3.14 / 180), r / 5, 180 - theta, thickness,
			Color);
}
void LCD_ShowScale(uint16_t fc) {
 800167c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t temp1;
	uint8_t counter = 0;
	uint16_t index = 0;
 8001680:	2700      	movs	r7, #0
	temp1 = scale[index];
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <LCD_ShowScale+0x60>)
void LCD_ShowScale(uint16_t fc) {
 8001684:	4681      	mov	r9, r0
	for (uint16_t i = 104; i < 320; i++) {
 8001686:	2468      	movs	r4, #104	; 0x68
	uint8_t counter = 0;
 8001688:	463e      	mov	r6, r7
 800168a:	469a      	mov	sl, r3
	temp1 = scale[index];
 800168c:	f893 8000 	ldrb.w	r8, [r3]
void LCD_ShowScale(uint16_t fc) {
 8001690:	25e0      	movs	r5, #224	; 0xe0
		for (uint16_t j = 224; j < 480; j++) {
			if (!(temp1 & 0x01)) /* The condition here is inverted because the array of the picture was inverted */
			{
				drawPixel(j, i, fc);
 8001692:	fa0f fb84 	sxth.w	fp, r4
			if (!(temp1 & 0x01)) /* The condition here is inverted because the array of the picture was inverted */
 8001696:	f018 0f01 	tst.w	r8, #1
 800169a:	d104      	bne.n	80016a6 <LCD_ShowScale+0x2a>
				drawPixel(j, i, fc);
 800169c:	464a      	mov	r2, r9
 800169e:	4659      	mov	r1, fp
 80016a0:	b228      	sxth	r0, r5
 80016a2:	f001 fc93 	bl	8002fcc <drawPixel>
			}
			temp1 >>= 1;
			counter++;
 80016a6:	3601      	adds	r6, #1
 80016a8:	b2f6      	uxtb	r6, r6
			if (counter == 8) {
 80016aa:	2e08      	cmp	r6, #8
				index++;
 80016ac:	bf08      	it	eq
 80016ae:	3701      	addeq	r7, #1
		for (uint16_t j = 224; j < 480; j++) {
 80016b0:	f105 0501 	add.w	r5, r5, #1
				index++;
 80016b4:	bf08      	it	eq
 80016b6:	b2bf      	uxtheq	r7, r7
		for (uint16_t j = 224; j < 480; j++) {
 80016b8:	b2ad      	uxth	r5, r5
			temp1 >>= 1;
 80016ba:	bf12      	itee	ne
 80016bc:	ea4f 0858 	movne.w	r8, r8, lsr #1
				temp1 = scale[index];
 80016c0:	f81a 8007 	ldrbeq.w	r8, [sl, r7]
				counter = 0;
 80016c4:	2600      	moveq	r6, #0
		for (uint16_t j = 224; j < 480; j++) {
 80016c6:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 80016ca:	d1e4      	bne.n	8001696 <LCD_ShowScale+0x1a>
	for (uint16_t i = 104; i < 320; i++) {
 80016cc:	3401      	adds	r4, #1
 80016ce:	b2a4      	uxth	r4, r4
 80016d0:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 80016d4:	d1dc      	bne.n	8001690 <LCD_ShowScale+0x14>
 80016d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	0800b7e0 	.word	0x0800b7e0

080016e0 <Draw_line_with_thickness>:
			}
		}
	}
}
void Draw_line_with_thickness(uint16_t x1, uint16_t y1, uint16_t x2,
		uint16_t y2, uint32_t Color, uint16_t thickness) {
 80016e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	468a      	mov	sl, r1
 80016e6:	469b      	mov	fp, r3
	for (int i = 0; i <= (thickness / 2); i++) {
 80016e8:	2500      	movs	r5, #0
 80016ea:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
		drawLine(x1, y1 + i, x2, y2 + i, Color);
 80016ee:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	for (int i = 0; i <= (thickness / 2); i++) {
 80016f2:	0876      	lsrs	r6, r6, #1
		drawLine(x1, y1 + i, x2, y2 + i, Color);
 80016f4:	b207      	sxth	r7, r0
 80016f6:	fa0f f882 	sxth.w	r8, r2
 80016fa:	b2ac      	uxth	r4, r5
 80016fc:	eb0b 0304 	add.w	r3, fp, r4
 8001700:	eb0a 0104 	add.w	r1, sl, r4
 8001704:	b21b      	sxth	r3, r3
 8001706:	4642      	mov	r2, r8
 8001708:	b209      	sxth	r1, r1
 800170a:	4638      	mov	r0, r7
 800170c:	f8cd 9000 	str.w	r9, [sp]
 8001710:	f002 fab9 	bl	8003c86 <drawLine>
		drawLine(x1, y1 - i, x2, y2 - i, Color);
 8001714:	ebab 0304 	sub.w	r3, fp, r4
 8001718:	ebaa 0104 	sub.w	r1, sl, r4
 800171c:	f8cd 9000 	str.w	r9, [sp]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4642      	mov	r2, r8
 8001724:	b209      	sxth	r1, r1
 8001726:	4638      	mov	r0, r7
	for (int i = 0; i <= (thickness / 2); i++) {
 8001728:	3501      	adds	r5, #1
		drawLine(x1, y1 - i, x2, y2 - i, Color);
 800172a:	f002 faac 	bl	8003c86 <drawLine>
	for (int i = 0; i <= (thickness / 2); i++) {
 800172e:	42ae      	cmp	r6, r5
 8001730:	dae3      	bge.n	80016fa <Draw_line_with_thickness+0x1a>
	}
}
 8001732:	b003      	add	sp, #12
 8001734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001738 <LCD_Showbatt>:
			y0 + Arc_Raduis * sin(Theta * 22 / (180 * 7)), Arc_Pointer_Raduis,
			Theta, Thickness, Color);
}
void LCD_Showbatt(uint16_t volt) {
	uint16_t color;
	if (volt >= 11) {
 8001738:	280a      	cmp	r0, #10
void LCD_Showbatt(uint16_t volt) {
 800173a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (volt >= 11) {
 800173e:	d82e      	bhi.n	800179e <LCD_Showbatt+0x66>
		color = GREEN;
	} else if (volt < 11 && volt >= 10) {
 8001740:	d030      	beq.n	80017a4 <LCD_Showbatt+0x6c>
		color = YELLOW;
	} else if (volt < 10) {
		color = RED;
 8001742:	f44f 4978 	mov.w	r9, #63488	; 0xf800
	}
	uint8_t temp1;
	uint8_t counter = 0;
	uint16_t index = 0;
 8001746:	2700      	movs	r7, #0
	temp1 = battBitmaps[index];
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <LCD_Showbatt+0x74>)
 800174a:	f44f 7487 	mov.w	r4, #270	; 0x10e
	uint8_t counter = 0;
 800174e:	463e      	mov	r6, r7
 8001750:	469a      	mov	sl, r3
	temp1 = battBitmaps[index];
 8001752:	f893 8000 	ldrb.w	r8, [r3]
		color = RED;
 8001756:	250a      	movs	r5, #10

	for (uint16_t i = 0; i < 30; i++) {
		for (uint16_t j = 0; j < 48; j++) {
			if (temp1 & 0x01) {
				drawPixel(10 + j, 270 + i, color);
 8001758:	fa0f fb84 	sxth.w	fp, r4
			if (temp1 & 0x01) {
 800175c:	f018 0f01 	tst.w	r8, #1
 8001760:	d004      	beq.n	800176c <LCD_Showbatt+0x34>
				drawPixel(10 + j, 270 + i, color);
 8001762:	464a      	mov	r2, r9
 8001764:	4659      	mov	r1, fp
 8001766:	b228      	sxth	r0, r5
 8001768:	f001 fc30 	bl	8002fcc <drawPixel>
			}
			temp1 >>= 1;
			counter++;
 800176c:	3601      	adds	r6, #1
 800176e:	b2f6      	uxtb	r6, r6
			if (counter == 8) {
 8001770:	2e08      	cmp	r6, #8
				index++;
 8001772:	bf08      	it	eq
 8001774:	3701      	addeq	r7, #1
 8001776:	f105 0501 	add.w	r5, r5, #1
 800177a:	bf08      	it	eq
 800177c:	b2bf      	uxtheq	r7, r7
 800177e:	b2ad      	uxth	r5, r5
			temp1 >>= 1;
 8001780:	bf12      	itee	ne
 8001782:	ea4f 0858 	movne.w	r8, r8, lsr #1
				temp1 = battBitmaps[index];
 8001786:	f81a 8007 	ldrbeq.w	r8, [sl, r7]
				counter = 0;
 800178a:	2600      	moveq	r6, #0
		for (uint16_t j = 0; j < 48; j++) {
 800178c:	2d3a      	cmp	r5, #58	; 0x3a
 800178e:	d1e5      	bne.n	800175c <LCD_Showbatt+0x24>
 8001790:	3401      	adds	r4, #1
 8001792:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < 30; i++) {
 8001794:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001798:	d1dd      	bne.n	8001756 <LCD_Showbatt+0x1e>
 800179a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		color = GREEN;
 800179e:	f44f 69fc 	mov.w	r9, #2016	; 0x7e0
 80017a2:	e7d0      	b.n	8001746 <LCD_Showbatt+0xe>
		color = YELLOW;
 80017a4:	f64f 79e0 	movw	r9, #65504	; 0xffe0
 80017a8:	e7cd      	b.n	8001746 <LCD_Showbatt+0xe>
 80017aa:	bf00      	nop
 80017ac:	0800b6fc 	.word	0x0800b6fc

080017b0 <drawRPMSlider>:
	fillTriangle(320, 480, 320, 480 - Level, 320 - (float) Level / 1.732,
			480 - Level, Color);
}


void drawRPMSlider(uint16_t Back_Ground_Color) {
 80017b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint16_t Level = RPM / 29;
 80017b2:	261d      	movs	r6, #29
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <drawRPMSlider+0x68>)
	if (Old_RPM >= RPM)
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <drawRPMSlider+0x6c>)
	uint16_t Level = RPM / 29;
 80017b8:	881c      	ldrh	r4, [r3, #0]
	if (Old_RPM >= RPM)
 80017ba:	8811      	ldrh	r1, [r2, #0]
	uint16_t Level = RPM / 29;
 80017bc:	b2a4      	uxth	r4, r4
 80017be:	fbb4 f4f6 	udiv	r4, r4, r6
	if (Old_RPM >= RPM)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b289      	uxth	r1, r1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4299      	cmp	r1, r3
 80017ca:	b225      	sxth	r5, r4
 80017cc:	d30b      	bcc.n	80017e6 <drawRPMSlider+0x36>
		fillRect(Level, 0, Old_RPM / 29 - Level, 45, Back_Ground_Color);
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	232d      	movs	r3, #45	; 0x2d
 80017d2:	b292      	uxth	r2, r2
 80017d4:	fbb2 f2f6 	udiv	r2, r2, r6
 80017d8:	1b12      	subs	r2, r2, r4
 80017da:	9000      	str	r0, [sp, #0]
 80017dc:	b212      	sxth	r2, r2
 80017de:	2100      	movs	r1, #0
 80017e0:	4628      	mov	r0, r5
 80017e2:	f002 f903 	bl	80039ec <fillRect>
	if (Level <= 300)
 80017e6:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 80017ea:	d80a      	bhi.n	8001802 <drawRPMSlider+0x52>
		fillRect(0, 0, Level, 45, WHITE);
 80017ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
	else if (Level <= 400 && Level > 300)
		fillRect(0, 0, Level, 45, GREEN);
	else
		fillRect(0, 0, Level, 45, RED);
 80017f0:	2100      	movs	r1, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	462a      	mov	r2, r5
 80017f6:	232d      	movs	r3, #45	; 0x2d
 80017f8:	4608      	mov	r0, r1
 80017fa:	f002 f8f7 	bl	80039ec <fillRect>
}
 80017fe:	b002      	add	sp, #8
 8001800:	bd70      	pop	{r4, r5, r6, pc}
	else if (Level <= 400 && Level > 300)
 8001802:	f46f 7396 	mvn.w	r3, #300	; 0x12c
 8001806:	441c      	add	r4, r3
 8001808:	b2a4      	uxth	r4, r4
 800180a:	2c63      	cmp	r4, #99	; 0x63
		fillRect(0, 0, Level, 45, GREEN);
 800180c:	bf94      	ite	ls
 800180e:	f44f 63fc 	movls.w	r3, #2016	; 0x7e0
		fillRect(0, 0, Level, 45, RED);
 8001812:	f44f 4378 	movhi.w	r3, #63488	; 0xf800
 8001816:	e7eb      	b.n	80017f0 <drawRPMSlider+0x40>
 8001818:	2000000a 	.word	0x2000000a
 800181c:	2000009c 	.word	0x2000009c

08001820 <drawRPMValue>:
drawRPMValue() {
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
	char rpm[5];
	itoa(Old_RPM, rpm, 10);
	printnewtstr(100, 110, BLACK, &mono12x7bold, 2, rpm);
 8001822:	2602      	movs	r6, #2
	itoa(Old_RPM, rpm, 10);
 8001824:	4f13      	ldr	r7, [pc, #76]	; (8001874 <drawRPMValue+0x54>)
drawRPMValue() {
 8001826:	b085      	sub	sp, #20
	itoa(Old_RPM, rpm, 10);
 8001828:	8838      	ldrh	r0, [r7, #0]
 800182a:	ac02      	add	r4, sp, #8
	printnewtstr(100, 110, BLACK, &mono12x7bold, 2, rpm);
 800182c:	4d12      	ldr	r5, [pc, #72]	; (8001878 <drawRPMValue+0x58>)
	itoa(Old_RPM, rpm, 10);
 800182e:	4621      	mov	r1, r4
 8001830:	220a      	movs	r2, #10
 8001832:	b280      	uxth	r0, r0
 8001834:	f002 fcb6 	bl	80041a4 <itoa>
	printnewtstr(100, 110, BLACK, &mono12x7bold, 2, rpm);
 8001838:	462b      	mov	r3, r5
 800183a:	9401      	str	r4, [sp, #4]
 800183c:	9600      	str	r6, [sp, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	216e      	movs	r1, #110	; 0x6e
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f002 fc20 	bl	8004088 <printnewtstr>
	Old_RPM = RPM;
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <drawRPMValue+0x5c>)
	itoa(RPM, rpm, 10);
 800184a:	4621      	mov	r1, r4
	Old_RPM = RPM;
 800184c:	8813      	ldrh	r3, [r2, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	803b      	strh	r3, [r7, #0]
	itoa(RPM, rpm, 10);
 8001852:	8810      	ldrh	r0, [r2, #0]
 8001854:	220a      	movs	r2, #10
 8001856:	b280      	uxth	r0, r0
 8001858:	f002 fca4 	bl	80041a4 <itoa>
	printnewtstr(100, 110, RED, &mono12x7bold, 2, rpm);
 800185c:	9401      	str	r4, [sp, #4]
 800185e:	9600      	str	r6, [sp, #0]
 8001860:	462b      	mov	r3, r5
 8001862:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001866:	216e      	movs	r1, #110	; 0x6e
 8001868:	2064      	movs	r0, #100	; 0x64
 800186a:	f002 fc0d 	bl	8004088 <printnewtstr>

}
 800186e:	b005      	add	sp, #20
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001872:	bf00      	nop
 8001874:	2000009c 	.word	0x2000009c
 8001878:	0800b7bc 	.word	0x0800b7bc
 800187c:	2000000a 	.word	0x2000000a

08001880 <drawLap>:
void drawLap() {
 8001880:	b537      	push	{r0, r1, r2, r4, r5, lr}
	Draw_line_with_thickness(10, 130, 80, 100, WHITE, 2);
 8001882:	2302      	movs	r3, #2
 8001884:	f64f 74ff 	movw	r4, #65535	; 0xffff
	printnewtstr(130, 50, WHITE, &mono12x7, 1, "22");
 8001888:	2501      	movs	r5, #1
	Draw_line_with_thickness(10, 130, 80, 100, WHITE, 2);
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	2182      	movs	r1, #130	; 0x82
 8001894:	200a      	movs	r0, #10
 8001896:	f7ff ff23 	bl	80016e0 <Draw_line_with_thickness>
	printnewtstr(130, 50, WHITE, &mono12x7, 1, "22");
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <drawLap+0x44>)
 800189c:	4622      	mov	r2, r4
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	9500      	str	r5, [sp, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <drawLap+0x48>)
 80018a4:	2132      	movs	r1, #50	; 0x32
 80018a6:	2082      	movs	r0, #130	; 0x82
 80018a8:	f002 fbee 	bl	8004088 <printnewtstr>
	printnewtstr(160, 40, WHITE, &mono9x7, 1, "Lap");
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <drawLap+0x4c>)
 80018ae:	9500      	str	r5, [sp, #0]
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	4622      	mov	r2, r4
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <drawLap+0x50>)
 80018b6:	2128      	movs	r1, #40	; 0x28
 80018b8:	20a0      	movs	r0, #160	; 0xa0
 80018ba:	f002 fbe5 	bl	8004088 <printnewtstr>
}
 80018be:	b003      	add	sp, #12
 80018c0:	bd30      	pop	{r4, r5, pc}
 80018c2:	bf00      	nop
 80018c4:	08005b5d 	.word	0x08005b5d
 80018c8:	0800b7b0 	.word	0x0800b7b0
 80018cc:	08005b60 	.word	0x08005b60
 80018d0:	0800b7d4 	.word	0x0800b7d4

080018d4 <drawGear>:
void drawGear(uint8_t Gear_Number, uint8_t Size, uint16_t Back_Ground_Color) {
 80018d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	char gear[2];
	if (Old_Gear_Number == 6)
 80018d8:	4c19      	ldr	r4, [pc, #100]	; (8001940 <drawGear+0x6c>)
void drawGear(uint8_t Gear_Number, uint8_t Size, uint16_t Back_Ground_Color) {
 80018da:	4606      	mov	r6, r0
	if (Old_Gear_Number == 6)
 80018dc:	7823      	ldrb	r3, [r4, #0]
void drawGear(uint8_t Gear_Number, uint8_t Size, uint16_t Back_Ground_Color) {
 80018de:	460d      	mov	r5, r1
	if (Old_Gear_Number == 6)
 80018e0:	2b06      	cmp	r3, #6
void drawGear(uint8_t Gear_Number, uint8_t Size, uint16_t Back_Ground_Color) {
 80018e2:	4690      	mov	r8, r2
	if (Old_Gear_Number == 6)
 80018e4:	d119      	bne.n	800191a <drawGear+0x46>
		printnewtstr(290, 110, Back_Ground_Color, &mono18x7bold, Size, "N");
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <drawGear+0x70>)
 80018e8:	9100      	str	r1, [sp, #0]
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <drawGear+0x74>)
	else {
		itoa(Old_Gear_Number, gear, 10);
		printnewtstr(290, 110, Back_Ground_Color, &mono18x7bold, Size, gear);
 80018ee:	216e      	movs	r1, #110	; 0x6e
 80018f0:	f44f 7091 	mov.w	r0, #290	; 0x122
 80018f4:	f002 fbc8 	bl	8004088 <printnewtstr>
	}
	Old_Gear_Number = Gear_Number;
	if (Gear_Number == 6)
 80018f8:	2e06      	cmp	r6, #6
	Old_Gear_Number = Gear_Number;
 80018fa:	7026      	strb	r6, [r4, #0]
	if (Gear_Number == 6)
 80018fc:	d118      	bne.n	8001930 <drawGear+0x5c>
		printnewtstr(290, 110, RED, &mono18x7bold, Size, "N");
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <drawGear+0x70>)
 8001900:	9301      	str	r3, [sp, #4]
	else {
		itoa(Gear_Number, gear, 10);
		printnewtstr(290, 110, RED, &mono18x7bold, Size, gear);
 8001902:	9500      	str	r5, [sp, #0]
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <drawGear+0x74>)
 8001906:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800190a:	216e      	movs	r1, #110	; 0x6e
 800190c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001910:	f002 fbba 	bl	8004088 <printnewtstr>
	}
}
 8001914:	b004      	add	sp, #16
 8001916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		itoa(Old_Gear_Number, gear, 10);
 800191a:	af03      	add	r7, sp, #12
 800191c:	220a      	movs	r2, #10
 800191e:	7820      	ldrb	r0, [r4, #0]
 8001920:	4639      	mov	r1, r7
 8001922:	f002 fc3f 	bl	80041a4 <itoa>
		printnewtstr(290, 110, Back_Ground_Color, &mono18x7bold, Size, gear);
 8001926:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <drawGear+0x74>)
 800192c:	4642      	mov	r2, r8
 800192e:	e7de      	b.n	80018ee <drawGear+0x1a>
		itoa(Gear_Number, gear, 10);
 8001930:	ac03      	add	r4, sp, #12
 8001932:	220a      	movs	r2, #10
 8001934:	4621      	mov	r1, r4
 8001936:	4630      	mov	r0, r6
 8001938:	f002 fc34 	bl	80041a4 <itoa>
		printnewtstr(290, 110, RED, &mono18x7bold, Size, gear);
 800193c:	9401      	str	r4, [sp, #4]
 800193e:	e7e0      	b.n	8001902 <drawGear+0x2e>
 8001940:	20000008 	.word	0x20000008
 8001944:	08005b5b 	.word	0x08005b5b
 8001948:	0800b7c8 	.word	0x0800b7c8

0800194c <Steering_Wheel_Switches>:
 */

#include "SteeringWheel.h"


uint8_t Steering_Wheel_Switches(void) {
 800194c:	b507      	push	{r0, r1, r2, lr}
	uint8_t Switches[8] = {

	HAL_GPIO_ReadPin(GPIOA, Active_State_Pin),		//active state switch read
 800194e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001952:	4820      	ldr	r0, [pc, #128]	; (80019d4 <Steering_Wheel_Switches+0x88>)
 8001954:	f7ff fa0e 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOA, Open_Wing_Pin),			//open wing switch read
 8001958:	f44f 6100 	mov.w	r1, #2048	; 0x800
	uint8_t Switches[8] = {
 800195c:	f88d 0000 	strb.w	r0, [sp]
	HAL_GPIO_ReadPin(GPIOA, Open_Wing_Pin),			//open wing switch read
 8001960:	481c      	ldr	r0, [pc, #112]	; (80019d4 <Steering_Wheel_Switches+0x88>)
 8001962:	f7ff fa07 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOA, Close_Wing_Pin), 		//close wing switch read
 8001966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	uint8_t Switches[8] = {
 800196a:	f88d 0001 	strb.w	r0, [sp, #1]
	HAL_GPIO_ReadPin(GPIOA, Close_Wing_Pin), 		//close wing switch read
 800196e:	4819      	ldr	r0, [pc, #100]	; (80019d4 <Steering_Wheel_Switches+0x88>)
 8001970:	f7ff fa00 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOA, MS_Map_Pin), 			//MS map switch read
 8001974:	f44f 7180 	mov.w	r1, #256	; 0x100
	uint8_t Switches[8] = {
 8001978:	f88d 0002 	strb.w	r0, [sp, #2]
	HAL_GPIO_ReadPin(GPIOA, MS_Map_Pin), 			//MS map switch read
 800197c:	4815      	ldr	r0, [pc, #84]	; (80019d4 <Steering_Wheel_Switches+0x88>)
 800197e:	f7ff f9f9 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOC, DRS_Switch_Pin), 		//DRS switch read
 8001982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint8_t Switches[8] = {
 8001986:	f88d 0003 	strb.w	r0, [sp, #3]
	HAL_GPIO_ReadPin(GPIOC, DRS_Switch_Pin), 		//DRS switch read
 800198a:	4813      	ldr	r0, [pc, #76]	; (80019d8 <Steering_Wheel_Switches+0x8c>)
 800198c:	f7ff f9f2 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOC, DRS_Enable_Pin), 		//DRS enable switch read
 8001990:	2180      	movs	r1, #128	; 0x80
	uint8_t Switches[8] = {
 8001992:	f88d 0004 	strb.w	r0, [sp, #4]
	HAL_GPIO_ReadPin(GPIOC, DRS_Enable_Pin), 		//DRS enable switch read
 8001996:	4810      	ldr	r0, [pc, #64]	; (80019d8 <Steering_Wheel_Switches+0x8c>)
 8001998:	f7ff f9ec 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOB, Up_Shift_Pin), 			//Up Shift switch read
 800199c:	2104      	movs	r1, #4
	uint8_t Switches[8] = {
 800199e:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_GPIO_ReadPin(GPIOB, Up_Shift_Pin), 			//Up Shift switch read
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <Steering_Wheel_Switches+0x90>)
 80019a4:	f7ff f9e6 	bl	8000d74 <HAL_GPIO_ReadPin>

	HAL_GPIO_ReadPin(GPIOB, Down_Shift_Pin)			//Down Shift switch read
 80019a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
	uint8_t Switches[8] = {
 80019ac:	f88d 0006 	strb.w	r0, [sp, #6]
	HAL_GPIO_ReadPin(GPIOB, Down_Shift_Pin)			//Down Shift switch read
 80019b0:	480a      	ldr	r0, [pc, #40]	; (80019dc <Steering_Wheel_Switches+0x90>)
 80019b2:	f7ff f9df 	bl	8000d74 <HAL_GPIO_ReadPin>
			};
	uint8_t Switches_State =0 ;
	for (int i = 0; i < 8; i++) {
 80019b6:	2300      	movs	r3, #0
	uint8_t Switches[8] = {
 80019b8:	f88d 0007 	strb.w	r0, [sp, #7]
	uint8_t Switches_State =0 ;
 80019bc:	4618      	mov	r0, r3

		Switches_State = Switches_State | Switches[i];
 80019be:	f81d 2003 	ldrb.w	r2, [sp, r3]
	for (int i = 0; i < 8; i++) {
 80019c2:	3301      	adds	r3, #1
		Switches_State = Switches_State | Switches[i];
 80019c4:	4310      	orrs	r0, r2
		Switches_State = Switches_State << 1;
 80019c6:	0040      	lsls	r0, r0, #1
	for (int i = 0; i < 8; i++) {
 80019c8:	2b08      	cmp	r3, #8
		Switches_State = Switches_State << 1;
 80019ca:	b2c0      	uxtb	r0, r0
	for (int i = 0; i < 8; i++) {
 80019cc:	d1f7      	bne.n	80019be <Steering_Wheel_Switches+0x72>
	}
	return Switches_State;
}
 80019ce:	b003      	add	sp, #12
 80019d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80019d4:	40010800 	.word	0x40010800
 80019d8:	40011000 	.word	0x40011000
 80019dc:	40010c00 	.word	0x40010c00

080019e0 <MSMapOut>:

void MSMapOut(void) {
 80019e0:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(MS_Map_GPIO_Port, MS_Map_Pin) == 1) {
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <MSMapOut+0x40>)
 80019e8:	f7ff f9c4 	bl	8000d74 <HAL_GPIO_ReadPin>
 80019ec:	2801      	cmp	r0, #1
 80019ee:	4602      	mov	r2, r0
 80019f0:	d114      	bne.n	8001a1c <MSMapOut+0x3c>
		HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, 1); //Map set
 80019f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <MSMapOut+0x44>)
 80019f8:	f7ff f9c2 	bl	8000d80 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80019fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a00:	f7ff f868 	bl	8000ad4 <HAL_Delay>
		HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, 0); //Map Reset
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MSMapOut+0x44>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	f7ff f9b8 	bl	8000d80 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
	}
}
 8001a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_Delay(1500);
 8001a14:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001a18:	f7ff b85c 	b.w	8000ad4 <HAL_Delay>
 8001a1c:	bd08      	pop	{r3, pc}
 8001a1e:	bf00      	nop
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40011000 	.word	0x40011000

08001a28 <getTime>:
typedef struct Time {
	uint8_t minutes;
	uint8_t seconds;
	uint16_t milliseconds;
} Time;
Time getTime(uint32_t millis) {
 8001a28:	b513      	push	{r0, r1, r4, lr}
	uint8_t seconds;
	uint16_t milliseconds;
	milliseconds = millis % 1000;
	millis /= 1000;
	seconds = millis % 60;
	millis /= 60;
 8001a2a:	f64e 2160 	movw	r1, #60000	; 0xea60
	minutes = millis % 60;
 8001a2e:	223c      	movs	r2, #60	; 0x3c
	millis /= 60;
 8001a30:	fbb0 f1f1 	udiv	r1, r0, r1
	millis /= 1000;
 8001a34:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	minutes = millis % 60;
 8001a38:	fbb1 f3f2 	udiv	r3, r1, r2
 8001a3c:	fb02 1113 	mls	r1, r2, r3, r1
	millis /= 1000;
 8001a40:	fbb0 f3f4 	udiv	r3, r0, r4
	minutes = millis % 60;
 8001a44:	f88d 1004 	strb.w	r1, [sp, #4]
	seconds = millis % 60;
 8001a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a4c:	fb02 3211 	mls	r2, r2, r1, r3
	milliseconds = millis % 1000;
 8001a50:	fb04 0313 	mls	r3, r4, r3, r0
	Time time = { minutes, seconds, milliseconds };
	return time;
 8001a54:	2000      	movs	r0, #0
	seconds = millis % 60;
 8001a56:	f88d 2005 	strb.w	r2, [sp, #5]
	return time;
 8001a5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f362 000f 	bfi	r0, r2, #0, #16
 8001a64:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd10      	pop	{r4, pc}

08001a6c <updateLapTime>:
void updateLapTime() {
 8001a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char buffer[9];
	Time time = getTime(ticks_num);
 8001a70:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001af4 <updateLapTime+0x88>
void updateLapTime() {
 8001a74:	b086      	sub	sp, #24
	Time time = getTime(ticks_num);
 8001a76:	f8d8 0000 	ldr.w	r0, [r8]
 8001a7a:	f7ff ffd5 	bl	8001a28 <getTime>
	sprintf(buffer, "%02d:%02d.%03d", time.minutes, time.seconds,
			time.milliseconds);
	printnewtstr(90, 260, BLACK, &mono9x7, 2, buffer);
 8001a7e:	2602      	movs	r6, #2
	sprintf(buffer, "%02d:%02d.%03d", time.minutes, time.seconds,
 8001a80:	4f19      	ldr	r7, [pc, #100]	; (8001ae8 <updateLapTime+0x7c>)
 8001a82:	ac03      	add	r4, sp, #12
 8001a84:	0c03      	lsrs	r3, r0, #16
	printnewtstr(90, 260, BLACK, &mono9x7, 2, buffer);
 8001a86:	4d19      	ldr	r5, [pc, #100]	; (8001aec <updateLapTime+0x80>)
	sprintf(buffer, "%02d:%02d.%03d", time.minutes, time.seconds,
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	b2c2      	uxtb	r2, r0
 8001a8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001a90:	4639      	mov	r1, r7
 8001a92:	4620      	mov	r0, r4
 8001a94:	f002 fb90 	bl	80041b8 <siprintf>
	printnewtstr(90, 260, BLACK, &mono9x7, 2, buffer);
 8001a98:	462b      	mov	r3, r5
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001aa0:	9401      	str	r4, [sp, #4]
 8001aa2:	9600      	str	r6, [sp, #0]
 8001aa4:	205a      	movs	r0, #90	; 0x5a
 8001aa6:	f002 faef 	bl	8004088 <printnewtstr>
	ticks_num = HAL_GetTick() - ticks_offset;
 8001aaa:	f7ff f80d 	bl	8000ac8 <HAL_GetTick>
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <updateLapTime+0x84>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1ac0      	subs	r0, r0, r3
 8001ab4:	f8c8 0000 	str.w	r0, [r8]
	time = getTime(ticks_num);
 8001ab8:	f7ff ffb6 	bl	8001a28 <getTime>
	sprintf(buffer, "%02d:%02d.%03d", time.minutes, time.seconds,
 8001abc:	0c03      	lsrs	r3, r0, #16
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	b2c2      	uxtb	r2, r0
 8001ac2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001ac6:	4639      	mov	r1, r7
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f002 fb75 	bl	80041b8 <siprintf>
			time.milliseconds);
	printnewtstr(90, 260, RED, &mono9x7, 2, buffer);
 8001ace:	9401      	str	r4, [sp, #4]
 8001ad0:	9600      	str	r6, [sp, #0]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ad8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001adc:	205a      	movs	r0, #90	; 0x5a
 8001ade:	f002 fad3 	bl	8004088 <printnewtstr>
}
 8001ae2:	b006      	add	sp, #24
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae8:	0800d427 	.word	0x0800d427
 8001aec:	0800b7d4 	.word	0x0800b7d4
 8001af0:	200000a8 	.word	0x200000a8
 8001af4:	200000a4 	.word	0x200000a4

08001af8 <LCD_Test>:

void LCD_Test() {
 8001af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	for (int i = 1; i <= 6; i++) {   //to be edited
 8001afc:	2401      	movs	r4, #1
		drawGear(i, 5, BLACK);
 8001afe:	b2e0      	uxtb	r0, r4
 8001b00:	2200      	movs	r2, #0
 8001b02:	2105      	movs	r1, #5
 8001b04:	f7ff fee6 	bl	80018d4 <drawGear>
	for (int i = 1; i <= 6; i++) {   //to be edited
 8001b08:	3401      	adds	r4, #1
		HAL_Delay(500);
 8001b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0e:	f7fe ffe1 	bl	8000ad4 <HAL_Delay>
	for (int i = 1; i <= 6; i++) {   //to be edited
 8001b12:	2c07      	cmp	r4, #7
 8001b14:	d1f3      	bne.n	8001afe <LCD_Test+0x6>

		drawPointer(400, 305, 130, i, 8, RED);
		HAL_Delay(5);
		drawRPMSlider(BLACK);
		drawRPMValue();
		if (RPM <= 14000) {
 8001b16:	4c37      	ldr	r4, [pc, #220]	; (8001bf4 <LCD_Test+0xfc>)
 8001b18:	2600      	movs	r6, #0
		drawPointer(400, 305, 130, i, 8, RED);
 8001b1a:	f04f 0808 	mov.w	r8, #8
 8001b1e:	4625      	mov	r5, r4
 8001b20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b24:	b2b7      	uxth	r7, r6
 8001b26:	2282      	movs	r2, #130	; 0x82
 8001b28:	f240 1131 	movw	r1, #305	; 0x131
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b32:	463b      	mov	r3, r7
 8001b34:	f8cd 8000 	str.w	r8, [sp]
 8001b38:	f7ff fd2a 	bl	8001590 <drawPointer>
		HAL_Delay(5);
 8001b3c:	2005      	movs	r0, #5
 8001b3e:	f7fe ffc9 	bl	8000ad4 <HAL_Delay>
		drawRPMSlider(BLACK);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fe34 	bl	80017b0 <drawRPMSlider>
		drawRPMValue();
 8001b48:	f7ff fe6a 	bl	8001820 <drawRPMValue>
		if (RPM <= 14000) {
 8001b4c:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001b50:	8823      	ldrh	r3, [r4, #0]
			RPM += 100;
		} else {
			RPM -= 14000;
		}
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001b52:	f240 1131 	movw	r1, #305	; 0x131
		if (RPM <= 14000) {
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4293      	cmp	r3, r2
			RPM += 100;
 8001b5a:	8823      	ldrh	r3, [r4, #0]
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001b5c:	f04f 0282 	mov.w	r2, #130	; 0x82
			RPM -= 14000;
 8001b60:	bf8a      	itet	hi
 8001b62:	f5a3 535a 	subhi.w	r3, r3, #13952	; 0x3680
			RPM += 100;
 8001b66:	3364      	addls	r3, #100	; 0x64
			RPM -= 14000;
 8001b68:	3b30      	subhi	r3, #48	; 0x30
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	8023      	strh	r3, [r4, #0]
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8cd 8000 	str.w	r8, [sp]
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b7a:	463b      	mov	r3, r7
	for (int i = 0; i <= 110; i += 5) {
 8001b7c:	3605      	adds	r6, #5
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001b7e:	f7ff fd07 	bl	8001590 <drawPointer>
	for (int i = 0; i <= 110; i += 5) {
 8001b82:	2e73      	cmp	r6, #115	; 0x73
 8001b84:	d1cc      	bne.n	8001b20 <LCD_Test+0x28>
 8001b86:	2464      	movs	r4, #100	; 0x64
	}
	for (int i = 100; i >= 0; i -= 5) {
		drawPointer(400, 305, 130, i, 8, RED);
 8001b88:	2708      	movs	r7, #8
 8001b8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b8e:	b2a6      	uxth	r6, r4
 8001b90:	2282      	movs	r2, #130	; 0x82
 8001b92:	f240 1131 	movw	r1, #305	; 0x131
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b9c:	4633      	mov	r3, r6
 8001b9e:	9700      	str	r7, [sp, #0]
 8001ba0:	f7ff fcf6 	bl	8001590 <drawPointer>
		HAL_Delay(5);
 8001ba4:	2005      	movs	r0, #5
 8001ba6:	f7fe ff95 	bl	8000ad4 <HAL_Delay>
		drawRPMSlider(BLACK);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fe00 	bl	80017b0 <drawRPMSlider>
		drawRPMValue();
 8001bb0:	f7ff fe36 	bl	8001820 <drawRPMValue>
		if (RPM <= 14000) {
 8001bb4:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001bb8:	882b      	ldrh	r3, [r5, #0]
			RPM += 100;
		} else {
			RPM -= 14000;
		}
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001bba:	f240 1131 	movw	r1, #305	; 0x131
		if (RPM <= 14000) {
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4293      	cmp	r3, r2
			RPM += 100;
 8001bc2:	882b      	ldrh	r3, [r5, #0]
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001bc4:	f04f 0282 	mov.w	r2, #130	; 0x82
			RPM -= 14000;
 8001bc8:	bf8a      	itet	hi
 8001bca:	f5a3 535a 	subhi.w	r3, r3, #13952	; 0x3680
			RPM += 100;
 8001bce:	3364      	addls	r3, #100	; 0x64
			RPM -= 14000;
 8001bd0:	3b30      	subhi	r3, #48	; 0x30
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	802b      	strh	r3, [r5, #0]
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9700      	str	r7, [sp, #0]
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001be0:	4633      	mov	r3, r6
	for (int i = 100; i >= 0; i -= 5) {
 8001be2:	3c05      	subs	r4, #5
		drawPointer(400, 305, 130, i, 8, BLACK);
 8001be4:	f7ff fcd4 	bl	8001590 <drawPointer>
	for (int i = 100; i >= 0; i -= 5) {
 8001be8:	1d63      	adds	r3, r4, #5
 8001bea:	d1ce      	bne.n	8001b8a <LCD_Test+0x92>
	}
}
 8001bec:	b002      	add	sp, #8
 8001bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000000a 	.word	0x2000000a

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfc:	2228      	movs	r2, #40	; 0x28
 8001bfe:	2100      	movs	r1, #0
 8001c00:	a806      	add	r0, sp, #24
 8001c02:	f002 fad1 	bl	80041a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c06:	2100      	movs	r1, #0
 8001c08:	2214      	movs	r2, #20
 8001c0a:	a801      	add	r0, sp, #4
 8001c0c:	f002 facc 	bl	80041a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c14:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c18:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c22:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c26:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c28:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2a:	f7ff f8af 	bl	8000d8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c38:	4621      	mov	r1, r4
 8001c3a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c40:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c42:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c44:	f7ff fa7c 	bl	8001140 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c48:	b010      	add	sp, #64	; 0x40
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <main>:
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001c50:	f7fe ff1c 	bl	8000a8c <HAL_Init>
  SystemClock_Config();
 8001c54:	f7ff ffd0 	bl	8001bf8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	2210      	movs	r2, #16
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	a808      	add	r0, sp, #32
 8001c5e:	f002 faa3 	bl	80041a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <main+0x248>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, GPIO_PIN_RESET);
 8001c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, GPIO_PIN_RESET);
 8001c6a:	488b      	ldr	r0, [pc, #556]	; (8001e98 <main+0x24c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	f042 0210 	orr.w	r2, r2, #16
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : Map_Output_Pin */
  GPIO_InitStruct.Pin = Map_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	f002 0210 	and.w	r2, r2, #16
 8001c7a:	9202      	str	r2, [sp, #8]
 8001c7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8c:	f002 0220 	and.w	r2, r2, #32
 8001c90:	9203      	str	r2, [sp, #12]
 8001c92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8001c96:	4d81      	ldr	r5, [pc, #516]	; (8001e9c <main+0x250>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	f042 0204 	orr.w	r2, r2, #4
 8001c9c:	619a      	str	r2, [r3, #24]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	f002 0204 	and.w	r2, r2, #4
 8001ca4:	9204      	str	r2, [sp, #16]
 8001ca6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	9305      	str	r3, [sp, #20]
 8001cba:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(Map_Output_GPIO_Port, Map_Output_Pin, GPIO_PIN_RESET);
 8001cbc:	f7ff f860 	bl	8000d80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f248 012f 	movw	r1, #32815	; 0x802f
 8001cc6:	4876      	ldr	r0, [pc, #472]	; (8001ea0 <main+0x254>)
 8001cc8:	f7ff f85a 	bl	8000d80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13 
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f247 017b 	movw	r1, #28795	; 0x707b
 8001cd2:	4874      	ldr	r0, [pc, #464]	; (8001ea4 <main+0x258>)
 8001cd4:	f7ff f854 	bl	8000d80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Map_Output_Pin;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Map_Output_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	a908      	add	r1, sp, #32
 8001cde:	486e      	ldr	r0, [pc, #440]	; (8001e98 <main+0x24c>)
  GPIO_InitStruct.Pin = Map_Output_Pin;
 8001ce0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Map_Output_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f7fe ff62 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRS_Switch_Pin Active_State_Pin */
  GPIO_InitStruct.Pin = DRS_Switch_Pin|Active_State_Pin;
 8001cec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	a908      	add	r1, sp, #32
 8001cf2:	4869      	ldr	r0, [pc, #420]	; (8001e98 <main+0x24c>)
  GPIO_InitStruct.Pin = DRS_Switch_Pin|Active_State_Pin;
 8001cf4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f7fe ff59 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cfe:	f248 032f 	movw	r3, #32815	; 0x802f
                          |GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	a908      	add	r1, sp, #32
 8001d04:	4866      	ldr	r0, [pc, #408]	; (8001ea0 <main+0x254>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001d06:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f7fe ff4f 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 MS_Map_Pin Open_Wing_Pin Close_Wing_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|MS_Map_Pin|Open_Wing_Pin|Close_Wing_Pin;
 8001d12:	f641 1310 	movw	r3, #6416	; 0x1910
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	a908      	add	r1, sp, #32
 8001d18:	4861      	ldr	r0, [pc, #388]	; (8001ea0 <main+0x254>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|MS_Map_Pin|Open_Wing_Pin|Close_Wing_Pin;
 8001d1a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f7fe ff46 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13 
                           PB14 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13 
 8001d24:	f247 037b 	movw	r3, #28795	; 0x707b
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	a908      	add	r1, sp, #32
 8001d2a:	485e      	ldr	r0, [pc, #376]	; (8001ea4 <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13 
 8001d2c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f7fe ff3c 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_Shift_Pin Down_Shift_Pin DRS_Enable_Pin */
  GPIO_InitStruct.Pin = Up_Shift_Pin|Down_Shift_Pin|DRS_Enable_Pin;
 8001d38:	f640 0384 	movw	r3, #2180	; 0x884
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	a908      	add	r1, sp, #32
 8001d3e:	4859      	ldr	r0, [pc, #356]	; (8001ea4 <main+0x258>)
  GPIO_InitStruct.Pin = Up_Shift_Pin|Down_Shift_Pin|DRS_Enable_Pin;
 8001d40:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d42:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f7fe ff33 	bl	8000bb0 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	a808      	add	r0, sp, #32
 8001d50:	f002 fa2a 	bl	80041a8 <memset>
  htim1.Init.Prescaler = 72-1;
 8001d54:	2347      	movs	r3, #71	; 0x47
 8001d56:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <main+0x25c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d58:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 72-1;
 8001d5a:	e885 000c 	stmia.w	r5, {r2, r3}
  htim1.Init.Period = 0xffff-1;
 8001d5e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0xffff-1;
 8001d64:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d68:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	9406      	str	r4, [sp, #24]
 8001d6e:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d70:	f7ff face 	bl	8001310 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d78:	a908      	add	r1, sp, #32
 8001d7a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f7ff faeb 	bl	8001358 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d82:	a906      	add	r1, sp, #24
 8001d84:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d8a:	f7ff fb79 	bl	8001480 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim1);
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f7ff fa74 	bl	800127c <HAL_TIM_Base_Start>
	ID = readID();
 8001d94:	f000 fc7e 	bl	8002694 <readID>
 8001d98:	4d44      	ldr	r5, [pc, #272]	; (8001eac <main+0x260>)
 8001d9a:	8028      	strh	r0, [r5, #0]
	HAL_Delay(100);
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f7fe fe99 	bl	8000ad4 <HAL_Delay>
	tft_init(ID);
 8001da2:	8828      	ldrh	r0, [r5, #0]
 8001da4:	f001 fba4 	bl	80034f0 <tft_init>
	setRotation(1); // Landscape View
 8001da8:	4630      	mov	r0, r6
 8001daa:	f001 f9cf 	bl	800314c <setRotation>
	ShowIntroScreen(RED); // ASU RACING TEAM Intro Screen
 8001dae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001db2:	f7ff fbb3 	bl	800151c <ShowIntroScreen>
	fillScreen(BLACK); // Erase Screen
 8001db6:	4620      	mov	r0, r4
 8001db8:	f001 ff40 	bl	8003c3c <fillScreen>
	drawGear(Old_Gear_Number, 5, BLACK); // Initialize Gear  "N"
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <main+0x264>)
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	7818      	ldrb	r0, [r3, #0]
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	f7ff fd86 	bl	80018d4 <drawGear>
	LCD_ShowScale(WHITE); // Draw Scale
 8001dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dcc:	f7ff fc56 	bl	800167c <LCD_ShowScale>
	LCD_Showthrmo(GREEN); // Draw thermometer and Initialize it "Green"
 8001dd0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001dd4:	f7ff fb72 	bl	80014bc <LCD_Showthrmo>
	LCD_Showbatt(GREEN); // Draw Battery and Initialize it "Green"
 8001dd8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ddc:	f7ff fcac 	bl	8001738 <LCD_Showbatt>
	drawLap();
 8001de0:	f7ff fd4e 	bl	8001880 <drawLap>
	printnewtstr(315, 140, WHITE, &mono9x7, 1, "GEAR");
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <main+0x268>)
 8001de6:	9600      	str	r6, [sp, #0]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <main+0x26c>)
 8001df0:	218c      	movs	r1, #140	; 0x8c
 8001df2:	f240 103b 	movw	r0, #315	; 0x13b
 8001df6:	f002 f947 	bl	8004088 <printnewtstr>
	printnewtstr(105, 350, WHITE, &mono9x7, 1, "Lap Time");
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <main+0x270>)
 8001dfc:	9600      	str	r6, [sp, #0]
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <main+0x26c>)
 8001e06:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001e0a:	2069      	movs	r0, #105	; 0x69
 8001e0c:	f002 f93c 	bl	8004088 <printnewtstr>
	printnewtstr(130, 200, WHITE, &mono9x7, 1, "RPM");
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <main+0x274>)
 8001e12:	9600      	str	r6, [sp, #0]
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1a:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <main+0x26c>)
 8001e1c:	21c8      	movs	r1, #200	; 0xc8
 8001e1e:	2082      	movs	r0, #130	; 0x82
 8001e20:	f002 f932 	bl	8004088 <printnewtstr>
	drawPointer(400, 305, 130, 0, 8, RED);
 8001e24:	f44f 4578 	mov.w	r5, #63488	; 0xf800
 8001e28:	2308      	movs	r3, #8
 8001e2a:	2282      	movs	r2, #130	; 0x82
 8001e2c:	f240 1131 	movw	r1, #305	; 0x131
 8001e30:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e34:	e88d 0028 	stmia.w	sp, {r3, r5}
 8001e38:	4623      	mov	r3, r4
 8001e3a:	f7ff fba9 	bl	8001590 <drawPointer>
	drawRPMValue();
 8001e3e:	f7ff fcef 	bl	8001820 <drawRPMValue>
	drawRPMSlider(BLACK);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff fcb4 	bl	80017b0 <drawRPMSlider>
	printnewtstr(90, 292, RED, &mono9x7, 2, "00:00:00");
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <main+0x278>)
	itoa(LapNum, lap, 10);
 8001e4a:	4e1f      	ldr	r6, [pc, #124]	; (8001ec8 <main+0x27c>)
 8001e4c:	4c1f      	ldr	r4, [pc, #124]	; (8001ecc <main+0x280>)
	printnewtstr(90, 292, RED, &mono9x7, 2, "00:00:00");
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	462a      	mov	r2, r5
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <main+0x26c>)
 8001e54:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001e58:	205a      	movs	r0, #90	; 0x5a
 8001e5a:	9700      	str	r7, [sp, #0]
 8001e5c:	f002 f914 	bl	8004088 <printnewtstr>
	itoa(LapNum, lap, 10);
 8001e60:	220a      	movs	r2, #10
 8001e62:	4631      	mov	r1, r6
 8001e64:	7820      	ldrb	r0, [r4, #0]
 8001e66:	f002 f99d 	bl	80041a4 <itoa>
	printnewtstr(50 + 55, 10, RED, &mono12x7bold, 3, lap);
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	9601      	str	r6, [sp, #4]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	462a      	mov	r2, r5
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <main+0x284>)
 8001e74:	210a      	movs	r1, #10
 8001e76:	2069      	movs	r0, #105	; 0x69
 8001e78:	f002 f906 	bl	8004088 <printnewtstr>
		if (LapNum > 0)
 8001e7c:	7823      	ldrb	r3, [r4, #0]
 8001e7e:	b10b      	cbz	r3, 8001e84 <main+0x238>
			updateLapTime();
 8001e80:	f7ff fdf4 	bl	8001a6c <updateLapTime>
		LCD_Test();
 8001e84:	f7ff fe38 	bl	8001af8 <LCD_Test>
		Steering_Wheel_Switches();
 8001e88:	f7ff fd60 	bl	800194c <Steering_Wheel_Switches>
		MSMapOut();
 8001e8c:	f7ff fda8 	bl	80019e0 <MSMapOut>
	while (1) {
 8001e90:	e7f4      	b.n	8001e7c <main+0x230>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	200000cc 	.word	0x200000cc
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	2000009e 	.word	0x2000009e
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	0800d40c 	.word	0x0800d40c
 8001eb8:	0800b7d4 	.word	0x0800b7d4
 8001ebc:	0800d411 	.word	0x0800d411
 8001ec0:	0800d41a 	.word	0x0800d41a
 8001ec4:	0800d41e 	.word	0x0800d41e
 8001ec8:	200000c8 	.word	0x200000c8
 8001ecc:	200000a0 	.word	0x200000a0
 8001ed0:	0800b7bc 	.word	0x0800b7bc

08001ed4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_MspInit+0x3c>)
{
 8001ed6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	f002 0201 	and.w	r2, r2, #1
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef0:	61da      	str	r2, [r3, #28]
 8001ef2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001efe:	6853      	ldr	r3, [r2, #4]
 8001f00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000

08001f18 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_TIM_Base_MspInit+0x24>)
{
 8001f1c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10a      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f38:	b002      	add	sp, #8
 8001f3a:	4770      	bx	lr
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <NMI_Handler>:
 8001f40:	4770      	bx	lr

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler>

08001f4a <SVC_Handler>:
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f50:	f7fe bdae 	b.w	8000ab0 <HAL_IncTick>

08001f54 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001f54:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <_sbrk+0x2c>)
{
 8001f58:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	b909      	cbnz	r1, 8001f62 <_sbrk+0xe>
		heap_end = &end;
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <_sbrk+0x30>)
 8001f60:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001f62:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001f64:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001f66:	4402      	add	r2, r0
 8001f68:	428a      	cmp	r2, r1
 8001f6a:	d906      	bls.n	8001f7a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001f6c:	f002 f8d8 	bl	8004120 <__errno>
 8001f70:	230c      	movs	r3, #12
 8001f72:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001f7a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001f7c:	bd08      	pop	{r3, pc}
 8001f7e:	bf00      	nop
 8001f80:	200000ac 	.word	0x200000ac
 8001f84:	2000012c 	.word	0x2000012c

08001f88 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <SystemInit+0x40>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <SystemInit+0x44>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fb6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <SystemInit+0x48>)
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	f8ff0000 	.word	0xf8ff0000
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <PIN_LOW>:
#include "stdlib.h"

/********************************************** NO CHNAGES AFTER THIS ************************************************/

void PIN_LOW(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f7fe bed3 	b.w	8000d80 <HAL_GPIO_WritePin>

08001fda <PIN_HIGH>:
}

void PIN_HIGH(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f7fe bed0 	b.w	8000d80 <HAL_GPIO_WritePin>

08001fe0 <writecmddata>:
	write8(r);
	write8(g);
	write8(b);
}

static void writecmddata(uint16_t cmd, uint16_t dat) {
 8001fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	4607      	mov	r7, r0
	CS_ACTIVE;
	WriteCmd(cmd);
 8001fe6:	f44f 08f6 	mov.w	r8, #8060928	; 0x7b0000
static void writecmddata(uint16_t cmd, uint16_t dat) {
 8001fea:	460e      	mov	r6, r1
	CS_ACTIVE;
 8001fec:	4c42      	ldr	r4, [pc, #264]	; (80020f8 <writecmddata+0x118>)
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff ffef 	bl	8001fd4 <PIN_LOW>
	WriteCmd(cmd);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	f7ff ffeb 	bl	8001fd4 <PIN_LOW>
 8001ffe:	0a3b      	lsrs	r3, r7, #8
 8002000:	035a      	lsls	r2, r3, #13
 8002002:	1099      	asrs	r1, r3, #2
 8002004:	4d3d      	ldr	r5, [pc, #244]	; (80020fc <writecmddata+0x11c>)
 8002006:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8002100 <writecmddata+0x120>
 800200a:	f001 0120 	and.w	r1, r1, #32
 800200e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002012:	430a      	orrs	r2, r1
 8002014:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002018:	f8c4 9010 	str.w	r9, [r4, #16]
 800201c:	4620      	mov	r0, r4
 800201e:	f8c5 8010 	str.w	r8, [r5, #16]
 8002022:	2108      	movs	r1, #8
 8002024:	6122      	str	r2, [r4, #16]
 8002026:	612b      	str	r3, [r5, #16]
 8002028:	f7ff ffd4 	bl	8001fd4 <PIN_LOW>
 800202c:	4620      	mov	r0, r4
 800202e:	2108      	movs	r1, #8
 8002030:	f7ff ffd3 	bl	8001fda <PIN_HIGH>
 8002034:	b2ff      	uxtb	r7, r7
 8002036:	4620      	mov	r0, r4
 8002038:	2108      	movs	r1, #8
 800203a:	f7ff ffce 	bl	8001fda <PIN_HIGH>
 800203e:	037b      	lsls	r3, r7, #13
 8002040:	10ba      	asrs	r2, r7, #2
 8002042:	f002 0220 	and.w	r2, r2, #32
 8002046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204a:	4313      	orrs	r3, r2
 800204c:	f007 077b 	and.w	r7, r7, #123	; 0x7b
 8002050:	f8c4 9010 	str.w	r9, [r4, #16]
 8002054:	4620      	mov	r0, r4
 8002056:	f8c5 8010 	str.w	r8, [r5, #16]
 800205a:	2108      	movs	r1, #8
 800205c:	6123      	str	r3, [r4, #16]
 800205e:	612f      	str	r7, [r5, #16]
 8002060:	f7ff ffb8 	bl	8001fd4 <PIN_LOW>
 8002064:	4620      	mov	r0, r4
 8002066:	2108      	movs	r1, #8
 8002068:	f7ff ffb7 	bl	8001fda <PIN_HIGH>
 800206c:	4620      	mov	r0, r4
 800206e:	2108      	movs	r1, #8
 8002070:	f7ff ffb3 	bl	8001fda <PIN_HIGH>
 8002074:	4620      	mov	r0, r4
 8002076:	2104      	movs	r1, #4
 8002078:	f7ff ffaf 	bl	8001fda <PIN_HIGH>
	WriteData(dat);
 800207c:	0a33      	lsrs	r3, r6, #8
 800207e:	035a      	lsls	r2, r3, #13
 8002080:	1099      	asrs	r1, r3, #2
 8002082:	f001 0120 	and.w	r1, r1, #32
 8002086:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800208a:	430a      	orrs	r2, r1
 800208c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002090:	f8c4 9010 	str.w	r9, [r4, #16]
 8002094:	4620      	mov	r0, r4
 8002096:	f8c5 8010 	str.w	r8, [r5, #16]
 800209a:	2108      	movs	r1, #8
 800209c:	6122      	str	r2, [r4, #16]
 800209e:	612b      	str	r3, [r5, #16]
 80020a0:	f7ff ff98 	bl	8001fd4 <PIN_LOW>
 80020a4:	4620      	mov	r0, r4
 80020a6:	2108      	movs	r1, #8
 80020a8:	f7ff ff97 	bl	8001fda <PIN_HIGH>
 80020ac:	b2f6      	uxtb	r6, r6
 80020ae:	4620      	mov	r0, r4
 80020b0:	2108      	movs	r1, #8
 80020b2:	f7ff ff92 	bl	8001fda <PIN_HIGH>
 80020b6:	0373      	lsls	r3, r6, #13
 80020b8:	10b2      	asrs	r2, r6, #2
 80020ba:	f002 0220 	and.w	r2, r2, #32
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f006 067b 	and.w	r6, r6, #123	; 0x7b
 80020c8:	f8c4 9010 	str.w	r9, [r4, #16]
 80020cc:	4620      	mov	r0, r4
 80020ce:	f8c5 8010 	str.w	r8, [r5, #16]
 80020d2:	2108      	movs	r1, #8
 80020d4:	6123      	str	r3, [r4, #16]
 80020d6:	612e      	str	r6, [r5, #16]
 80020d8:	f7ff ff7c 	bl	8001fd4 <PIN_LOW>
 80020dc:	4620      	mov	r0, r4
 80020de:	2108      	movs	r1, #8
 80020e0:	f7ff ff7b 	bl	8001fda <PIN_HIGH>
 80020e4:	4620      	mov	r0, r4
 80020e6:	2108      	movs	r1, #8
 80020e8:	f7ff ff77 	bl	8001fda <PIN_HIGH>
	CS_IDLE;
 80020ec:	4620      	mov	r0, r4
}
 80020ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CS_IDLE;
 80020f2:	2102      	movs	r1, #2
 80020f4:	f7ff bf71 	b.w	8001fda <PIN_HIGH>
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00
 8002100:	80200000 	.word	0x80200000

08002104 <init_table16>:
		}
		size -= len + 2;
	}
}

static void init_table16(const void *table, int16_t size) {
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	460c      	mov	r4, r1
	uint16_t *p = (uint16_t *) table;
	while (size > 0) {
		uint16_t cmd = pgm_read_word(p++);
		uint16_t d = pgm_read_word(p++);
		if (cmd == TFTLCD_DELAY)
 8002108:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800210c:	1d05      	adds	r5, r0, #4
	while (size > 0) {
 800210e:	2c00      	cmp	r4, #0
 8002110:	dc00      	bgt.n	8002114 <init_table16+0x10>
		else {
			writecmddata(cmd, d);                      //static function
		}
		size -= 2 * sizeof(int16_t);
	}
}
 8002112:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t cmd = pgm_read_word(p++);
 8002114:	f835 0c04 	ldrh.w	r0, [r5, #-4]
		uint16_t d = pgm_read_word(p++);
 8002118:	f835 1c02 	ldrh.w	r1, [r5, #-2]
		if (cmd == TFTLCD_DELAY)
 800211c:	42b0      	cmp	r0, r6
 800211e:	d106      	bne.n	800212e <init_table16+0x2a>
			HAL_Delay(d);
 8002120:	4608      	mov	r0, r1
 8002122:	f7fe fcd7 	bl	8000ad4 <HAL_Delay>
 8002126:	3c04      	subs	r4, #4
 8002128:	b224      	sxth	r4, r4
 800212a:	3504      	adds	r5, #4
 800212c:	e7ef      	b.n	800210e <init_table16+0xa>
			writecmddata(cmd, d);                      //static function
 800212e:	f7ff ff57 	bl	8001fe0 <writecmddata>
 8002132:	e7f8      	b.n	8002126 <init_table16+0x22>

08002134 <WriteCmdParamN>:
static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block) {
 8002134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002138:	4606      	mov	r6, r0
	WriteCmd(cmd);
 800213a:	f44f 09f6 	mov.w	r9, #8060928	; 0x7b0000
static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block) {
 800213e:	4617      	mov	r7, r2
	CS_ACTIVE;
 8002140:	4c3b      	ldr	r4, [pc, #236]	; (8002230 <WriteCmdParamN+0xfc>)
static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block) {
 8002142:	4688      	mov	r8, r1
	CS_ACTIVE;
 8002144:	4620      	mov	r0, r4
 8002146:	2102      	movs	r1, #2
 8002148:	f7ff ff44 	bl	8001fd4 <PIN_LOW>
	WriteCmd(cmd);
 800214c:	2104      	movs	r1, #4
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff40 	bl	8001fd4 <PIN_LOW>
 8002154:	0a33      	lsrs	r3, r6, #8
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	1099      	asrs	r1, r3, #2
 800215a:	4d36      	ldr	r5, [pc, #216]	; (8002234 <WriteCmdParamN+0x100>)
 800215c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002238 <WriteCmdParamN+0x104>
 8002160:	f001 0120 	and.w	r1, r1, #32
 8002164:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002168:	430a      	orrs	r2, r1
 800216a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800216e:	f8c4 a010 	str.w	sl, [r4, #16]
 8002172:	2108      	movs	r1, #8
 8002174:	f8c5 9010 	str.w	r9, [r5, #16]
 8002178:	4620      	mov	r0, r4
 800217a:	6122      	str	r2, [r4, #16]
 800217c:	612b      	str	r3, [r5, #16]
 800217e:	f7ff ff29 	bl	8001fd4 <PIN_LOW>
 8002182:	2108      	movs	r1, #8
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ff28 	bl	8001fda <PIN_HIGH>
 800218a:	b2f6      	uxtb	r6, r6
 800218c:	2108      	movs	r1, #8
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff ff23 	bl	8001fda <PIN_HIGH>
 8002194:	0373      	lsls	r3, r6, #13
 8002196:	10b2      	asrs	r2, r6, #2
 8002198:	f002 0220 	and.w	r2, r2, #32
 800219c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f006 067b 	and.w	r6, r6, #123	; 0x7b
 80021a6:	f8c4 a010 	str.w	sl, [r4, #16]
 80021aa:	2108      	movs	r1, #8
 80021ac:	f8c5 9010 	str.w	r9, [r5, #16]
 80021b0:	4620      	mov	r0, r4
 80021b2:	6123      	str	r3, [r4, #16]
 80021b4:	612e      	str	r6, [r5, #16]
 80021b6:	f7ff ff0d 	bl	8001fd4 <PIN_LOW>
 80021ba:	2108      	movs	r1, #8
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff0c 	bl	8001fda <PIN_HIGH>
 80021c2:	2108      	movs	r1, #8
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff ff08 	bl	8001fda <PIN_HIGH>
 80021ca:	2104      	movs	r1, #4
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff04 	bl	8001fda <PIN_HIGH>
	while (N-- > 0) {
 80021d2:	46b9      	mov	r9, r7
		write8(u8);
 80021d4:	4626      	mov	r6, r4
 80021d6:	eb07 0308 	add.w	r3, r7, r8
 80021da:	eba3 0309 	sub.w	r3, r3, r9
	while (N-- > 0) {
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dc05      	bgt.n	80021f0 <WriteCmdParamN+0xbc>
	CS_IDLE;
 80021e4:	2102      	movs	r1, #2
}
 80021e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	CS_IDLE;
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <WriteCmdParamN+0xfc>)
 80021ec:	f7ff bef5 	b.w	8001fda <PIN_HIGH>
		write8(u8);
 80021f0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
		uint8_t u8 = *block++;
 80021f4:	f819 3b01 	ldrb.w	r3, [r9], #1
		write8(u8);
 80021f8:	f8c4 a010 	str.w	sl, [r4, #16]
 80021fc:	1099      	asrs	r1, r3, #2
 80021fe:	612a      	str	r2, [r5, #16]
 8002200:	035a      	lsls	r2, r3, #13
 8002202:	f001 0120 	and.w	r1, r1, #32
 8002206:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800220a:	430a      	orrs	r2, r1
 800220c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002210:	6122      	str	r2, [r4, #16]
 8002212:	4630      	mov	r0, r6
 8002214:	612b      	str	r3, [r5, #16]
 8002216:	2108      	movs	r1, #8
 8002218:	f7ff fedc 	bl	8001fd4 <PIN_LOW>
 800221c:	4630      	mov	r0, r6
 800221e:	2108      	movs	r1, #8
 8002220:	f7ff fedb 	bl	8001fda <PIN_HIGH>
 8002224:	2108      	movs	r1, #8
 8002226:	4630      	mov	r0, r6
 8002228:	f7ff fed7 	bl	8001fda <PIN_HIGH>
 800222c:	e7d3      	b.n	80021d6 <WriteCmdParamN+0xa2>
 800222e:	bf00      	nop
 8002230:	40010800 	.word	0x40010800
 8002234:	40010c00 	.word	0x40010c00
 8002238:	80200000 	.word	0x80200000

0800223c <init_table>:
static void init_table(const void *table, int16_t size) {
 800223c:	b570      	push	{r4, r5, r6, lr}
	uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 800223e:	4603      	mov	r3, r0
static void init_table(const void *table, int16_t size) {
 8002240:	460c      	mov	r4, r1
 8002242:	b086      	sub	sp, #24
	while (size > 0) {
 8002244:	2c00      	cmp	r4, #0
 8002246:	dc01      	bgt.n	800224c <init_table+0x10>
}
 8002248:	b006      	add	sp, #24
 800224a:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t cmd = pgm_read_byte(p++);
 800224c:	461e      	mov	r6, r3
 800224e:	f816 0b02 	ldrb.w	r0, [r6], #2
		uint8_t len = pgm_read_byte(p++);
 8002252:	785d      	ldrb	r5, [r3, #1]
		if (cmd == TFTLCD_DELAY8) {
 8002254:	287f      	cmp	r0, #127	; 0x7f
 8002256:	d00c      	beq.n	8002272 <init_table+0x36>
 8002258:	4632      	mov	r2, r6
 800225a:	f10d 31ff 	add.w	r1, sp, #4294967295
			for (uint8_t i = 0; i < len; i++)
 800225e:	1b93      	subs	r3, r2, r6
 8002260:	b2db      	uxtb	r3, r3
 8002262:	429d      	cmp	r5, r3
 8002264:	d80e      	bhi.n	8002284 <init_table+0x48>
			WriteCmdParamN(cmd, len, dat);
 8002266:	466a      	mov	r2, sp
 8002268:	b269      	sxtb	r1, r5
 800226a:	442e      	add	r6, r5
 800226c:	f7ff ff62 	bl	8002134 <WriteCmdParamN>
 8002270:	e003      	b.n	800227a <init_table+0x3e>
			HAL_Delay(len);
 8002272:	4628      	mov	r0, r5
 8002274:	f7fe fc2e 	bl	8000ad4 <HAL_Delay>
			len = 0;
 8002278:	2500      	movs	r5, #0
		size -= len + 2;
 800227a:	3c02      	subs	r4, #2
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	b224      	sxth	r4, r4
 8002280:	4633      	mov	r3, r6
 8002282:	e7df      	b.n	8002244 <init_table+0x8>
				dat[i] = pgm_read_byte(p++);
 8002284:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002288:	f801 3f01 	strb.w	r3, [r1, #1]!
 800228c:	e7e7      	b.n	800225e <init_table+0x22>

0800228e <PIN_INPUT>:
void PIN_INPUT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800228e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002294:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002296:	9100      	str	r1, [sp, #0]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002298:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229a:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800229c:	f7fe fc88 	bl	8000bb0 <HAL_GPIO_Init>
}
 80022a0:	b005      	add	sp, #20
 80022a2:	f85d fb04 	ldr.w	pc, [sp], #4

080022a6 <PIN_OUTPUT>:
void PIN_OUTPUT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80022a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b0:	2303      	movs	r3, #3
	GPIO_InitStruct.Pin = GPIO_Pin;
 80022b2:	9100      	str	r1, [sp, #0]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022b4:	4669      	mov	r1, sp
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80022b8:	f7fe fc7a 	bl	8000bb0 <HAL_GPIO_Init>
}
 80022bc:	b005      	add	sp, #20
 80022be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080022c4 <width>:
}
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <width+0x8>)
 80022c6:	8818      	ldrh	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000012 	.word	0x20000012

080022d0 <height>:
}
 80022d0:	4b01      	ldr	r3, [pc, #4]	; (80022d8 <height+0x8>)
 80022d2:	8818      	ldrh	r0, [r3, #0]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000010 	.word	0x20000010

080022dc <color565>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <color565+0x14>)
 80022de:	00c9      	lsls	r1, r1, #3
 80022e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80022e4:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80022e8:	ea03 2000 	and.w	r0, r3, r0, lsl #8
}
 80022ec:	4308      	orrs	r0, r1
 80022ee:	4770      	bx	lr
 80022f0:	fffff800 	.word	0xfffff800

080022f4 <setReadDir>:
void setReadDir(void) {
 80022f4:	b538      	push	{r3, r4, r5, lr}
	PIN_INPUT(D0_PORT, D0_PIN);
 80022f6:	4c12      	ldr	r4, [pc, #72]	; (8002340 <setReadDir+0x4c>)
	PIN_INPUT(D2_PORT, D2_PIN);
 80022f8:	4d12      	ldr	r5, [pc, #72]	; (8002344 <setReadDir+0x50>)
	PIN_INPUT(D0_PORT, D0_PIN);
 80022fa:	4620      	mov	r0, r4
 80022fc:	2101      	movs	r1, #1
 80022fe:	f7ff ffc6 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8002302:	4620      	mov	r0, r4
 8002304:	2102      	movs	r1, #2
 8002306:	f7ff ffc2 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800230a:	4628      	mov	r0, r5
 800230c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002310:	f7ff ffbd 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8002314:	4620      	mov	r0, r4
 8002316:	2108      	movs	r1, #8
 8002318:	f7ff ffb9 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800231c:	4620      	mov	r0, r4
 800231e:	2110      	movs	r1, #16
 8002320:	f7ff ffb5 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8002324:	4620      	mov	r0, r4
 8002326:	2120      	movs	r1, #32
 8002328:	f7ff ffb1 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800232c:	4620      	mov	r0, r4
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	f7ff ffad 	bl	800228e <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8002334:	4628      	mov	r0, r5
}
 8002336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIN_INPUT(D7_PORT, D7_PIN);
 800233a:	2120      	movs	r1, #32
 800233c:	f7ff bfa7 	b.w	800228e <PIN_INPUT>
 8002340:	40010c00 	.word	0x40010c00
 8002344:	40010800 	.word	0x40010800

08002348 <setWriteDir>:
void setWriteDir(void) {
 8002348:	b538      	push	{r3, r4, r5, lr}
	PIN_OUTPUT(D0_PORT, D0_PIN);
 800234a:	4c12      	ldr	r4, [pc, #72]	; (8002394 <setWriteDir+0x4c>)
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800234c:	4d12      	ldr	r5, [pc, #72]	; (8002398 <setWriteDir+0x50>)
	PIN_OUTPUT(D0_PORT, D0_PIN);
 800234e:	4620      	mov	r0, r4
 8002350:	2101      	movs	r1, #1
 8002352:	f7ff ffa8 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8002356:	4620      	mov	r0, r4
 8002358:	2102      	movs	r1, #2
 800235a:	f7ff ffa4 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 800235e:	4628      	mov	r0, r5
 8002360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002364:	f7ff ff9f 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8002368:	4620      	mov	r0, r4
 800236a:	2108      	movs	r1, #8
 800236c:	f7ff ff9b 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8002370:	4620      	mov	r0, r4
 8002372:	2110      	movs	r1, #16
 8002374:	f7ff ff97 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8002378:	4620      	mov	r0, r4
 800237a:	2120      	movs	r1, #32
 800237c:	f7ff ff93 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8002380:	4620      	mov	r0, r4
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	f7ff ff8f 	bl	80022a6 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8002388:	4628      	mov	r0, r5
}
 800238a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIN_OUTPUT(D7_PORT, D7_PIN);
 800238e:	2120      	movs	r1, #32
 8002390:	f7ff bf89 	b.w	80022a6 <PIN_OUTPUT>
 8002394:	40010c00 	.word	0x40010c00
 8002398:	40010800 	.word	0x40010800

0800239c <reset>:

void reset(void) {
 800239c:	b538      	push	{r3, r4, r5, lr}
	done_reset = 1;
 800239e:	2501      	movs	r5, #1
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <reset+0x84>)
	setWriteDir();
	CTL_INIT()
 80023a2:	4c20      	ldr	r4, [pc, #128]	; (8002424 <reset+0x88>)
	done_reset = 1;
 80023a4:	701d      	strb	r5, [r3, #0]
	setWriteDir();
 80023a6:	f7ff ffcf 	bl	8002348 <setWriteDir>
	CTL_INIT()
 80023aa:	4620      	mov	r0, r4
 80023ac:	2110      	movs	r1, #16
 80023ae:	f7ff ff7a 	bl	80022a6 <PIN_OUTPUT>
 80023b2:	4620      	mov	r0, r4
 80023b4:	2108      	movs	r1, #8
 80023b6:	f7ff ff76 	bl	80022a6 <PIN_OUTPUT>
 80023ba:	4620      	mov	r0, r4
 80023bc:	2104      	movs	r1, #4
 80023be:	f7ff ff72 	bl	80022a6 <PIN_OUTPUT>
 80023c2:	4620      	mov	r0, r4
 80023c4:	2102      	movs	r1, #2
 80023c6:	f7ff ff6e 	bl	80022a6 <PIN_OUTPUT>
 80023ca:	4629      	mov	r1, r5
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff ff6a 	bl	80022a6 <PIN_OUTPUT>
	;
	CS_IDLE;
 80023d2:	4620      	mov	r0, r4
 80023d4:	2102      	movs	r1, #2
 80023d6:	f7ff fe00 	bl	8001fda <PIN_HIGH>
	RD_IDLE;
 80023da:	4620      	mov	r0, r4
 80023dc:	2110      	movs	r1, #16
 80023de:	f7ff fdfc 	bl	8001fda <PIN_HIGH>
	WR_IDLE;
 80023e2:	4620      	mov	r0, r4
 80023e4:	2108      	movs	r1, #8
 80023e6:	f7ff fdf8 	bl	8001fda <PIN_HIGH>
	RESET_IDLE;
 80023ea:	4629      	mov	r1, r5
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff fdf4 	bl	8001fda <PIN_HIGH>
	HAL_Delay(50);
 80023f2:	2032      	movs	r0, #50	; 0x32
 80023f4:	f7fe fb6e 	bl	8000ad4 <HAL_Delay>
	RESET_ACTIVE;
 80023f8:	4629      	mov	r1, r5
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff fdea 	bl	8001fd4 <PIN_LOW>
	HAL_Delay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f7fe fb67 	bl	8000ad4 <HAL_Delay>
	RESET_IDLE;
 8002406:	4629      	mov	r1, r5
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff fde6 	bl	8001fda <PIN_HIGH>
	HAL_Delay(100);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f7fe fb60 	bl	8000ad4 <HAL_Delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
}
 8002414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writecmddata(cmd, dat);
 8002418:	2100      	movs	r1, #0
 800241a:	20b0      	movs	r0, #176	; 0xb0
 800241c:	f7ff bde0 	b.w	8001fe0 <writecmddata>
 8002420:	200000b4 	.word	0x200000b4
 8002424:	40010800 	.word	0x40010800

08002428 <readReg>:
	READ_8(ret);
	READ_8(lo);
	return (ret << 8) | lo;
}

uint16_t readReg(uint16_t reg, int8_t index) {
 8002428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t ret;
	uint8_t lo;
	if (!done_reset)
 800242c:	4b83      	ldr	r3, [pc, #524]	; (800263c <readReg+0x214>)
uint16_t readReg(uint16_t reg, int8_t index) {
 800242e:	b08d      	sub	sp, #52	; 0x34
	if (!done_reset)
 8002430:	781b      	ldrb	r3, [r3, #0]
uint16_t readReg(uint16_t reg, int8_t index) {
 8002432:	4606      	mov	r6, r0
 8002434:	4688      	mov	r8, r1
	if (!done_reset)
 8002436:	b90b      	cbnz	r3, 800243c <readReg+0x14>
		reset();
 8002438:	f7ff ffb0 	bl	800239c <reset>
	CS_ACTIVE;
	WriteCmd(reg);
 800243c:	f44f 07f6 	mov.w	r7, #8060928	; 0x7b0000
	CS_ACTIVE;
 8002440:	4d7f      	ldr	r5, [pc, #508]	; (8002640 <readReg+0x218>)
 8002442:	2102      	movs	r1, #2
 8002444:	4628      	mov	r0, r5
 8002446:	f7ff fdc5 	bl	8001fd4 <PIN_LOW>
	WriteCmd(reg);
 800244a:	2104      	movs	r1, #4
 800244c:	4628      	mov	r0, r5
 800244e:	f7ff fdc1 	bl	8001fd4 <PIN_LOW>
 8002452:	0a33      	lsrs	r3, r6, #8
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	1099      	asrs	r1, r3, #2
 8002458:	4c7a      	ldr	r4, [pc, #488]	; (8002644 <readReg+0x21c>)
 800245a:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002648 <readReg+0x220>
 800245e:	f001 0120 	and.w	r1, r1, #32
 8002462:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002466:	430a      	orrs	r2, r1
 8002468:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800246c:	f8c5 9010 	str.w	r9, [r5, #16]
 8002470:	2108      	movs	r1, #8
 8002472:	6127      	str	r7, [r4, #16]
 8002474:	4628      	mov	r0, r5
 8002476:	612a      	str	r2, [r5, #16]
 8002478:	6123      	str	r3, [r4, #16]
 800247a:	f7ff fdab 	bl	8001fd4 <PIN_LOW>
 800247e:	2108      	movs	r1, #8
 8002480:	4628      	mov	r0, r5
 8002482:	f7ff fdaa 	bl	8001fda <PIN_HIGH>
 8002486:	b2f6      	uxtb	r6, r6
 8002488:	2108      	movs	r1, #8
 800248a:	4628      	mov	r0, r5
 800248c:	f7ff fda5 	bl	8001fda <PIN_HIGH>
 8002490:	0373      	lsls	r3, r6, #13
 8002492:	10b2      	asrs	r2, r6, #2
 8002494:	f002 0220 	and.w	r2, r2, #32
 8002498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800249c:	4313      	orrs	r3, r2
 800249e:	f006 067b 	and.w	r6, r6, #123	; 0x7b
 80024a2:	f8c5 9010 	str.w	r9, [r5, #16]
 80024a6:	2108      	movs	r1, #8
 80024a8:	6127      	str	r7, [r4, #16]
 80024aa:	4628      	mov	r0, r5
 80024ac:	612b      	str	r3, [r5, #16]
 80024ae:	6126      	str	r6, [r4, #16]
 80024b0:	f7ff fd90 	bl	8001fd4 <PIN_LOW>
 80024b4:	2108      	movs	r1, #8
 80024b6:	4628      	mov	r0, r5
 80024b8:	f7ff fd8f 	bl	8001fda <PIN_HIGH>
 80024bc:	2108      	movs	r1, #8
 80024be:	4628      	mov	r0, r5
 80024c0:	f7ff fd8b 	bl	8001fda <PIN_HIGH>
 80024c4:	2104      	movs	r1, #4
 80024c6:	4628      	mov	r0, r5
 80024c8:	f7ff fd87 	bl	8001fda <PIN_HIGH>
	setReadDir();
 80024cc:	f7ff ff12 	bl	80022f4 <setReadDir>
	HAL_Delay(1);    //1us should be adequate
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7fe faff 	bl	8000ad4 <HAL_Delay>
	READ_8(ret);
 80024d6:	462e      	mov	r6, r5
 80024d8:	2110      	movs	r1, #16
 80024da:	4630      	mov	r0, r6
 80024dc:	f7ff fd7d 	bl	8001fda <PIN_HIGH>
 80024e0:	2110      	movs	r1, #16
 80024e2:	4630      	mov	r0, r6
 80024e4:	f7ff fd76 	bl	8001fd4 <PIN_LOW>
 80024e8:	2110      	movs	r1, #16
 80024ea:	4630      	mov	r0, r6
 80024ec:	f7ff fd72 	bl	8001fd4 <PIN_LOW>
 80024f0:	2110      	movs	r1, #16
 80024f2:	4630      	mov	r0, r6
 80024f4:	f7ff fd6e 	bl	8001fd4 <PIN_LOW>
 80024f8:	2110      	movs	r1, #16
 80024fa:	4630      	mov	r0, r6
 80024fc:	f7ff fd6a 	bl	8001fd4 <PIN_LOW>
 8002500:	68a3      	ldr	r3, [r4, #8]
 8002502:	2110      	movs	r1, #16
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	4630      	mov	r0, r6
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	68ab      	ldr	r3, [r5, #8]
 800250e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	fa4f f888 	sxtb.w	r8, r8
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	68a3      	ldr	r3, [r4, #8]
 800251e:	9304      	str	r3, [sp, #16]
 8002520:	68a3      	ldr	r3, [r4, #8]
 8002522:	9305      	str	r3, [sp, #20]
 8002524:	68a3      	ldr	r3, [r4, #8]
 8002526:	9306      	str	r3, [sp, #24]
 8002528:	68ab      	ldr	r3, [r5, #8]
 800252a:	9307      	str	r3, [sp, #28]
 800252c:	f7ff fd55 	bl	8001fda <PIN_HIGH>
 8002530:	2110      	movs	r1, #16
 8002532:	4630      	mov	r0, r6
 8002534:	f7ff fd51 	bl	8001fda <PIN_HIGH>
	READ_8(lo);
 8002538:	2110      	movs	r1, #16
 800253a:	4630      	mov	r0, r6
 800253c:	f7ff fd4d 	bl	8001fda <PIN_HIGH>
 8002540:	2110      	movs	r1, #16
 8002542:	4630      	mov	r0, r6
 8002544:	f7ff fd46 	bl	8001fd4 <PIN_LOW>
 8002548:	2110      	movs	r1, #16
 800254a:	4630      	mov	r0, r6
 800254c:	f7ff fd42 	bl	8001fd4 <PIN_LOW>
 8002550:	2110      	movs	r1, #16
 8002552:	4630      	mov	r0, r6
 8002554:	f7ff fd3e 	bl	8001fd4 <PIN_LOW>
 8002558:	2110      	movs	r1, #16
 800255a:	4630      	mov	r0, r6
 800255c:	f7ff fd3a 	bl	8001fd4 <PIN_LOW>
 8002560:	68a3      	ldr	r3, [r4, #8]
 8002562:	2110      	movs	r1, #16
 8002564:	9308      	str	r3, [sp, #32]
 8002566:	68a3      	ldr	r3, [r4, #8]
 8002568:	4630      	mov	r0, r6
 800256a:	9309      	str	r3, [sp, #36]	; 0x24
 800256c:	68ab      	ldr	r3, [r5, #8]
 800256e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8002572:	930a      	str	r3, [sp, #40]	; 0x28
 8002574:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8002578:	68a3      	ldr	r3, [r4, #8]
 800257a:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800257e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002580:	68af      	ldr	r7, [r5, #8]
 8002582:	f7ff fd2a 	bl	8001fda <PIN_HIGH>
 8002586:	2110      	movs	r1, #16
 8002588:	4630      	mov	r0, r6
 800258a:	f7ff fd26 	bl	8001fda <PIN_HIGH>
	//    READ_16(ret);
	do {
		ret = read16bits();
	} while (--index >= 0);  //need to test with SSD1963
 800258e:	f1b8 0f00 	cmp.w	r8, #0
 8002592:	daa1      	bge.n	80024d8 <readReg+0xb0>
	RD_IDLE;
 8002594:	2110      	movs	r1, #16
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <readReg+0x218>)
 8002598:	f7ff fd1f 	bl	8001fda <PIN_HIGH>
	CS_IDLE;
 800259c:	2102      	movs	r1, #2
 800259e:	4828      	ldr	r0, [pc, #160]	; (8002640 <readReg+0x218>)
 80025a0:	f7ff fd1b 	bl	8001fda <PIN_HIGH>
	setWriteDir();
 80025a4:	f7ff fed0 	bl	8002348 <setWriteDir>
	READ_8(ret);
 80025a8:	9b05      	ldr	r3, [sp, #20]
	READ_8(lo);
 80025aa:	f00b 0b40 	and.w	fp, fp, #64	; 0x40
	READ_8(ret);
 80025ae:	f003 0020 	and.w	r0, r3, #32
 80025b2:	9b06      	ldr	r3, [sp, #24]
	READ_8(lo);
 80025b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
	READ_8(ret);
 80025b6:	f003 0540 	and.w	r5, r3, #64	; 0x40
 80025ba:	9b04      	ldr	r3, [sp, #16]
 80025bc:	4328      	orrs	r0, r5
 80025be:	f003 0510 	and.w	r5, r3, #16
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	4328      	orrs	r0, r5
 80025c6:	f003 0508 	and.w	r5, r3, #8
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	4328      	orrs	r0, r5
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	4318      	orrs	r0, r3
 80025d4:	9b00      	ldr	r3, [sp, #0]
	READ_8(lo);
 80025d6:	f00a 0a10 	and.w	sl, sl, #16
	READ_8(ret);
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	4318      	orrs	r0, r3
 80025e0:	9b07      	ldr	r3, [sp, #28]
	READ_8(lo);
 80025e2:	f009 0908 	and.w	r9, r9, #8
	READ_8(ret);
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	4318      	orrs	r0, r3
 80025ee:	9b02      	ldr	r3, [sp, #8]
	READ_8(lo);
 80025f0:	00bf      	lsls	r7, r7, #2
	READ_8(ret);
 80025f2:	0b5b      	lsrs	r3, r3, #13
 80025f4:	f003 0304 	and.w	r3, r3, #4
	return (ret << 8) | lo;
 80025f8:	4318      	orrs	r0, r3
	READ_8(lo);
 80025fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025fc:	f027 077f 	bic.w	r7, r7, #127	; 0x7f
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	ea43 030b 	orr.w	r3, r3, fp
 8002608:	ea43 030a 	orr.w	r3, r3, sl
 800260c:	ea43 0309 	orr.w	r3, r3, r9
 8002610:	f002 0902 	and.w	r9, r2, #2
 8002614:	9a08      	ldr	r2, [sp, #32]
 8002616:	ea43 0309 	orr.w	r3, r3, r9
 800261a:	f002 0901 	and.w	r9, r2, #1
 800261e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002620:	ea43 0309 	orr.w	r3, r3, r9
 8002624:	433b      	orrs	r3, r7
 8002626:	0b57      	lsrs	r7, r2, #13
 8002628:	f007 0704 	and.w	r7, r7, #4
 800262c:	433b      	orrs	r3, r7
	return (ret << 8) | lo;
 800262e:	b2db      	uxtb	r3, r3
	return ret;
}
 8002630:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002634:	b00d      	add	sp, #52	; 0x34
 8002636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800263a:	bf00      	nop
 800263c:	200000b4 	.word	0x200000b4
 8002640:	40010800 	.word	0x40010800
 8002644:	40010c00 	.word	0x40010c00
 8002648:	80200000 	.word	0x80200000

0800264c <readReg32>:

uint32_t readReg32(uint16_t reg) {
 800264c:	b538      	push	{r3, r4, r5, lr}
	uint16_t h = readReg(reg, 0);
 800264e:	2100      	movs	r1, #0
uint32_t readReg32(uint16_t reg) {
 8002650:	4605      	mov	r5, r0
	uint16_t h = readReg(reg, 0);
 8002652:	f7ff fee9 	bl	8002428 <readReg>
	uint16_t l = readReg(reg, 1);
 8002656:	2101      	movs	r1, #1
	uint16_t h = readReg(reg, 0);
 8002658:	4604      	mov	r4, r0
	uint16_t l = readReg(reg, 1);
 800265a:	4628      	mov	r0, r5
 800265c:	f7ff fee4 	bl	8002428 <readReg>
	return ((uint32_t) h << 16) | (l);
}
 8002660:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002664:	bd38      	pop	{r3, r4, r5, pc}

08002666 <readReg40>:

uint32_t readReg40(uint16_t reg) {
 8002666:	b570      	push	{r4, r5, r6, lr}
	uint16_t h = readReg(reg, 0);
 8002668:	2100      	movs	r1, #0
uint32_t readReg40(uint16_t reg) {
 800266a:	4604      	mov	r4, r0
	uint16_t h = readReg(reg, 0);
 800266c:	f7ff fedc 	bl	8002428 <readReg>
	uint16_t m = readReg(reg, 1);
 8002670:	2101      	movs	r1, #1
	uint16_t h = readReg(reg, 0);
 8002672:	4606      	mov	r6, r0
	uint16_t m = readReg(reg, 1);
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff fed7 	bl	8002428 <readReg>
	uint16_t l = readReg(reg, 2);
 800267a:	2102      	movs	r1, #2
	uint16_t m = readReg(reg, 1);
 800267c:	4605      	mov	r5, r0
	uint16_t l = readReg(reg, 2);
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fed2 	bl	8002428 <readReg>
	return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002684:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8002688:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
}
 800268c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002690:	bd70      	pop	{r4, r5, r6, pc}
	...

08002694 <readID>:
		}
	}
#endif
}

uint16_t readID(void) {
 8002694:	b513      	push	{r0, r1, r4, lr}
	uint16_t ret, ret2;
	uint8_t msb;
	ret = readReg(0, 0);           //forces a reset() if called before begin()
 8002696:	2100      	movs	r1, #0
 8002698:	4608      	mov	r0, r1
 800269a:	f7ff fec5 	bl	8002428 <readReg>
	if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800269e:	f245 4308 	movw	r3, #21512	; 0x5408
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d020      	beq.n	80026e8 <readID+0x54>
		return 0x5408;
	if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80026a6:	f245 4320 	movw	r3, #21536	; 0x5420
 80026aa:	4298      	cmp	r0, r3
 80026ac:	d01c      	beq.n	80026e8 <readID+0x54>
		return 0x5420;
	if (ret == 0x8989)          //SSD1289 is always 8989
 80026ae:	f648 1389 	movw	r3, #35209	; 0x8989
 80026b2:	4298      	cmp	r0, r3
 80026b4:	f000 80ba 	beq.w	800282c <readID+0x198>
		return 0x1289;
	ret = readReg(0x67, 0);        //HX8347-A
 80026b8:	2100      	movs	r1, #0
 80026ba:	2067      	movs	r0, #103	; 0x67
 80026bc:	f7ff feb4 	bl	8002428 <readReg>
	if (ret == 0x4747)
 80026c0:	f244 7347 	movw	r3, #18247	; 0x4747
 80026c4:	4298      	cmp	r0, r3
 80026c6:	f000 80b4 	beq.w	8002832 <readID+0x19e>
		return 0x8347;
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
	ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80026ca:	20a1      	movs	r0, #161	; 0xa1
 80026cc:	f7ff ffbe 	bl	800264c <readReg32>
	if (ret == 0x6101)
 80026d0:	f246 1301 	movw	r3, #24833	; 0x6101
	ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 80026d4:	b280      	uxth	r0, r0
	if (ret == 0x6101)
 80026d6:	4298      	cmp	r0, r3
 80026d8:	f000 80ae 	beq.w	8002838 <readID+0x1a4>
		return 0x1963;
	if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80026dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e0:	4298      	cmp	r0, r3
 80026e2:	d103      	bne.n	80026ec <readID+0x58>
		return 0x1526;          //subsequent begin() enables Command Access
 80026e4:	f241 5026 	movw	r0, #5414	; 0x1526
		 ret = (ret2 << 8) | readReg(0xD3);
		 //	if (ret2 == 0x93)
		 return ret2;
		 */
	return readReg(0, 0);          //0154, 7783, 9320, 9325, 9335, B505, B509
}
 80026e8:	b002      	add	sp, #8
 80026ea:	bd10      	pop	{r4, pc}
	ret = readReg40(0xBF);
 80026ec:	20bf      	movs	r0, #191	; 0xbf
 80026ee:	f7ff ffba 	bl	8002666 <readReg40>
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80026f2:	f248 3357 	movw	r3, #33623	; 0x8357
	ret = readReg40(0xBF);
 80026f6:	b280      	uxth	r0, r0
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80026f8:	4298      	cmp	r0, r3
 80026fa:	d0f5      	beq.n	80026e8 <readID+0x54>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80026fc:	f249 4381 	movw	r3, #38017	; 0x9481
 8002700:	4298      	cmp	r0, r3
 8002702:	d0f1      	beq.n	80026e8 <readID+0x54>
	if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8002704:	f241 5311 	movw	r3, #5393	; 0x1511
 8002708:	4298      	cmp	r0, r3
 800270a:	d0ed      	beq.n	80026e8 <readID+0x54>
	if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 800270c:	f5b0 5fa9 	cmp.w	r0, #5408	; 0x1520
 8002710:	d0ea      	beq.n	80026e8 <readID+0x54>
	if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8002712:	f241 5326 	movw	r3, #5414	; 0x1526
 8002716:	4298      	cmp	r0, r3
 8002718:	d0e4      	beq.n	80026e4 <readID+0x50>
	if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 800271a:	f241 5381 	movw	r3, #5505	; 0x1581
 800271e:	4298      	cmp	r0, r3
 8002720:	d0e2      	beq.n	80026e8 <readID+0x54>
	if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002722:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 8002726:	f000 808a 	beq.w	800283e <readID+0x1aa>
	ret = readReg32(0xD4);
 800272a:	20d4      	movs	r0, #212	; 0xd4
 800272c:	f7ff ff8e 	bl	800264c <readReg32>
	if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002730:	f245 3310 	movw	r3, #21264	; 0x5310
	ret = readReg32(0xD4);
 8002734:	b280      	uxth	r0, r0
	if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002736:	4298      	cmp	r0, r3
 8002738:	d0d6      	beq.n	80026e8 <readID+0x54>
	ret = readReg32(0xD7);
 800273a:	20d7      	movs	r0, #215	; 0xd7
 800273c:	f7ff ff86 	bl	800264c <readReg32>
	if (ret == 0x8031) //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002740:	f248 0331 	movw	r3, #32817	; 0x8031
	ret = readReg32(0xD7);
 8002744:	b280      	uxth	r0, r0
	if (ret == 0x8031) //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002746:	4298      	cmp	r0, r3
 8002748:	d0ce      	beq.n	80026e8 <readID+0x54>
	ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800274a:	20ef      	movs	r0, #239	; 0xef
 800274c:	f7ff ff8b 	bl	8002666 <readReg40>
	if (ret == 0x9327)
 8002750:	f249 3327 	movw	r3, #37671	; 0x9327
	ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002754:	b280      	uxth	r0, r0
	if (ret == 0x9327)
 8002756:	4298      	cmp	r0, r3
 8002758:	d0c6      	beq.n	80026e8 <readID+0x54>
	ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 800275a:	20fe      	movs	r0, #254	; 0xfe
 800275c:	f7ff ff76 	bl	800264c <readReg32>
	if (ret == 0x2053)
 8002760:	f242 0353 	movw	r3, #8275	; 0x2053
	ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002764:	f3c0 200f 	ubfx	r0, r0, #8, #16
	if (ret == 0x2053)
 8002768:	4298      	cmp	r0, r3
 800276a:	d0bd      	beq.n	80026e8 <readID+0x54>
	uint32_t ret32 = readReg32(0x04);
 800276c:	2004      	movs	r0, #4
 800276e:	f7ff ff6d 	bl	800264c <readReg32>
 8002772:	4604      	mov	r4, r0
	if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8002774:	f3c4 4407 	ubfx	r4, r4, #16, #8
	ret = ret32;
 8002778:	b280      	uxth	r0, r0
	if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800277a:	b9e4      	cbnz	r4, 80027b6 <readID+0x122>
 800277c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002780:	d119      	bne.n	80027b6 <readID+0x122>
		uint8_t cmds[] = { 0xFF, 0x83, 0x57 };
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <readID+0x1bc>)
	WriteCmdParamN(cmd, N, block);
 8002784:	2103      	movs	r1, #3
		uint8_t cmds[] = { 0xFF, 0x83, 0x57 };
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	f8ad 2004 	strh.w	r2, [sp, #4]
	WriteCmdParamN(cmd, N, block);
 800278e:	20b9      	movs	r0, #185	; 0xb9
 8002790:	aa01      	add	r2, sp, #4
		uint8_t cmds[] = { 0xFF, 0x83, 0x57 };
 8002792:	f88d 3006 	strb.w	r3, [sp, #6]
	WriteCmdParamN(cmd, N, block);
 8002796:	f7ff fccd 	bl	8002134 <WriteCmdParamN>
		msb = readReg(0xD0, 0);
 800279a:	4621      	mov	r1, r4
 800279c:	20d0      	movs	r0, #208	; 0xd0
 800279e:	f7ff fe43 	bl	8002428 <readReg>
 80027a2:	b2c0      	uxtb	r0, r0
		if (msb == 0x99)
 80027a4:	2899      	cmp	r0, #153	; 0x99
 80027a6:	d004      	beq.n	80027b2 <readID+0x11e>
		if (msb == 0x90)        //HX8357-C undocumented
 80027a8:	2890      	cmp	r0, #144	; 0x90
 80027aa:	d114      	bne.n	80027d6 <readID+0x142>
			return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80027ac:	f249 0090 	movw	r0, #37008	; 0x9090
 80027b0:	e79a      	b.n	80026e8 <readID+0x54>
			return 0x0099; //HX8357-D from datasheet
 80027b2:	2099      	movs	r0, #153	; 0x99
 80027b4:	e798      	b.n	80026e8 <readID+0x54>
	if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80027b6:	f241 5326 	movw	r3, #5414	; 0x1526
 80027ba:	4298      	cmp	r0, r3
 80027bc:	d092      	beq.n	80026e4 <readID+0x50>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80027be:	f648 13f0 	movw	r3, #35312	; 0x89f0
 80027c2:	4298      	cmp	r0, r3
 80027c4:	d03e      	beq.n	8002844 <readID+0x1b0>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80027c6:	f248 5352 	movw	r3, #34130	; 0x8552
 80027ca:	4298      	cmp	r0, r3
 80027cc:	d03d      	beq.n	800284a <readID+0x1b6>
	if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 80027ce:	f64a 4311 	movw	r3, #44049	; 0xac11
 80027d2:	4298      	cmp	r0, r3
 80027d4:	d088      	beq.n	80026e8 <readID+0x54>
	ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80027d6:	20d3      	movs	r0, #211	; 0xd3
 80027d8:	f7ff ff38 	bl	800264c <readReg32>
	if (ret == 0x9163)
 80027dc:	f249 1363 	movw	r3, #37219	; 0x9163
	ret = ret32 >> 8;
 80027e0:	f3c0 200f 	ubfx	r0, r0, #8, #16
	if (ret == 0x9163)
 80027e4:	4298      	cmp	r0, r3
 80027e6:	f43f af7f 	beq.w	80026e8 <readID+0x54>
	ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80027ea:	20d3      	movs	r0, #211	; 0xd3
 80027ec:	f7ff ff2e 	bl	800264c <readReg32>
 80027f0:	b280      	uxth	r0, r0
	msb = ret >> 8;
 80027f2:	0a03      	lsrs	r3, r0, #8
	if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80027f4:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	2a01      	cmp	r2, #1
 80027fc:	f67f af74 	bls.w	80026e8 <readID+0x54>
 8002800:	2b98      	cmp	r3, #152	; 0x98
 8002802:	f43f af71 	beq.w	80026e8 <readID+0x54>
 8002806:	2b77      	cmp	r3, #119	; 0x77
 8002808:	f43f af6e 	beq.w	80026e8 <readID+0x54>
 800280c:	2b16      	cmp	r3, #22
 800280e:	f43f af6b 	beq.w	80026e8 <readID+0x54>
	if (ret == 0x00D3 || ret == 0xD3D3)
 8002812:	28d3      	cmp	r0, #211	; 0xd3
 8002814:	f43f af68 	beq.w	80026e8 <readID+0x54>
 8002818:	f24d 33d3 	movw	r3, #54227	; 0xd3d3
 800281c:	4298      	cmp	r0, r3
 800281e:	f43f af63 	beq.w	80026e8 <readID+0x54>
	return readReg(0, 0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002822:	2100      	movs	r1, #0
 8002824:	4608      	mov	r0, r1
 8002826:	f7ff fdff 	bl	8002428 <readReg>
 800282a:	e75d      	b.n	80026e8 <readID+0x54>
		return 0x1289;
 800282c:	f241 2089 	movw	r0, #4745	; 0x1289
 8002830:	e75a      	b.n	80026e8 <readID+0x54>
		return 0x8347;
 8002832:	f248 3047 	movw	r0, #33607	; 0x8347
 8002836:	e757      	b.n	80026e8 <readID+0x54>
		return 0x1963;
 8002838:	f641 1063 	movw	r0, #6499	; 0x1963
 800283c:	e754      	b.n	80026e8 <readID+0x54>
		return 0x6814;
 800283e:	f646 0014 	movw	r0, #26644	; 0x6814
 8002842:	e751      	b.n	80026e8 <readID+0x54>
		return 0x7735;
 8002844:	f247 7035 	movw	r0, #30517	; 0x7735
 8002848:	e74e      	b.n	80026e8 <readID+0x54>
		return 0x7789;
 800284a:	f247 7089 	movw	r0, #30601	; 0x7789
 800284e:	e74b      	b.n	80026e8 <readID+0x54>
 8002850:	08005b58 	.word	0x08005b58

08002854 <setAddrWindow>:
		CS_IDLE;
	} else
		WriteCmdData(_MW, color);
}

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 8002854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002858:	4615      	mov	r5, r2
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800285a:	f249 3227 	movw	r2, #37671	; 0x9327
void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 800285e:	461c      	mov	r4, r3
	if (_lcd_ID == 0x9327) {
 8002860:	4b44      	ldr	r3, [pc, #272]	; (8002974 <setAddrWindow+0x120>)
void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 8002862:	4607      	mov	r7, r0
	if (_lcd_ID == 0x9327) {
 8002864:	881b      	ldrh	r3, [r3, #0]
void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 8002866:	460e      	mov	r6, r1
	if (_lcd_ID == 0x9327) {
 8002868:	4293      	cmp	r3, r2
 800286a:	d139      	bne.n	80028e0 <setAddrWindow+0x8c>
		if (rotation == 2)
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <setAddrWindow+0x124>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d12e      	bne.n	80028d2 <setAddrWindow+0x7e>
			y += OFFSET_9327, y1 += OFFSET_9327;
 8002874:	3620      	adds	r6, #32
 8002876:	3420      	adds	r4, #32
 8002878:	b236      	sxth	r6, r6
 800287a:	b224      	sxth	r4, r4
			x1 += dy;
			y1 -= dy;
		}
	}
#endif
	if (_lcd_capable & MIPI_DCS_REV1) {
 800287c:	4b3f      	ldr	r3, [pc, #252]	; (800297c <setAddrWindow+0x128>)
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	4698      	mov	r8, r3
 8002882:	f012 0f01 	tst.w	r2, #1
 8002886:	d040      	beq.n	800290a <setAddrWindow+0xb6>
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1); //Start column instead of _MC
 8002888:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <setAddrWindow+0x12c>)
	WriteCmdParamN(cmd, 4, d);
 800288a:	aa01      	add	r2, sp, #4
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1); //Start column instead of _MC
 800288c:	8818      	ldrh	r0, [r3, #0]
 800288e:	123b      	asrs	r3, r7, #8
 8002890:	f88d 3004 	strb.w	r3, [sp, #4]
	WriteCmdParamN(cmd, 4, d);
 8002894:	2104      	movs	r1, #4
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1); //Start column instead of _MC
 8002896:	122b      	asrs	r3, r5, #8
	WriteCmdParamN(cmd, 4, d);
 8002898:	b2c0      	uxtb	r0, r0
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1); //Start column instead of _MC
 800289a:	f88d 3006 	strb.w	r3, [sp, #6]
 800289e:	f88d 7005 	strb.w	r7, [sp, #5]
 80028a2:	f88d 5007 	strb.w	r5, [sp, #7]
	WriteCmdParamN(cmd, 4, d);
 80028a6:	f7ff fc45 	bl	8002134 <WriteCmdParamN>
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <setAddrWindow+0x130>)
	WriteCmdParamN(cmd, 4, d);
 80028ac:	aa01      	add	r2, sp, #4
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80028ae:	8818      	ldrh	r0, [r3, #0]
 80028b0:	1233      	asrs	r3, r6, #8
 80028b2:	f88d 3004 	strb.w	r3, [sp, #4]
	WriteCmdParamN(cmd, 4, d);
 80028b6:	2104      	movs	r1, #4
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80028b8:	1223      	asrs	r3, r4, #8
	WriteCmdParamN(cmd, 4, d);
 80028ba:	b2c0      	uxtb	r0, r0
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80028bc:	f88d 6005 	strb.w	r6, [sp, #5]
 80028c0:	f88d 3006 	strb.w	r3, [sp, #6]
 80028c4:	f88d 4007 	strb.w	r4, [sp, #7]
	WriteCmdParamN(cmd, 4, d);
 80028c8:	f7ff fc34 	bl	8002134 <WriteCmdParamN>
			WriteCmdData(_SP, y);
			WriteCmdData(_EC, x1);
			WriteCmdData(_EP, y1);
		}
	}
}
 80028cc:	b002      	add	sp, #8
 80028ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rotation == 3)
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d1d2      	bne.n	800287c <setAddrWindow+0x28>
			x += OFFSET_9327, x1 += OFFSET_9327;
 80028d6:	3720      	adds	r7, #32
 80028d8:	3520      	adds	r5, #32
 80028da:	b23f      	sxth	r7, r7
 80028dc:	b22d      	sxth	r5, r5
 80028de:	e7cd      	b.n	800287c <setAddrWindow+0x28>
	if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80028e0:	f241 5226 	movw	r2, #5414	; 0x1526
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d1c9      	bne.n	800287c <setAddrWindow+0x28>
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <setAddrWindow+0x124>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	07d9      	lsls	r1, r3, #31
 80028ee:	d5c5      	bpl.n	800287c <setAddrWindow+0x28>
		int16_t dx = x1 - x, dy = y1 - y;
 80028f0:	b2a3      	uxth	r3, r4
 80028f2:	1b9a      	subs	r2, r3, r6
 80028f4:	b292      	uxth	r2, r2
		if (dy == 0) {
 80028f6:	b912      	cbnz	r2, 80028fe <setAddrWindow+0xaa>
			y1++;
 80028f8:	3301      	adds	r3, #1
 80028fa:	b21c      	sxth	r4, r3
 80028fc:	e7be      	b.n	800287c <setAddrWindow+0x28>
		} else if (dx == 0) {
 80028fe:	42a8      	cmp	r0, r5
			x1 += dy;
 8002900:	bf02      	ittt	eq
 8002902:	1812      	addeq	r2, r2, r0
 8002904:	b215      	sxtheq	r5, r2
 8002906:	4634      	moveq	r4, r6
 8002908:	e7b8      	b.n	800287c <setAddrWindow+0x28>
	writecmddata(cmd, dat);
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <setAddrWindow+0x134>)
 800290c:	b2b9      	uxth	r1, r7
 800290e:	8818      	ldrh	r0, [r3, #0]
 8002910:	f7ff fb66 	bl	8001fe0 <writecmddata>
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <setAddrWindow+0x138>)
 8002916:	b2b1      	uxth	r1, r6
 8002918:	8818      	ldrh	r0, [r3, #0]
 800291a:	f7ff fb61 	bl	8001fe0 <writecmddata>
		if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800291e:	42bd      	cmp	r5, r7
 8002920:	d101      	bne.n	8002926 <setAddrWindow+0xd2>
 8002922:	42b4      	cmp	r4, r6
 8002924:	d0d2      	beq.n	80028cc <setAddrWindow+0x78>
			if (_lcd_capable & XSA_XEA_16BIT) {
 8002926:	f8b8 3000 	ldrh.w	r3, [r8]
 800292a:	069a      	lsls	r2, r3, #26
 800292c:	d50c      	bpl.n	8002948 <setAddrWindow+0xf4>
				if (rotation & 1)
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <setAddrWindow+0x124>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	07db      	lsls	r3, r3, #31
					y1 = y = (y1 << 8) | y;
 8002934:	bf4b      	itete	mi
 8002936:	ea46 2604 	orrmi.w	r6, r6, r4, lsl #8
					x1 = x = (x1 << 8) | x;
 800293a:	ea47 2705 	orrpl.w	r7, r7, r5, lsl #8
					y1 = y = (y1 << 8) | y;
 800293e:	b236      	sxthmi	r6, r6
					x1 = x = (x1 << 8) | x;
 8002940:	b23f      	sxthpl	r7, r7
					y1 = y = (y1 << 8) | y;
 8002942:	bf4c      	ite	mi
 8002944:	4634      	movmi	r4, r6
					x1 = x = (x1 << 8) | x;
 8002946:	463d      	movpl	r5, r7
	writecmddata(cmd, dat);
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <setAddrWindow+0x12c>)
 800294a:	b2b9      	uxth	r1, r7
 800294c:	8818      	ldrh	r0, [r3, #0]
 800294e:	f7ff fb47 	bl	8001fe0 <writecmddata>
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <setAddrWindow+0x130>)
 8002954:	b2b1      	uxth	r1, r6
 8002956:	8818      	ldrh	r0, [r3, #0]
 8002958:	f7ff fb42 	bl	8001fe0 <writecmddata>
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <setAddrWindow+0x13c>)
 800295e:	b2a9      	uxth	r1, r5
 8002960:	8818      	ldrh	r0, [r3, #0]
 8002962:	f7ff fb3d 	bl	8001fe0 <writecmddata>
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <setAddrWindow+0x140>)
 8002968:	b2a1      	uxth	r1, r4
 800296a:	8818      	ldrh	r0, [r3, #0]
 800296c:	f7ff fb38 	bl	8001fe0 <writecmddata>
}
 8002970:	e7ac      	b.n	80028cc <setAddrWindow+0x78>
 8002972:	bf00      	nop
 8002974:	2000011e 	.word	0x2000011e
 8002978:	200000b6 	.word	0x200000b6
 800297c:	20000110 	.word	0x20000110
 8002980:	2000011a 	.word	0x2000011a
 8002984:	20000112 	.word	0x20000112
 8002988:	20000118 	.word	0x20000118
 800298c:	20000116 	.word	0x20000116
 8002990:	20000122 	.word	0x20000122
 8002994:	2000011c 	.word	0x2000011c

08002998 <readGRAM>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h) {
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	b08b      	sub	sp, #44	; 0x2c
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 80029a4:	9203      	str	r2, [sp, #12]
 80029a6:	9305      	str	r3, [sp, #20]
	uint16_t ret, dummy, _MR = _MW;
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <readGRAM+0xbc>)
	int16_t n = w * h, row = 0, col = 0;
 80029aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	uint16_t ret, dummy, _MR = _MW;
 80029ae:	881c      	ldrh	r4, [r3, #0]
	int16_t n = w * h, row = 0, col = 0;
 80029b0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80029b4:	fb03 f502 	mul.w	r5, r3, r2
 80029b8:	fa0f fb85 	sxth.w	fp, r5
	if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80029bc:	4d26      	ldr	r5, [pc, #152]	; (8002a58 <readGRAM+0xc0>)
 80029be:	882d      	ldrh	r5, [r5, #0]
		_MR = 0x2E;
 80029c0:	f015 0f01 	tst.w	r5, #1
	if (_lcd_ID == 0x1602)
 80029c4:	4d25      	ldr	r5, [pc, #148]	; (8002a5c <readGRAM+0xc4>)
		_MR = 0x2E;
 80029c6:	bf18      	it	ne
 80029c8:	242e      	movne	r4, #46	; 0x2e
	if (_lcd_ID == 0x1602)
 80029ca:	882e      	ldrh	r6, [r5, #0]
		_MR = 0x2E;
 80029cc:	f241 6502 	movw	r5, #5634	; 0x1602
 80029d0:	42ae      	cmp	r6, r5
 80029d2:	bf08      	it	eq
 80029d4:	242e      	moveq	r4, #46	; 0x2e
	int16_t n = w * h, row = 0, col = 0;
 80029d6:	2600      	movs	r6, #0
 80029d8:	46b1      	mov	r9, r6
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80029da:	b285      	uxth	r5, r0
 80029dc:	9501      	str	r5, [sp, #4]
 80029de:	b28d      	uxth	r5, r1
 80029e0:	9502      	str	r5, [sp, #8]
 80029e2:	3d01      	subs	r5, #1
 80029e4:	442b      	add	r3, r5
 80029e6:	9d01      	ldr	r5, [sp, #4]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	3d01      	subs	r5, #1
 80029ec:	442a      	add	r2, r5
 80029ee:	b212      	sxth	r2, r2
 80029f0:	f7ff ff30 	bl	8002854 <setAddrWindow>
		WriteCmd(_MR);
 80029f4:	0a23      	lsrs	r3, r4, #8
 80029f6:	b2e2      	uxtb	r2, r4
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	0359      	lsls	r1, r3, #13
 80029fc:	109a      	asrs	r2, r3, #2
 80029fe:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002a02:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 8002a06:	f002 0220 	and.w	r2, r2, #32
 8002a0a:	9307      	str	r3, [sp, #28]
 8002a0c:	9b00      	ldr	r3, [sp, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	9206      	str	r2, [sp, #24]
 8002a12:	035a      	lsls	r2, r3, #13
 8002a14:	109b      	asrs	r3, r3, #2
 8002a16:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	4313      	orrs	r3, r2
		CS_ACTIVE;
 8002a20:	4c0f      	ldr	r4, [pc, #60]	; (8002a60 <readGRAM+0xc8>)
		WriteCmd(_MR);
 8002a22:	4d10      	ldr	r5, [pc, #64]	; (8002a64 <readGRAM+0xcc>)
 8002a24:	9308      	str	r3, [sp, #32]
	while (n > 0) {
 8002a26:	f1bb 0f00 	cmp.w	fp, #0
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <readGRAM+0xc0>)
 8002a2c:	dc20      	bgt.n	8002a70 <readGRAM+0xd8>
	if (!(_lcd_capable & MIPI_DCS_REV1))
 8002a2e:	8819      	ldrh	r1, [r3, #0]
 8002a30:	f011 0101 	ands.w	r1, r1, #1
 8002a34:	d10a      	bne.n	8002a4c <readGRAM+0xb4>
	return _height;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <readGRAM+0xd0>)
	return _width;
 8002a38:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <readGRAM+0xd4>)
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	b212      	sxth	r2, r2
 8002a46:	4608      	mov	r0, r1
 8002a48:	f7ff ff04 	bl	8002854 <setAddrWindow>
}
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	b00b      	add	sp, #44	; 0x2c
 8002a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a54:	2000010e 	.word	0x2000010e
 8002a58:	20000110 	.word	0x20000110
 8002a5c:	2000011e 	.word	0x2000011e
 8002a60:	40010800 	.word	0x40010800
 8002a64:	40010c00 	.word	0x40010c00
 8002a68:	20000010 	.word	0x20000010
 8002a6c:	20000012 	.word	0x20000012
		if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	07d9      	lsls	r1, r3, #31
 8002a74:	d40e      	bmi.n	8002a94 <readGRAM+0xfc>
			WriteCmdData(_MC, x + col);
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	1999      	adds	r1, r3, r6
	writecmddata(cmd, dat);
 8002a7a:	4bd2      	ldr	r3, [pc, #840]	; (8002dc4 <readGRAM+0x42c>)
 8002a7c:	b289      	uxth	r1, r1
 8002a7e:	8818      	ldrh	r0, [r3, #0]
 8002a80:	f7ff faae 	bl	8001fe0 <writecmddata>
			WriteCmdData(_MP, y + row);
 8002a84:	9b02      	ldr	r3, [sp, #8]
 8002a86:	eb03 0109 	add.w	r1, r3, r9
	writecmddata(cmd, dat);
 8002a8a:	4bcf      	ldr	r3, [pc, #828]	; (8002dc8 <readGRAM+0x430>)
 8002a8c:	b289      	uxth	r1, r1
 8002a8e:	8818      	ldrh	r0, [r3, #0]
 8002a90:	f7ff faa6 	bl	8001fe0 <writecmddata>
		WriteCmd(_MR);
 8002a94:	f44f 07f6 	mov.w	r7, #8060928	; 0x7b0000
		CS_ACTIVE;
 8002a98:	2102      	movs	r1, #2
 8002a9a:	48cc      	ldr	r0, [pc, #816]	; (8002dcc <readGRAM+0x434>)
 8002a9c:	f7ff fa9a 	bl	8001fd4 <PIN_LOW>
		WriteCmd(_MR);
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	48ca      	ldr	r0, [pc, #808]	; (8002dcc <readGRAM+0x434>)
 8002aa4:	f7ff fa96 	bl	8001fd4 <PIN_LOW>
 8002aa8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8002ddc <readGRAM+0x444>
 8002aac:	9b06      	ldr	r3, [sp, #24]
 8002aae:	f8c4 8010 	str.w	r8, [r4, #16]
 8002ab2:	612f      	str	r7, [r5, #16]
 8002ab4:	6123      	str	r3, [r4, #16]
 8002ab6:	9b07      	ldr	r3, [sp, #28]
 8002ab8:	2108      	movs	r1, #8
 8002aba:	612b      	str	r3, [r5, #16]
 8002abc:	48c3      	ldr	r0, [pc, #780]	; (8002dcc <readGRAM+0x434>)
 8002abe:	f7ff fa89 	bl	8001fd4 <PIN_LOW>
 8002ac2:	2108      	movs	r1, #8
 8002ac4:	48c1      	ldr	r0, [pc, #772]	; (8002dcc <readGRAM+0x434>)
 8002ac6:	f7ff fa88 	bl	8001fda <PIN_HIGH>
 8002aca:	2108      	movs	r1, #8
 8002acc:	48bf      	ldr	r0, [pc, #764]	; (8002dcc <readGRAM+0x434>)
 8002ace:	f7ff fa84 	bl	8001fda <PIN_HIGH>
 8002ad2:	9b08      	ldr	r3, [sp, #32]
 8002ad4:	f8c4 8010 	str.w	r8, [r4, #16]
 8002ad8:	612f      	str	r7, [r5, #16]
 8002ada:	6123      	str	r3, [r4, #16]
 8002adc:	9b00      	ldr	r3, [sp, #0]
 8002ade:	2108      	movs	r1, #8
 8002ae0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002ae4:	612b      	str	r3, [r5, #16]
 8002ae6:	48b9      	ldr	r0, [pc, #740]	; (8002dcc <readGRAM+0x434>)
 8002ae8:	f7ff fa74 	bl	8001fd4 <PIN_LOW>
 8002aec:	2108      	movs	r1, #8
 8002aee:	48b7      	ldr	r0, [pc, #732]	; (8002dcc <readGRAM+0x434>)
 8002af0:	f7ff fa73 	bl	8001fda <PIN_HIGH>
 8002af4:	2108      	movs	r1, #8
 8002af6:	48b5      	ldr	r0, [pc, #724]	; (8002dcc <readGRAM+0x434>)
 8002af8:	f7ff fa6f 	bl	8001fda <PIN_HIGH>
 8002afc:	2104      	movs	r1, #4
 8002afe:	48b3      	ldr	r0, [pc, #716]	; (8002dcc <readGRAM+0x434>)
 8002b00:	f7ff fa6b 	bl	8001fda <PIN_HIGH>
		setReadDir();
 8002b04:	f7ff fbf6 	bl	80022f4 <setReadDir>
		if (_lcd_capable & READ_NODUMMY) {
 8002b08:	4bb1      	ldr	r3, [pc, #708]	; (8002dd0 <readGRAM+0x438>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	065a      	lsls	r2, r3, #25
 8002b0e:	d42d      	bmi.n	8002b6c <readGRAM+0x1d4>
		} else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002b10:	07df      	lsls	r7, r3, #31
			READ_8(r);
 8002b12:	f04f 0110 	mov.w	r1, #16
 8002b16:	4620      	mov	r0, r4
		} else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002b18:	d406      	bmi.n	8002b28 <readGRAM+0x190>
 8002b1a:	4bae      	ldr	r3, [pc, #696]	; (8002dd4 <readGRAM+0x43c>)
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	f241 2389 	movw	r3, #4745	; 0x1289
 8002b22:	429a      	cmp	r2, r3
 8002b24:	f040 817e 	bne.w	8002e24 <readGRAM+0x48c>
			READ_16(dummy);
 8002b28:	f7ff fa57 	bl	8001fda <PIN_HIGH>
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff fa50 	bl	8001fd4 <PIN_LOW>
 8002b34:	2110      	movs	r1, #16
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fa4c 	bl	8001fd4 <PIN_LOW>
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff fa48 	bl	8001fd4 <PIN_LOW>
 8002b44:	2110      	movs	r1, #16
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fa44 	bl	8001fd4 <PIN_LOW>
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4620      	mov	r0, r4
 8002b50:	68ab      	ldr	r3, [r5, #8]
 8002b52:	68ab      	ldr	r3, [r5, #8]
 8002b54:	68a3      	ldr	r3, [r4, #8]
 8002b56:	68ab      	ldr	r3, [r5, #8]
 8002b58:	68ab      	ldr	r3, [r5, #8]
 8002b5a:	68ab      	ldr	r3, [r5, #8]
 8002b5c:	68ab      	ldr	r3, [r5, #8]
 8002b5e:	68a3      	ldr	r3, [r4, #8]
 8002b60:	f7ff fa3b 	bl	8001fda <PIN_HIGH>
 8002b64:	2110      	movs	r1, #16
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff fa37 	bl	8001fda <PIN_HIGH>
		if (_lcd_ID == 0x1511)
 8002b6c:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <readGRAM+0x43c>)
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	f241 5311 	movw	r3, #5393	; 0x1511
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d123      	bne.n	8002bc0 <readGRAM+0x228>
			READ_8(r);   //extra dummy for R61511
 8002b78:	2110      	movs	r1, #16
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff fa2d 	bl	8001fda <PIN_HIGH>
 8002b80:	2110      	movs	r1, #16
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff fa26 	bl	8001fd4 <PIN_LOW>
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff fa22 	bl	8001fd4 <PIN_LOW>
 8002b90:	2110      	movs	r1, #16
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff fa1e 	bl	8001fd4 <PIN_LOW>
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fa1a 	bl	8001fd4 <PIN_LOW>
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	68ab      	ldr	r3, [r5, #8]
 8002ba6:	68ab      	ldr	r3, [r5, #8]
 8002ba8:	68a3      	ldr	r3, [r4, #8]
 8002baa:	68ab      	ldr	r3, [r5, #8]
 8002bac:	68ab      	ldr	r3, [r5, #8]
 8002bae:	68ab      	ldr	r3, [r5, #8]
 8002bb0:	68ab      	ldr	r3, [r5, #8]
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	f7ff fa11 	bl	8001fda <PIN_HIGH>
 8002bb8:	2110      	movs	r1, #16
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff fa0d 	bl	8001fda <PIN_HIGH>
			if (_lcd_capable & READ_24BITS) {
 8002bc0:	4b83      	ldr	r3, [pc, #524]	; (8002dd0 <readGRAM+0x438>)
				READ_8(r);
 8002bc2:	2110      	movs	r1, #16
			if (_lcd_capable & READ_24BITS) {
 8002bc4:	881b      	ldrh	r3, [r3, #0]
				READ_8(r);
 8002bc6:	4620      	mov	r0, r4
			if (_lcd_capable & READ_24BITS) {
 8002bc8:	06da      	lsls	r2, r3, #27
 8002bca:	f140 8150 	bpl.w	8002e6e <readGRAM+0x4d6>
				READ_8(r);
 8002bce:	f7ff fa04 	bl	8001fda <PIN_HIGH>
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7ff f9fd 	bl	8001fd4 <PIN_LOW>
 8002bda:	2110      	movs	r1, #16
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff f9f9 	bl	8001fd4 <PIN_LOW>
 8002be2:	2110      	movs	r1, #16
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff f9f5 	bl	8001fd4 <PIN_LOW>
 8002bea:	2110      	movs	r1, #16
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff f9f1 	bl	8001fd4 <PIN_LOW>
 8002bf2:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002bf6:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002bfa:	68a1      	ldr	r1, [r4, #8]
 8002bfc:	68a8      	ldr	r0, [r5, #8]
 8002bfe:	f008 0801 	and.w	r8, r8, #1
 8002c02:	68ab      	ldr	r3, [r5, #8]
 8002c04:	f00e 0e02 	and.w	lr, lr, #2
 8002c08:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002c0c:	ea48 0e0e 	orr.w	lr, r8, lr
 8002c10:	f000 0008 	and.w	r0, r0, #8
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	68af      	ldr	r7, [r5, #8]
 8002c1a:	ea4e 0e00 	orr.w	lr, lr, r0
 8002c1e:	ea4e 0e03 	orr.w	lr, lr, r3
 8002c22:	f00c 0c20 	and.w	ip, ip, #32
 8002c26:	ea4e 0e0c 	orr.w	lr, lr, ip
 8002c2a:	68a2      	ldr	r2, [r4, #8]
 8002c2c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8002c30:	0b49      	lsrs	r1, r1, #13
 8002c32:	ea4e 0707 	orr.w	r7, lr, r7
 8002c36:	f001 0104 	and.w	r1, r1, #4
 8002c3a:	4339      	orrs	r1, r7
 8002c3c:	0097      	lsls	r7, r2, #2
 8002c3e:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8002c42:	430f      	orrs	r7, r1
 8002c44:	4620      	mov	r0, r4
 8002c46:	2110      	movs	r1, #16
 8002c48:	f7ff f9c7 	bl	8001fda <PIN_HIGH>
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7ff f9c3 	bl	8001fda <PIN_HIGH>
				READ_8(g);
 8002c54:	2110      	movs	r1, #16
 8002c56:	4620      	mov	r0, r4
 8002c58:	f7ff f9bf 	bl	8001fda <PIN_HIGH>
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff f9b8 	bl	8001fd4 <PIN_LOW>
 8002c64:	2110      	movs	r1, #16
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff f9b4 	bl	8001fd4 <PIN_LOW>
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff f9b0 	bl	8001fd4 <PIN_LOW>
 8002c74:	2110      	movs	r1, #16
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff f9ac 	bl	8001fd4 <PIN_LOW>
 8002c7c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002c80:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002c84:	68a1      	ldr	r1, [r4, #8]
 8002c86:	68a8      	ldr	r0, [r5, #8]
 8002c88:	f008 0801 	and.w	r8, r8, #1
 8002c8c:	68ab      	ldr	r3, [r5, #8]
 8002c8e:	f00e 0e02 	and.w	lr, lr, #2
 8002c92:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8002c96:	ea48 0e0e 	orr.w	lr, r8, lr
 8002c9a:	f000 0008 	and.w	r0, r0, #8
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002ca6:	ea4e 0e00 	orr.w	lr, lr, r0
 8002caa:	ea4e 0e03 	orr.w	lr, lr, r3
 8002cae:	f00a 0820 	and.w	r8, sl, #32
 8002cb2:	68a2      	ldr	r2, [r4, #8]
 8002cb4:	ea4e 0808 	orr.w	r8, lr, r8
 8002cb8:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8002cbc:	0b49      	lsrs	r1, r1, #13
 8002cbe:	ea48 080c 	orr.w	r8, r8, ip
 8002cc2:	f001 0104 	and.w	r1, r1, #4
 8002cc6:	ea48 0101 	orr.w	r1, r8, r1
 8002cca:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8002cce:	f008 0880 	and.w	r8, r8, #128	; 0x80
 8002cd2:	ea48 0801 	orr.w	r8, r8, r1
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	2110      	movs	r1, #16
 8002cda:	f7ff f97e 	bl	8001fda <PIN_HIGH>
 8002cde:	2110      	movs	r1, #16
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff f97a 	bl	8001fda <PIN_HIGH>
				READ_8(b);
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff f976 	bl	8001fda <PIN_HIGH>
 8002cee:	2110      	movs	r1, #16
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7ff f96f 	bl	8001fd4 <PIN_LOW>
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff f96b 	bl	8001fd4 <PIN_LOW>
 8002cfe:	2110      	movs	r1, #16
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7ff f967 	bl	8001fd4 <PIN_LOW>
 8002d06:	2110      	movs	r1, #16
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff f963 	bl	8001fd4 <PIN_LOW>
 8002d0e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002d12:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002d16:	68a2      	ldr	r2, [r4, #8]
 8002d18:	68a8      	ldr	r0, [r5, #8]
 8002d1a:	f00c 0c01 	and.w	ip, ip, #1
 8002d1e:	68ab      	ldr	r3, [r5, #8]
 8002d20:	f00e 0e02 	and.w	lr, lr, #2
 8002d24:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8002d28:	68a9      	ldr	r1, [r5, #8]
 8002d2a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8002d2e:	f000 0008 	and.w	r0, r0, #8
 8002d32:	9109      	str	r1, [sp, #36]	; 0x24
 8002d34:	ea4e 0e00 	orr.w	lr, lr, r0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8002d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d42:	f00a 0a20 	and.w	sl, sl, #32
 8002d46:	f003 0c40 	and.w	ip, r3, #64	; 0x40
 8002d4a:	68a1      	ldr	r1, [r4, #8]
 8002d4c:	ea4e 0a0a 	orr.w	sl, lr, sl
 8002d50:	0b52      	lsrs	r2, r2, #13
 8002d52:	ea4a 0a0c 	orr.w	sl, sl, ip
 8002d56:	f002 0204 	and.w	r2, r2, #4
 8002d5a:	ea4a 0202 	orr.w	r2, sl, r2
 8002d5e:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8002d62:	4620      	mov	r0, r4
 8002d64:	2110      	movs	r1, #16
 8002d66:	f00a 0a80 	and.w	sl, sl, #128	; 0x80
 8002d6a:	ea4a 0a02 	orr.w	sl, sl, r2
 8002d6e:	f7ff f934 	bl	8001fda <PIN_HIGH>
 8002d72:	2110      	movs	r1, #16
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff f930 	bl	8001fda <PIN_HIGH>
				if (_lcd_capable & READ_BGR)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <readGRAM+0x438>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	075b      	lsls	r3, r3, #29
					ret = color565(b, g, r);
 8002d80:	bf43      	ittte	mi
 8002d82:	463a      	movmi	r2, r7
 8002d84:	4641      	movmi	r1, r8
 8002d86:	4650      	movmi	r0, sl
					ret = color565(r, g, b);
 8002d88:	4652      	movpl	r2, sl
 8002d8a:	bf5c      	itt	pl
 8002d8c:	4641      	movpl	r1, r8
 8002d8e:	4638      	movpl	r0, r7
 8002d90:	f7ff faa4 	bl	80022dc <color565>
			if (is555)
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <readGRAM+0x440>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b153      	cbz	r3, 8002db0 <readGRAM+0x418>
	return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8002d9a:	1143      	asrs	r3, r0, #5
 8002d9c:	f3c0 0844 	ubfx	r8, r0, #1, #5
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	ea43 0308 	orr.w	r3, r3, r8
 8002da8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002dac:	4318      	orrs	r0, r3
 8002dae:	b280      	uxth	r0, r0
			*block++ = ret;
 8002db0:	9b03      	ldr	r3, [sp, #12]
			if (!(_lcd_capable & AUTO_READINC))
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <readGRAM+0x438>)
			*block++ = ret;
 8002db4:	f823 0b02 	strh.w	r0, [r3], #2
			if (!(_lcd_capable & AUTO_READINC))
 8002db8:	8812      	ldrh	r2, [r2, #0]
			*block++ = ret;
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002dc0:	e00e      	b.n	8002de0 <readGRAM+0x448>
 8002dc2:	bf00      	nop
 8002dc4:	20000118 	.word	0x20000118
 8002dc8:	20000116 	.word	0x20000116
 8002dcc:	40010800 	.word	0x40010800
 8002dd0:	20000110 	.word	0x20000110
 8002dd4:	2000011e 	.word	0x2000011e
 8002dd8:	200000b5 	.word	0x200000b5
 8002ddc:	80200000 	.word	0x80200000
 8002de0:	b29b      	uxth	r3, r3
			if (!(_lcd_capable & AUTO_READINC))
 8002de2:	0792      	lsls	r2, r2, #30
 8002de4:	fa0f fb83 	sxth.w	fp, r3
 8002de8:	d503      	bpl.n	8002df2 <readGRAM+0x45a>
		while (n) {
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f47f aee8 	bne.w	8002bc0 <readGRAM+0x228>
 8002df0:	469b      	mov	fp, r3
		if (++col >= w) {
 8002df2:	3601      	adds	r6, #1
 8002df4:	9b04      	ldr	r3, [sp, #16]
 8002df6:	b236      	sxth	r6, r6
 8002df8:	42b3      	cmp	r3, r6
 8002dfa:	dc08      	bgt.n	8002e0e <readGRAM+0x476>
			col = 0;
 8002dfc:	2600      	movs	r6, #0
			if (++row >= h)
 8002dfe:	f109 0301 	add.w	r3, r9, #1
 8002e02:	fa0f f983 	sxth.w	r9, r3
 8002e06:	9b05      	ldr	r3, [sp, #20]
 8002e08:	454b      	cmp	r3, r9
				row = 0;
 8002e0a:	bfd8      	it	le
 8002e0c:	46b1      	movle	r9, r6
		RD_IDLE;
 8002e0e:	4620      	mov	r0, r4
 8002e10:	2110      	movs	r1, #16
 8002e12:	f7ff f8e2 	bl	8001fda <PIN_HIGH>
		CS_IDLE;
 8002e16:	2102      	movs	r1, #2
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff f8de 	bl	8001fda <PIN_HIGH>
		setWriteDir();
 8002e1e:	f7ff fa93 	bl	8002348 <setWriteDir>
 8002e22:	e600      	b.n	8002a26 <readGRAM+0x8e>
			READ_16(dummy);
 8002e24:	f7ff f8d9 	bl	8001fda <PIN_HIGH>
 8002e28:	2110      	movs	r1, #16
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7ff f8d2 	bl	8001fd4 <PIN_LOW>
 8002e30:	2110      	movs	r1, #16
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff f8ce 	bl	8001fd4 <PIN_LOW>
 8002e38:	2110      	movs	r1, #16
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff f8ca 	bl	8001fd4 <PIN_LOW>
 8002e40:	2110      	movs	r1, #16
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff f8c6 	bl	8001fd4 <PIN_LOW>
 8002e48:	2110      	movs	r1, #16
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	68ab      	ldr	r3, [r5, #8]
 8002e4e:	68ab      	ldr	r3, [r5, #8]
 8002e50:	68a3      	ldr	r3, [r4, #8]
 8002e52:	68ab      	ldr	r3, [r5, #8]
 8002e54:	68ab      	ldr	r3, [r5, #8]
 8002e56:	68ab      	ldr	r3, [r5, #8]
 8002e58:	68ab      	ldr	r3, [r5, #8]
 8002e5a:	68a3      	ldr	r3, [r4, #8]
 8002e5c:	f7ff f8bd 	bl	8001fda <PIN_HIGH>
 8002e60:	2110      	movs	r1, #16
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff f8b9 	bl	8001fda <PIN_HIGH>
 8002e68:	2110      	movs	r1, #16
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	e65c      	b.n	8002b28 <readGRAM+0x190>
				READ_16(ret);
 8002e6e:	f7ff f8b4 	bl	8001fda <PIN_HIGH>
 8002e72:	2110      	movs	r1, #16
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff f8ad 	bl	8001fd4 <PIN_LOW>
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7ff f8a9 	bl	8001fd4 <PIN_LOW>
 8002e82:	2110      	movs	r1, #16
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff f8a5 	bl	8001fd4 <PIN_LOW>
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff f8a1 	bl	8001fd4 <PIN_LOW>
 8002e92:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002e96:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002e9a:	68a1      	ldr	r1, [r4, #8]
 8002e9c:	68a8      	ldr	r0, [r5, #8]
 8002e9e:	f008 0801 	and.w	r8, r8, #1
 8002ea2:	68ab      	ldr	r3, [r5, #8]
 8002ea4:	f00e 0e02 	and.w	lr, lr, #2
 8002ea8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002eac:	ea48 0e0e 	orr.w	lr, r8, lr
 8002eb0:	f000 0008 	and.w	r0, r0, #8
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	68af      	ldr	r7, [r5, #8]
 8002eba:	ea4e 0e00 	orr.w	lr, lr, r0
 8002ebe:	ea4e 0e03 	orr.w	lr, lr, r3
 8002ec2:	f00c 0c20 	and.w	ip, ip, #32
 8002ec6:	ea4e 0e0c 	orr.w	lr, lr, ip
 8002eca:	68a2      	ldr	r2, [r4, #8]
 8002ecc:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8002ed0:	0b49      	lsrs	r1, r1, #13
 8002ed2:	ea4e 0707 	orr.w	r7, lr, r7
 8002ed6:	f001 0104 	and.w	r1, r1, #4
 8002eda:	4339      	orrs	r1, r7
 8002edc:	0097      	lsls	r7, r2, #2
 8002ede:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8002ee2:	430f      	orrs	r7, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	f7ff f877 	bl	8001fda <PIN_HIGH>
 8002eec:	2110      	movs	r1, #16
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff f873 	bl	8001fda <PIN_HIGH>
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff f86f 	bl	8001fda <PIN_HIGH>
 8002efc:	2110      	movs	r1, #16
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff f868 	bl	8001fd4 <PIN_LOW>
 8002f04:	2110      	movs	r1, #16
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff f864 	bl	8001fd4 <PIN_LOW>
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff f860 	bl	8001fd4 <PIN_LOW>
 8002f14:	2110      	movs	r1, #16
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff f85c 	bl	8001fd4 <PIN_LOW>
 8002f1c:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8002f20:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002f24:	68a1      	ldr	r1, [r4, #8]
 8002f26:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002f2a:	f00a 0a01 	and.w	sl, sl, #1
 8002f2e:	68a8      	ldr	r0, [r5, #8]
 8002f30:	f00c 0c02 	and.w	ip, ip, #2
 8002f34:	68ab      	ldr	r3, [r5, #8]
 8002f36:	f00e 0e08 	and.w	lr, lr, #8
 8002f3a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8002f3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002f42:	ea4c 0c0e 	orr.w	ip, ip, lr
 8002f46:	f000 0010 	and.w	r0, r0, #16
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	ea4c 0c00 	orr.w	ip, ip, r0
 8002f52:	ea4c 0c03 	orr.w	ip, ip, r3
 8002f56:	68a2      	ldr	r2, [r4, #8]
 8002f58:	f008 0840 	and.w	r8, r8, #64	; 0x40
 8002f5c:	ea4c 0c08 	orr.w	ip, ip, r8
 8002f60:	ea4f 3851 	mov.w	r8, r1, lsr #13
 8002f64:	f008 0804 	and.w	r8, r8, #4
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	ea4c 0808 	orr.w	r8, ip, r8
 8002f6e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002f72:	2110      	movs	r1, #16
 8002f74:	4620      	mov	r0, r4
 8002f76:	ea48 0802 	orr.w	r8, r8, r2
 8002f7a:	f7ff f82e 	bl	8001fda <PIN_HIGH>
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff f82a 	bl	8001fda <PIN_HIGH>
				if (_lcd_capable & READ_LOWHIGH)
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <readGRAM+0x618>)
				READ_16(ret);
 8002f88:	ea48 2007 	orr.w	r0, r8, r7, lsl #8
				if (_lcd_capable & READ_LOWHIGH)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	071f      	lsls	r7, r3, #28
					ret = (ret >> 8) | (ret << 8);
 8002f90:	bf42      	ittt	mi
 8002f92:	ea4f 2800 	movmi.w	r8, r0, lsl #8
 8002f96:	ea48 2010 	orrmi.w	r0, r8, r0, lsr #8
 8002f9a:	b280      	uxthmi	r0, r0
				if (_lcd_capable & READ_BGR)
 8002f9c:	0759      	lsls	r1, r3, #29
					ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002f9e:	bf41      	itttt	mi
 8002fa0:	f400 68fc 	andmi.w	r8, r0, #2016	; 0x7e0
 8002fa4:	ea48 28d0 	orrmi.w	r8, r8, r0, lsr #11
 8002fa8:	ea48 20c0 	orrmi.w	r0, r8, r0, lsl #11
 8002fac:	b280      	uxthmi	r0, r0
 8002fae:	e6f1      	b.n	8002d94 <readGRAM+0x3fc>
 8002fb0:	20000110 	.word	0x20000110

08002fb4 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) {
 8002fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	readGRAM(x, y, &color, 1, 1);
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f10d 020e 	add.w	r2, sp, #14
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f7ff fceb 	bl	8002998 <readGRAM>
}
 8002fc2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002fc6:	b005      	add	sp, #20
 8002fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08002fcc <drawPixel>:
void drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4614      	mov	r4, r2
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8002fd0:	1e02      	subs	r2, r0, #0
void drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002fd2:	460b      	mov	r3, r1
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8002fd4:	db1d      	blt.n	8003012 <drawPixel+0x46>
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	db1b      	blt.n	8003012 <drawPixel+0x46>
	return _width;
 8002fda:	490e      	ldr	r1, [pc, #56]	; (8003014 <drawPixel+0x48>)
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8002fdc:	8809      	ldrh	r1, [r1, #0]
 8002fde:	428a      	cmp	r2, r1
 8002fe0:	da17      	bge.n	8003012 <drawPixel+0x46>
	return _height;
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <drawPixel+0x4c>)
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8002fe4:	8809      	ldrh	r1, [r1, #0]
 8002fe6:	428b      	cmp	r3, r1
 8002fe8:	da13      	bge.n	8003012 <drawPixel+0x46>
	if (is555)
 8002fea:	490c      	ldr	r1, [pc, #48]	; (800301c <drawPixel+0x50>)
 8002fec:	7809      	ldrb	r1, [r1, #0]
 8002fee:	b129      	cbz	r1, 8002ffc <drawPixel+0x30>
	return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01)); //lose Green LSB, extend Blue LSB
 8002ff0:	0061      	lsls	r1, r4, #1
 8002ff2:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 8002ff6:	f024 043e 	bic.w	r4, r4, #62	; 0x3e
 8002ffa:	430c      	orrs	r4, r1
	setAddrWindow(x, y, x, y);
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7ff fc28 	bl	8002854 <setAddrWindow>
	writecmddata(cmd, dat);
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <drawPixel+0x54>)
 8003006:	4621      	mov	r1, r4
}
 8003008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writecmddata(cmd, dat);
 800300c:	8818      	ldrh	r0, [r3, #0]
 800300e:	f7fe bfe7 	b.w	8001fe0 <writecmddata>
 8003012:	bd10      	pop	{r4, pc}
 8003014:	20000012 	.word	0x20000012
 8003018:	20000010 	.word	0x20000010
 800301c:	200000b5 	.word	0x200000b5
 8003020:	2000010e 	.word	0x2000010e

08003024 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset) {
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <vertScroll+0x118>)
void vertScroll(int16_t top, int16_t scrollines, int16_t offset) {
 8003026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_lcd_ID == 0x9327) {
 8003028:	881e      	ldrh	r6, [r3, #0]
 800302a:	f249 3327 	movw	r3, #37671	; 0x9327
 800302e:	429e      	cmp	r6, r3
void vertScroll(int16_t top, int16_t scrollines, int16_t offset) {
 8003030:	4615      	mov	r5, r2
	if (_lcd_ID == 0x9327) {
 8003032:	d106      	bne.n	8003042 <vertScroll+0x1e>
		if (rotation == 2 || rotation == 3)
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <vertScroll+0x11c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	3b02      	subs	r3, #2
 800303a:	2b01      	cmp	r3, #1
			top += OFFSET_9327;
 800303c:	bf9c      	itt	ls
 800303e:	3020      	addls	r0, #32
 8003040:	b200      	sxthls	r0, r0
	}
#endif
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
	int16_t vsp;
	int16_t sea = top;
	if (_lcd_ID == 0x9327)
 8003042:	f249 3727 	movw	r7, #37671	; 0x9327
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003046:	b284      	uxth	r4, r0
 8003048:	b28a      	uxth	r2, r1
 800304a:	18a3      	adds	r3, r4, r2
	if (_lcd_ID == 0x9327)
 800304c:	42be      	cmp	r6, r7
 800304e:	b29b      	uxth	r3, r3
		bfa += 32;
	if (offset <= -scrollines || offset >= scrollines)
 8003050:	f1c1 0700 	rsb	r7, r1, #0
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003054:	bf14      	ite	ne
 8003056:	f5c3 73f0 	rsbne	r3, r3, #480	; 0x1e0
		bfa += 32;
 800305a:	f5c3 7300 	rsbeq	r3, r3, #512	; 0x200
	if (offset <= -scrollines || offset >= scrollines)
 800305e:	42bd      	cmp	r5, r7
		bfa += 32;
 8003060:	b29b      	uxth	r3, r3
	if (offset <= -scrollines || offset >= scrollines)
 8003062:	dd38      	ble.n	80030d6 <vertScroll+0xb2>
		offset = 0; //valid scroll
 8003064:	42a9      	cmp	r1, r5
 8003066:	bfd8      	it	le
 8003068:	2500      	movle	r5, #0
	vsp = top + offset; // vertical start position
 800306a:	442c      	add	r4, r5
	if (offset < 0)
		vsp += scrollines;          //keep in unsigned range
	sea = top + scrollines - 1;
	if (_lcd_capable & MIPI_DCS_REV1) {
 800306c:	4f35      	ldr	r7, [pc, #212]	; (8003144 <vertScroll+0x120>)
	if (offset < 0)
 800306e:	2d00      	cmp	r5, #0
	vsp = top + offset; // vertical start position
 8003070:	b2a4      	uxth	r4, r4
		vsp += scrollines;          //keep in unsigned range
 8003072:	bfb8      	it	lt
 8003074:	18a4      	addlt	r4, r4, r2
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003076:	883a      	ldrh	r2, [r7, #0]
		vsp += scrollines;          //keep in unsigned range
 8003078:	bfb8      	it	lt
 800307a:	b2a4      	uxthlt	r4, r4
	if (_lcd_capable & MIPI_DCS_REV1) {
 800307c:	07d2      	lsls	r2, r2, #31
 800307e:	d52c      	bpl.n	80030da <vertScroll+0xb6>
		uint8_t d[6];           // for multi-byte parameters
		d[0] = top >> 8;        //TFA
 8003080:	1202      	asrs	r2, r0, #8
 8003082:	f88d 2000 	strb.w	r2, [sp]
		d[1] = top;
		d[2] = scrollines >> 8; //VSA
 8003086:	120a      	asrs	r2, r1, #8
 8003088:	f88d 2002 	strb.w	r2, [sp, #2]
		d[3] = scrollines;
		d[4] = bfa >> 8;        //BFA
 800308c:	f343 2207 	sbfx	r2, r3, #8, #8
		d[1] = top;
 8003090:	f88d 0001 	strb.w	r0, [sp, #1]
		d[3] = scrollines;
 8003094:	f88d 1003 	strb.w	r1, [sp, #3]
		d[4] = bfa >> 8;        //BFA
 8003098:	f88d 2004 	strb.w	r2, [sp, #4]
		d[5] = bfa;
		WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 800309c:	2106      	movs	r1, #6
 800309e:	466a      	mov	r2, sp
 80030a0:	2033      	movs	r0, #51	; 0x33
		d[5] = bfa;
 80030a2:	f88d 3005 	strb.w	r3, [sp, #5]
		WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80030a6:	f7ff f845 	bl	8002134 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80030aa:	f344 2307 	sbfx	r3, r4, #8, #8
		d[1] = vsp;
		WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80030ae:	466a      	mov	r2, sp
 80030b0:	2102      	movs	r1, #2
 80030b2:	2037      	movs	r0, #55	; 0x37
		d[0] = vsp >> 8;        //VSP
 80030b4:	f88d 3000 	strb.w	r3, [sp]
		d[1] = vsp;
 80030b8:	f88d 4001 	strb.w	r4, [sp, #1]
		WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80030bc:	f7ff f83a 	bl	8002134 <WriteCmdParamN>
		if (is8347) {
			d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 80030c0:	b93d      	cbnz	r5, 80030d2 <vertScroll+0xae>
 80030c2:	883b      	ldrh	r3, [r7, #0]
 80030c4:	07db      	lsls	r3, r3, #31
 80030c6:	d504      	bpl.n	80030d2 <vertScroll+0xae>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 80030c8:	462a      	mov	r2, r5
 80030ca:	4629      	mov	r1, r5
 80030cc:	2013      	movs	r0, #19
 80030ce:	f7ff f831 	bl	8002134 <WriteCmdParamN>
		// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
		WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
		WriteCmdData(0x6A, vsp);        //VL#
		break;
	}
}
 80030d2:	b003      	add	sp, #12
 80030d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		offset = 0; //valid scroll
 80030d6:	2500      	movs	r5, #0
 80030d8:	e7c7      	b.n	800306a <vertScroll+0x46>
	switch (_lcd_ID) {
 80030da:	f247 7393 	movw	r3, #30611	; 0x7793
 80030de:	429e      	cmp	r6, r3
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <vertScroll+0x124>)
 80030e2:	d015      	beq.n	8003110 <vertScroll+0xec>
 80030e4:	d80c      	bhi.n	8003100 <vertScroll+0xdc>
 80030e6:	f245 4220 	movw	r2, #21536	; 0x5420
 80030ea:	4296      	cmp	r6, r2
 80030ec:	d010      	beq.n	8003110 <vertScroll+0xec>
 80030ee:	f247 7283 	movw	r2, #30595	; 0x7783
 80030f2:	4296      	cmp	r6, r2
 80030f4:	d01a      	beq.n	800312c <vertScroll+0x108>
		WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80030f6:	8819      	ldrh	r1, [r3, #0]
 80030f8:	f041 0102 	orr.w	r1, r1, #2
	writecmddata(cmd, dat);
 80030fc:	b289      	uxth	r1, r1
 80030fe:	e016      	b.n	800312e <vertScroll+0x10a>
	switch (_lcd_ID) {
 8003100:	f249 3226 	movw	r2, #37670	; 0x9326
 8003104:	4296      	cmp	r6, r2
 8003106:	d003      	beq.n	8003110 <vertScroll+0xec>
 8003108:	f24b 5209 	movw	r2, #46345	; 0xb509
 800310c:	4296      	cmp	r6, r2
 800310e:	d1f2      	bne.n	80030f6 <vertScroll+0xd2>
		WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003110:	8819      	ldrh	r1, [r3, #0]
	writecmddata(cmd, dat);
 8003112:	f240 4001 	movw	r0, #1025	; 0x401
		WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003116:	f041 0102 	orr.w	r1, r1, #2
	writecmddata(cmd, dat);
 800311a:	b289      	uxth	r1, r1
 800311c:	f7fe ff60 	bl	8001fe0 <writecmddata>
 8003120:	4621      	mov	r1, r4
 8003122:	f240 4004 	movw	r0, #1028	; 0x404
 8003126:	f7fe ff5b 	bl	8001fe0 <writecmddata>
 800312a:	e7d2      	b.n	80030d2 <vertScroll+0xae>
 800312c:	8819      	ldrh	r1, [r3, #0]
 800312e:	2061      	movs	r0, #97	; 0x61
 8003130:	f7fe ff56 	bl	8001fe0 <writecmddata>
 8003134:	4621      	mov	r1, r4
 8003136:	206a      	movs	r0, #106	; 0x6a
 8003138:	e7f5      	b.n	8003126 <vertScroll+0x102>
 800313a:	bf00      	nop
 800313c:	2000011e 	.word	0x2000011e
 8003140:	200000b6 	.word	0x200000b6
 8003144:	20000110 	.word	0x20000110
 8003148:	20000114 	.word	0x20000114

0800314c <setRotation>:
	rotation = r & 3; // just perform the operation ourselves on the protected variables
 800314c:	f000 0303 	and.w	r3, r0, #3
 8003150:	f000 0001 	and.w	r0, r0, #1
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 8003154:	2800      	cmp	r0, #0
 8003156:	bf14      	ite	ne
 8003158:	f44f 71f0 	movne.w	r1, #480	; 0x1e0
 800315c:	f44f 71a0 	moveq.w	r1, #320	; 0x140
	rotation = r & 3; // just perform the operation ourselves on the protected variables
 8003160:	4ab4      	ldr	r2, [pc, #720]	; (8003434 <setRotation+0x2e8>)
void setRotation(uint8_t r) {
 8003162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rotation = r & 3; // just perform the operation ourselves on the protected variables
 8003166:	7013      	strb	r3, [r2, #0]
 8003168:	4693      	mov	fp, r2
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 800316a:	4ab3      	ldr	r2, [pc, #716]	; (8003438 <setRotation+0x2ec>)
void setRotation(uint8_t r) {
 800316c:	b085      	sub	sp, #20
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 800316e:	8011      	strh	r1, [r2, #0]
	_height = (rotation & 1) ? WIDTH : HEIGHT;
 8003170:	bf14      	ite	ne
 8003172:	f44f 71a0 	movne.w	r1, #320	; 0x140
 8003176:	f44f 71f0 	moveq.w	r1, #480	; 0x1e0
 800317a:	9200      	str	r2, [sp, #0]
 800317c:	4aaf      	ldr	r2, [pc, #700]	; (800343c <setRotation+0x2f0>)
	switch (rotation) {
 800317e:	2b02      	cmp	r3, #2
	_height = (rotation & 1) ? WIDTH : HEIGHT;
 8003180:	8011      	strh	r1, [r2, #0]
 8003182:	4691      	mov	r9, r2
	switch (rotation) {
 8003184:	f000 809d 	beq.w	80032c2 <setRotation+0x176>
 8003188:	2b03      	cmp	r3, #3
 800318a:	f000 809c 	beq.w	80032c6 <setRotation+0x17a>
 800318e:	2b01      	cmp	r3, #1
		val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8003190:	bf14      	ite	ne
 8003192:	2348      	movne	r3, #72	; 0x48
		val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8003194:	2328      	moveq	r3, #40	; 0x28
	if (_lcd_capable & INVERT_GS)
 8003196:	4aaa      	ldr	r2, [pc, #680]	; (8003440 <setRotation+0x2f4>)
		val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8003198:	f88d 300b 	strb.w	r3, [sp, #11]
	if (_lcd_capable & INVERT_GS)
 800319c:	8813      	ldrh	r3, [r2, #0]
 800319e:	4692      	mov	sl, r2
 80031a0:	f413 7f80 	tst.w	r3, #256	; 0x100
		val ^= 0x80;
 80031a4:	bf18      	it	ne
 80031a6:	f89d 200b 	ldrbne.w	r2, [sp, #11]
 80031aa:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8003464 <setRotation+0x318>
 80031ae:	bf1c      	itt	ne
 80031b0:	f082 0280 	eorne.w	r2, r2, #128	; 0x80
 80031b4:	f88d 200b 	strbne.w	r2, [sp, #11]
	if (_lcd_capable & INVERT_SS)
 80031b8:	059d      	lsls	r5, r3, #22
		val ^= 0x40;
 80031ba:	bf48      	it	mi
 80031bc:	f89d 200b 	ldrbmi.w	r2, [sp, #11]
 80031c0:	4fa0      	ldr	r7, [pc, #640]	; (8003444 <setRotation+0x2f8>)
 80031c2:	bf44      	itt	mi
 80031c4:	f082 0240 	eormi.w	r2, r2, #64	; 0x40
 80031c8:	f88d 200b 	strbmi.w	r2, [sp, #11]
	if (_lcd_capable & INVERT_RGB)
 80031cc:	051c      	lsls	r4, r3, #20
		val ^= 0x08;
 80031ce:	bf48      	it	mi
 80031d0:	f89d 200b 	ldrbmi.w	r2, [sp, #11]
 80031d4:	4e9c      	ldr	r6, [pc, #624]	; (8003448 <setRotation+0x2fc>)
 80031d6:	bf44      	itt	mi
 80031d8:	f082 0208 	eormi.w	r2, r2, #8
 80031dc:	f88d 200b 	strbmi.w	r2, [sp, #11]
 80031e0:	4a9a      	ldr	r2, [pc, #616]	; (800344c <setRotation+0x300>)
	if (_lcd_capable & MIPI_DCS_REV1) {
 80031e2:	f013 0f01 	tst.w	r3, #1
 80031e6:	4c9a      	ldr	r4, [pc, #616]	; (8003450 <setRotation+0x304>)
 80031e8:	4b9a      	ldr	r3, [pc, #616]	; (8003454 <setRotation+0x308>)
 80031ea:	4d9b      	ldr	r5, [pc, #620]	; (8003458 <setRotation+0x30c>)
		if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80031ec:	8812      	ldrh	r2, [r2, #0]
	if (_lcd_capable & MIPI_DCS_REV1) {
 80031ee:	f000 80a7 	beq.w	8003340 <setRotation+0x1f4>
		if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80031f2:	f646 0114 	movw	r1, #26644	; 0x6814
 80031f6:	428a      	cmp	r2, r1
 80031f8:	d167      	bne.n	80032ca <setRotation+0x17e>
			GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80031fa:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003204:	bf14      	ite	ne
 8003206:	2240      	movne	r2, #64	; 0x40
 8003208:	2200      	moveq	r2, #0
			SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 800320a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800320e:	bf14      	ite	ne
 8003210:	2020      	movne	r0, #32
 8003212:	2000      	moveq	r0, #0
			d[1] = GS | SS_v | 0x02;      //MY, MX
 8003214:	f042 0202 	orr.w	r2, r2, #2
 8003218:	4302      	orrs	r2, r0
			val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800321a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800321e:	f88d 100b 	strb.w	r1, [sp, #11]
			d[1] = GS | SS_v | 0x02;      //MY, MX
 8003222:	f88d 200d 	strb.w	r2, [sp, #13]
			d[0] = 0;
 8003226:	2100      	movs	r1, #0
			d[2] = 0x3B;
 8003228:	223b      	movs	r2, #59	; 0x3b
			d[0] = 0;
 800322a:	f88d 100c 	strb.w	r1, [sp, #12]
			d[2] = 0x3B;
 800322e:	f88d 200e 	strb.w	r2, [sp, #14]
			WriteCmdParamN(0xB6, 3, d);
 8003232:	2103      	movs	r1, #3
 8003234:	aa03      	add	r2, sp, #12
 8003236:	20b6      	movs	r0, #182	; 0xb6
 8003238:	f7fe ff7c 	bl	8002134 <WriteCmdParamN>
			goto common_MC;
 800323c:	9b01      	ldr	r3, [sp, #4]
		common_MC: _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP =
 800323e:	202c      	movs	r0, #44	; 0x2c
 8003240:	212a      	movs	r1, #42	; 0x2a
 8003242:	222b      	movs	r2, #43	; 0x2b
 8003244:	8018      	strh	r0, [r3, #0]
				0x2B, _EP = 0x2B;
 8003246:	4b85      	ldr	r3, [pc, #532]	; (800345c <setRotation+0x310>)
		common_MC: _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP =
 8003248:	f8a8 1000 	strh.w	r1, [r8]
				0x2B, _EP = 0x2B;
 800324c:	801a      	strh	r2, [r3, #0]
		common_MC: _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP =
 800324e:	803a      	strh	r2, [r7, #0]
 8003250:	8031      	strh	r1, [r6, #0]
 8003252:	8021      	strh	r1, [r4, #0]
 8003254:	802a      	strh	r2, [r5, #0]
		common_BGR: WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003256:	2101      	movs	r1, #1
 8003258:	f10d 020b 	add.w	r2, sp, #11
 800325c:	2036      	movs	r0, #54	; 0x36
 800325e:	f7fe ff69 	bl	8002134 <WriteCmdParamN>
		_lcd_madctl = val;
 8003262:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003266:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <setRotation+0x314>)
 8003268:	801a      	strh	r2, [r3, #0]
	if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 800326a:	f89b 3000 	ldrb.w	r3, [fp]
 800326e:	07da      	lsls	r2, r3, #31
 8003270:	d512      	bpl.n	8003298 <setRotation+0x14c>
 8003272:	f8ba 3000 	ldrh.w	r3, [sl]
 8003276:	055b      	lsls	r3, r3, #21
 8003278:	d40e      	bmi.n	8003298 <setRotation+0x14c>
		x = _MC, _MC = _MP, _MP = x;
 800327a:	f8b8 3000 	ldrh.w	r3, [r8]
 800327e:	883a      	ldrh	r2, [r7, #0]
 8003280:	803b      	strh	r3, [r7, #0]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003282:	8833      	ldrh	r3, [r6, #0]
		x = _MC, _MC = _MP, _MP = x;
 8003284:	f8a8 2000 	strh.w	r2, [r8]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003288:	882a      	ldrh	r2, [r5, #0]
 800328a:	802b      	strh	r3, [r5, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 800328c:	4b73      	ldr	r3, [pc, #460]	; (800345c <setRotation+0x310>)
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800328e:	8032      	strh	r2, [r6, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003290:	8819      	ldrh	r1, [r3, #0]
 8003292:	8822      	ldrh	r2, [r4, #0]
 8003294:	8021      	strh	r1, [r4, #0]
 8003296:	801a      	strh	r2, [r3, #0]
	setAddrWindow(0, 0, width() - 1, height() - 1);
 8003298:	2100      	movs	r1, #0
 800329a:	9a00      	ldr	r2, [sp, #0]
 800329c:	f8b9 3000 	ldrh.w	r3, [r9]
 80032a0:	8812      	ldrh	r2, [r2, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4608      	mov	r0, r1
 80032aa:	b212      	sxth	r2, r2
 80032ac:	f7ff fad2 	bl	8002854 <setAddrWindow>
	vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80032b0:	2200      	movs	r2, #0
 80032b2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7ff feb4 	bl	8003024 <vertScroll>
}
 80032bc:	b005      	add	sp, #20
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80032c2:	2398      	movs	r3, #152	; 0x98
 80032c4:	e767      	b.n	8003196 <setRotation+0x4a>
		val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80032c6:	23f8      	movs	r3, #248	; 0xf8
 80032c8:	e765      	b.n	8003196 <setRotation+0x4a>
		} else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481
 80032ca:	f641 1163 	movw	r1, #6499	; 0x1963
 80032ce:	428a      	cmp	r2, r1
 80032d0:	d007      	beq.n	80032e2 <setRotation+0x196>
 80032d2:	f249 4181 	movw	r1, #38017	; 0x9481
 80032d6:	428a      	cmp	r2, r1
 80032d8:	d003      	beq.n	80032e2 <setRotation+0x196>
				|| _lcd_ID == 0x1511) {
 80032da:	f241 5111 	movw	r1, #5393	; 0x1511
 80032de:	428a      	cmp	r2, r1
 80032e0:	d1ad      	bne.n	800323e <setRotation+0xf2>
			if (val & 0x80)
 80032e2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80032e6:	0608      	lsls	r0, r1, #24
				val |= 0x01;    //GS
 80032e8:	bf44      	itt	mi
 80032ea:	f041 0101 	orrmi.w	r1, r1, #1
 80032ee:	f88d 100b 	strbmi.w	r1, [sp, #11]
			if ((val & 0x40))
 80032f2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80032f6:	0648      	lsls	r0, r1, #25
				val |= 0x02;    //SS
 80032f8:	bf44      	itt	mi
 80032fa:	f041 0102 	orrmi.w	r1, r1, #2
 80032fe:	f88d 100b 	strbmi.w	r1, [sp, #11]
			if (_lcd_ID == 0x1963)
 8003302:	f641 1163 	movw	r1, #6499	; 0x1963
 8003306:	428a      	cmp	r2, r1
 8003308:	d106      	bne.n	8003318 <setRotation+0x1cc>
				val &= ~0xC0;
 800330a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800330e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
				val |= 0xC0;    //force penguin 180 rotation
 8003312:	f88d 200b 	strb.w	r2, [sp, #11]
 8003316:	e792      	b.n	800323e <setRotation+0xf2>
			if (_lcd_ID == 0x9481)
 8003318:	f249 4181 	movw	r1, #38017	; 0x9481
 800331c:	428a      	cmp	r2, r1
 800331e:	d104      	bne.n	800332a <setRotation+0x1de>
				val &= ~0xD0;
 8003320:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003324:	f002 022f 	and.w	r2, r2, #47	; 0x2f
 8003328:	e7f3      	b.n	8003312 <setRotation+0x1c6>
			if (_lcd_ID == 0x1511) {
 800332a:	f241 5111 	movw	r1, #5393	; 0x1511
 800332e:	428a      	cmp	r2, r1
 8003330:	d185      	bne.n	800323e <setRotation+0xf2>
				val &= ~0x10;   //remove ML
 8003332:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003336:	f022 0210 	bic.w	r2, r2, #16
				val |= 0xC0;    //force penguin 180 rotation
 800333a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800333e:	e7e8      	b.n	8003312 <setRotation+0x1c6>
		switch (_lcd_ID) {
 8003340:	f247 7193 	movw	r1, #30611	; 0x7793
 8003344:	428a      	cmp	r2, r1
 8003346:	4945      	ldr	r1, [pc, #276]	; (800345c <setRotation+0x310>)
 8003348:	d004      	beq.n	8003354 <setRotation+0x208>
 800334a:	d84f      	bhi.n	80033ec <setRotation+0x2a0>
 800334c:	f245 4020 	movw	r0, #21536	; 0x5420
 8003350:	4282      	cmp	r2, r0
 8003352:	d155      	bne.n	8003400 <setRotation+0x2b4>
			_MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP =
 8003354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003358:	f8a8 0000 	strh.w	r0, [r8]
 800335c:	f240 2001 	movw	r0, #513	; 0x201
 8003360:	8038      	strh	r0, [r7, #0]
 8003362:	f240 2002 	movw	r0, #514	; 0x202
 8003366:	8018      	strh	r0, [r3, #0]
 8003368:	f44f 7304 	mov.w	r3, #528	; 0x210
 800336c:	8033      	strh	r3, [r6, #0]
 800336e:	f240 2311 	movw	r3, #529	; 0x211
 8003372:	8023      	strh	r3, [r4, #0]
 8003374:	f240 2312 	movw	r3, #530	; 0x212
 8003378:	802b      	strh	r3, [r5, #0]
					0x212, _EP = 0x213;
 800337a:	f240 2313 	movw	r3, #531	; 0x213
 800337e:	800b      	strh	r3, [r1, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8003380:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8003384:	2b00      	cmp	r3, #0
			if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420)
 8003386:	f249 3326 	movw	r3, #37670	; 0x9326
			GS = (val & 0x80) ? (1 << 15) : 0;
 800338a:	bfb4      	ite	lt
 800338c:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
 8003390:	2100      	movge	r1, #0
			if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420)
 8003392:	429a      	cmp	r2, r3
 8003394:	d031      	beq.n	80033fa <setRotation+0x2ae>
			NL = ((432 / 8) - 1) << 9;
 8003396:	f245 4320 	movw	r3, #21536	; 0x5420
 800339a:	429a      	cmp	r2, r3
 800339c:	bf0c      	ite	eq
 800339e:	f44f 5254 	moveq.w	r2, #13568	; 0x3500
 80033a2:	f44f 42d4 	movne.w	r2, #27136	; 0x6a00
	writecmddata(cmd, dat);
 80033a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80033aa:	4311      	orrs	r1, r2
 80033ac:	f7fe fe18 	bl	8001fe0 <writecmddata>
			common_SS: SS_v = (val & 0x40) ? (1 << 8) : 0;
 80033b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
	writecmddata(cmd, dat);
 80033b4:	2001      	movs	r0, #1
			common_SS: SS_v = (val & 0x40) ? (1 << 8) : 0;
 80033b6:	f013 0f40 	tst.w	r3, #64	; 0x40
	writecmddata(cmd, dat);
 80033ba:	bf14      	ite	ne
 80033bc:	f44f 7180 	movne.w	r1, #256	; 0x100
 80033c0:	2100      	moveq	r1, #0
 80033c2:	f7fe fe0d 	bl	8001fe0 <writecmddata>
			common_ORG: ORG = (val & 0x20) ? (1 << 3) : 0;
 80033c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80033ca:	f013 0f20 	tst.w	r3, #32
 80033ce:	bf14      	ite	ne
 80033d0:	2108      	movne	r1, #8
 80033d2:	2100      	moveq	r1, #0
			if (val & 0x08)
 80033d4:	0718      	lsls	r0, r3, #28
				ORG |= 0x1000;  //BGR
 80033d6:	bf48      	it	mi
 80033d8:	f441 5180 	orrmi.w	r1, r1, #4096	; 0x1000
			_lcd_madctl = ORG | 0x0030;
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <setRotation+0x314>)
 80033de:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	writecmddata(cmd, dat);
 80033e2:	2003      	movs	r0, #3
			_lcd_madctl = ORG | 0x0030;
 80033e4:	8019      	strh	r1, [r3, #0]
	writecmddata(cmd, dat);
 80033e6:	f7fe fdfb 	bl	8001fe0 <writecmddata>
 80033ea:	e73e      	b.n	800326a <setRotation+0x11e>
		switch (_lcd_ID) {
 80033ec:	f249 3026 	movw	r0, #37670	; 0x9326
 80033f0:	4282      	cmp	r2, r0
 80033f2:	d0af      	beq.n	8003354 <setRotation+0x208>
 80033f4:	f24b 5009 	movw	r0, #46345	; 0xb509
 80033f8:	e7aa      	b.n	8003350 <setRotation+0x204>
				NL >>= 1;
 80033fa:	f44f 5254 	mov.w	r2, #13568	; 0x3500
 80033fe:	e7d2      	b.n	80033a6 <setRotation+0x25a>
			_MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP =
 8003400:	2220      	movs	r2, #32
 8003402:	f8a8 2000 	strh.w	r2, [r8]
 8003406:	2221      	movs	r2, #33	; 0x21
 8003408:	803a      	strh	r2, [r7, #0]
 800340a:	2222      	movs	r2, #34	; 0x22
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	2350      	movs	r3, #80	; 0x50
 8003410:	8033      	strh	r3, [r6, #0]
 8003412:	2351      	movs	r3, #81	; 0x51
 8003414:	8023      	strh	r3, [r4, #0]
 8003416:	2352      	movs	r3, #82	; 0x52
 8003418:	802b      	strh	r3, [r5, #0]
					0x52, _EP = 0x53;
 800341a:	2353      	movs	r3, #83	; 0x53
 800341c:	800b      	strh	r3, [r1, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 800341e:	f99d 100b 	ldrsb.w	r1, [sp, #11]
	writecmddata(cmd, dat);
 8003422:	2060      	movs	r0, #96	; 0x60
 8003424:	2900      	cmp	r1, #0
 8003426:	bfb4      	ite	lt
 8003428:	f44f 4127 	movlt.w	r1, #42752	; 0xa700
 800342c:	f44f 511c 	movge.w	r1, #9984	; 0x2700
 8003430:	e7bc      	b.n	80033ac <setRotation+0x260>
 8003432:	bf00      	nop
 8003434:	200000b6 	.word	0x200000b6
 8003438:	20000012 	.word	0x20000012
 800343c:	20000010 	.word	0x20000010
 8003440:	20000110 	.word	0x20000110
 8003444:	20000116 	.word	0x20000116
 8003448:	2000011a 	.word	0x2000011a
 800344c:	2000011e 	.word	0x2000011e
 8003450:	20000122 	.word	0x20000122
 8003454:	2000010e 	.word	0x2000010e
 8003458:	20000112 	.word	0x20000112
 800345c:	2000011c 	.word	0x2000011c
 8003460:	20000124 	.word	0x20000124
 8003464:	20000118 	.word	0x20000118

08003468 <invertDisplay>:
	fillRect(0, 0, _width, _height, color);
}

void invertDisplay(uint8_t i) {
	uint8_t val;
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <invertDisplay+0x7c>)
void invertDisplay(uint8_t i) {
 800346a:	b430      	push	{r4, r5}
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800346c:	881c      	ldrh	r4, [r3, #0]
 800346e:	4d1e      	ldr	r5, [pc, #120]	; (80034e8 <invertDisplay+0x80>)
 8003470:	f3c4 3300 	ubfx	r3, r4, #12, #1
 8003474:	ea83 0200 	eor.w	r2, r3, r0
 8003478:	b291      	uxth	r1, r2
	if (_lcd_capable & MIPI_DCS_REV1) {
 800347a:	07e4      	lsls	r4, r4, #31
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800347c:	8029      	strh	r1, [r5, #0]
	if (_lcd_capable & MIPI_DCS_REV1) {
 800347e:	d508      	bpl.n	8003492 <invertDisplay+0x2a>
		break;
	default:
		WriteCmdData(0x61, _lcd_rev);
		break;
	}
}
 8003480:	bc30      	pop	{r4, r5}
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003482:	2200      	movs	r2, #0
 8003484:	4283      	cmp	r3, r0
 8003486:	bf14      	ite	ne
 8003488:	2021      	movne	r0, #33	; 0x21
 800348a:	2020      	moveq	r0, #32
 800348c:	4611      	mov	r1, r2
 800348e:	f7fe be51 	b.w	8002134 <WriteCmdParamN>
	switch (_lcd_ID) {
 8003492:	f247 7093 	movw	r0, #30611	; 0x7793
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <invertDisplay+0x84>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	4283      	cmp	r3, r0
 800349c:	d007      	beq.n	80034ae <invertDisplay+0x46>
 800349e:	d80b      	bhi.n	80034b8 <invertDisplay+0x50>
 80034a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80034a4:	d014      	beq.n	80034d0 <invertDisplay+0x68>
 80034a6:	f245 4220 	movw	r2, #21536	; 0x5420
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d117      	bne.n	80034de <invertDisplay+0x76>
	writecmddata(cmd, dat);
 80034ae:	f041 0102 	orr.w	r1, r1, #2
 80034b2:	f240 4001 	movw	r0, #1025	; 0x401
 80034b6:	e00f      	b.n	80034d8 <invertDisplay+0x70>
	switch (_lcd_ID) {
 80034b8:	f249 3026 	movw	r0, #37670	; 0x9326
 80034bc:	4283      	cmp	r3, r0
 80034be:	d0f6      	beq.n	80034ae <invertDisplay+0x46>
 80034c0:	f24b 5009 	movw	r0, #46345	; 0xb509
 80034c4:	4283      	cmp	r3, r0
 80034c6:	d0f2      	beq.n	80034ae <invertDisplay+0x46>
 80034c8:	f249 2025 	movw	r0, #37413	; 0x9225
 80034cc:	4283      	cmp	r3, r0
 80034ce:	d106      	bne.n	80034de <invertDisplay+0x76>
	writecmddata(cmd, dat);
 80034d0:	2007      	movs	r0, #7
		WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 80034d2:	0091      	lsls	r1, r2, #2
	writecmddata(cmd, dat);
 80034d4:	f041 0113 	orr.w	r1, r1, #19
}
 80034d8:	bc30      	pop	{r4, r5}
	writecmddata(cmd, dat);
 80034da:	f7fe bd81 	b.w	8001fe0 <writecmddata>
 80034de:	2061      	movs	r0, #97	; 0x61
 80034e0:	e7fa      	b.n	80034d8 <invertDisplay+0x70>
 80034e2:	bf00      	nop
 80034e4:	20000110 	.word	0x20000110
 80034e8:	20000114 	.word	0x20000114
 80034ec:	2000011e 	.word	0x2000011e

080034f0 <tft_init>:
void tft_init(uint16_t ID) {
 80034f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	_lcd_xor = 0;
 80034f2:	2200      	movs	r2, #0
 80034f4:	4bc9      	ldr	r3, [pc, #804]	; (800381c <tft_init+0x32c>)
	switch (_lcd_ID = ID) {
 80034f6:	4fca      	ldr	r7, [pc, #808]	; (8003820 <tft_init+0x330>)
	_lcd_xor = 0;
 80034f8:	801a      	strh	r2, [r3, #0]
	switch (_lcd_ID = ID) {
 80034fa:	f249 3302 	movw	r3, #37634	; 0x9302
 80034fe:	4298      	cmp	r0, r3
 8003500:	8038      	strh	r0, [r7, #0]
 8003502:	4cc8      	ldr	r4, [pc, #800]	; (8003824 <tft_init+0x334>)
 8003504:	f000 81d2 	beq.w	80038ac <tft_init+0x3bc>
 8003508:	f200 8089 	bhi.w	800361e <tft_init+0x12e>
 800350c:	f242 0353 	movw	r3, #8275	; 0x2053
 8003510:	4298      	cmp	r0, r3
 8003512:	f000 81c5 	beq.w	80038a0 <tft_init+0x3b0>
 8003516:	d832      	bhi.n	800357e <tft_init+0x8e>
 8003518:	f241 5311 	movw	r3, #5393	; 0x1511
 800351c:	4298      	cmp	r0, r3
 800351e:	f000 80fd 	beq.w	800371c <tft_init+0x22c>
 8003522:	d80e      	bhi.n	8003542 <tft_init+0x52>
 8003524:	2899      	cmp	r0, #153	; 0x99
 8003526:	f000 815c 	beq.w	80037e2 <tft_init+0x2f2>
 800352a:	f241 5305 	movw	r3, #5381	; 0x1505
 800352e:	4298      	cmp	r0, r3
 8003530:	f000 8093 	beq.w	800365a <tft_init+0x16a>
 8003534:	2801      	cmp	r0, #1
 8003536:	f000 8162 	beq.w	80037fe <tft_init+0x30e>
		*p16 = 0;       //error value for width
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	4bba      	ldr	r3, [pc, #744]	; (8003828 <tft_init+0x338>)
 8003540:	e1e8      	b.n	8003914 <tft_init+0x424>
	switch (_lcd_ID = ID) {
 8003542:	f241 5326 	movw	r3, #5414	; 0x1526
 8003546:	4298      	cmp	r0, r3
 8003548:	f000 8131 	beq.w	80037ae <tft_init+0x2be>
 800354c:	d808      	bhi.n	8003560 <tft_init+0x70>
 800354e:	f5b0 5fa9 	cmp.w	r0, #5408	; 0x1520
 8003552:	d1f2      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003554:	f240 4313 	movw	r3, #1043	; 0x413
		table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8003558:	2606      	movs	r6, #6
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800355a:	8023      	strh	r3, [r4, #0]
		table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 800355c:	4db3      	ldr	r5, [pc, #716]	; (800382c <tft_init+0x33c>)
		break;
 800355e:	e0e8      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 8003560:	f241 5381 	movw	r3, #5505	; 0x1581
 8003564:	4298      	cmp	r0, r3
 8003566:	f000 81aa 	beq.w	80038be <tft_init+0x3ce>
 800356a:	f241 6302 	movw	r3, #5634	; 0x1602
 800356e:	4298      	cmp	r0, r3
 8003570:	d1e3      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8003572:	f240 4303 	movw	r3, #1027	; 0x403
		table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8003576:	2606      	movs	r6, #6
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8003578:	8023      	strh	r3, [r4, #0]
		table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800357a:	4dad      	ldr	r5, [pc, #692]	; (8003830 <tft_init+0x340>)
		break;
 800357c:	e0d9      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 800357e:	f247 7393 	movw	r3, #30611	; 0x7793
 8003582:	4298      	cmp	r0, r3
 8003584:	f000 81bc 	beq.w	8003900 <tft_init+0x410>
 8003588:	d825      	bhi.n	80035d6 <tft_init+0xe6>
 800358a:	f245 4308 	movw	r3, #21512	; 0x5408
 800358e:	4298      	cmp	r0, r3
 8003590:	d063      	beq.n	800365a <tft_init+0x16a>
 8003592:	d811      	bhi.n	80035b8 <tft_init+0xc8>
 8003594:	f245 3310 	movw	r3, #21264	; 0x5310
 8003598:	4298      	cmp	r0, r3
 800359a:	d1ce      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS
 800359c:	f640 6313 	movw	r3, #3603	; 0xe13
		*p16 = 480;
 80035a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS
 80035a4:	8023      	strh	r3, [r4, #0]
		*p16 = 480;
 80035a6:	4ba3      	ldr	r3, [pc, #652]	; (8003834 <tft_init+0x344>)
		table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80035a8:	2602      	movs	r6, #2
		*p16 = 480;
 80035aa:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 80035ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035b0:	4b9d      	ldr	r3, [pc, #628]	; (8003828 <tft_init+0x338>)
		table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80035b2:	4da1      	ldr	r5, [pc, #644]	; (8003838 <tft_init+0x348>)
		*p16 = 320;
 80035b4:	801a      	strh	r2, [r3, #0]
		break;
 80035b6:	e0bc      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 80035b8:	f646 0309 	movw	r3, #26633	; 0x6809
 80035bc:	4298      	cmp	r0, r3
 80035be:	f000 8127 	beq.w	8003810 <tft_init+0x320>
 80035c2:	f247 7389 	movw	r3, #30601	; 0x7789
 80035c6:	4298      	cmp	r0, r3
 80035c8:	d1b7      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80035ca:	f240 4313 	movw	r3, #1043	; 0x413
		table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80035ce:	2641      	movs	r6, #65	; 0x41
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80035d0:	8023      	strh	r3, [r4, #0]
		table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80035d2:	4d9a      	ldr	r5, [pc, #616]	; (800383c <tft_init+0x34c>)
		break;
 80035d4:	e0ad      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 80035d6:	f248 0331 	movw	r3, #32817	; 0x8031
 80035da:	4298      	cmp	r0, r3
 80035dc:	f000 80ed 	beq.w	80037ba <tft_init+0x2ca>
 80035e0:	d811      	bhi.n	8003606 <tft_init+0x116>
 80035e2:	f247 7396 	movw	r3, #30614	; 0x7796
 80035e6:	4298      	cmp	r0, r3
 80035e8:	d1a7      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //thanks to safari1
 80035ea:	f240 4303 	movw	r3, #1027	; 0x403
		*p16 = 480;
 80035ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80035f2:	8023      	strh	r3, [r4, #0]
		*p16 = 480;
 80035f4:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <tft_init+0x344>)
		table8_ads = ILI9488_regValues_max, table_size =
 80035f6:	262b      	movs	r6, #43	; 0x2b
		*p16 = 480;
 80035f8:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 80035fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035fe:	4b8a      	ldr	r3, [pc, #552]	; (8003828 <tft_init+0x338>)
		table8_ads = ILI9488_regValues_max, table_size =
 8003600:	4d8f      	ldr	r5, [pc, #572]	; (8003840 <tft_init+0x350>)
		*p16 = 320;
 8003602:	801a      	strh	r2, [r3, #0]
		break;
 8003604:	e095      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 8003606:	f248 3357 	movw	r3, #33623	; 0x8357
 800360a:	4298      	cmp	r0, r3
 800360c:	f000 80db 	beq.w	80037c6 <tft_init+0x2d6>
 8003610:	f249 0390 	movw	r3, #37008	; 0x9090
 8003614:	4298      	cmp	r0, r3
 8003616:	d190      	bne.n	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN
 8003618:	f241 4313 	movw	r3, #5139	; 0x1413
 800361c:	e0d5      	b.n	80037ca <tft_init+0x2da>
	switch (_lcd_ID = ID) {
 800361e:	f249 3341 	movw	r3, #37697	; 0x9341
 8003622:	4298      	cmp	r0, r3
 8003624:	d837      	bhi.n	8003696 <tft_init+0x1a6>
 8003626:	f249 3340 	movw	r3, #37696	; 0x9340
 800362a:	4298      	cmp	r0, r3
 800362c:	f080 8141 	bcs.w	80038b2 <tft_init+0x3c2>
 8003630:	f249 3328 	movw	r3, #37672	; 0x9328
 8003634:	4298      	cmp	r0, r3
 8003636:	f000 811f 	beq.w	8003878 <tft_init+0x388>
 800363a:	d811      	bhi.n	8003660 <tft_init+0x170>
 800363c:	f249 3325 	movw	r3, #37669	; 0x9325
 8003640:	4298      	cmp	r0, r3
 8003642:	f000 8119 	beq.w	8003878 <tft_init+0x388>
 8003646:	f249 3327 	movw	r3, #37671	; 0x9327
 800364a:	4298      	cmp	r0, r3
 800364c:	f000 811a 	beq.w	8003884 <tft_init+0x394>
 8003650:	f249 3320 	movw	r3, #37664	; 0x9320
 8003654:	4298      	cmp	r0, r3
 8003656:	f47f af70 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800365a:	f241 0304 	movw	r3, #4100	; 0x1004
 800365e:	e0d0      	b.n	8003802 <tft_init+0x312>
	switch (_lcd_ID = ID) {
 8003660:	f249 3331 	movw	r3, #37681	; 0x9331
 8003664:	4298      	cmp	r0, r3
 8003666:	f000 810a 	beq.w	800387e <tft_init+0x38e>
 800366a:	d807      	bhi.n	800367c <tft_init+0x18c>
 800366c:	f249 3329 	movw	r3, #37673	; 0x9329
 8003670:	4298      	cmp	r0, r3
 8003672:	f47f af62 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS
 8003676:	f241 6303 	movw	r3, #5635	; 0x1603
 800367a:	e113      	b.n	80038a4 <tft_init+0x3b4>
	switch (_lcd_ID = ID) {
 800367c:	f249 3335 	movw	r3, #37685	; 0x9335
 8003680:	4298      	cmp	r0, r3
 8003682:	f000 80fc 	beq.w	800387e <tft_init+0x38e>
 8003686:	f249 3338 	movw	r3, #37688	; 0x9338
 800368a:	4298      	cmp	r0, r3
 800368c:	f47f af55 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003690:	f240 4313 	movw	r3, #1043	; 0x413
 8003694:	e106      	b.n	80038a4 <tft_init+0x3b4>
	switch (_lcd_ID = ID) {
 8003696:	f249 4388 	movw	r3, #38024	; 0x9488
 800369a:	4298      	cmp	r0, r3
 800369c:	d821      	bhi.n	80036e2 <tft_init+0x1f2>
 800369e:	f249 4387 	movw	r3, #38023	; 0x9487
 80036a2:	4298      	cmp	r0, r3
 80036a4:	f080 8129 	bcs.w	80038fa <tft_init+0x40a>
 80036a8:	f249 4381 	movw	r3, #38017	; 0x9481
 80036ac:	4298      	cmp	r0, r3
 80036ae:	f000 8114 	beq.w	80038da <tft_init+0x3ea>
 80036b2:	f249 4386 	movw	r3, #38022	; 0x9486
 80036b6:	4298      	cmp	r0, r3
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <tft_init+0x338>)
 80036ba:	f000 8111 	beq.w	80038e0 <tft_init+0x3f0>
 80036be:	f249 3242 	movw	r2, #37698	; 0x9342
 80036c2:	4290      	cmp	r0, r2
 80036c4:	f47f af39 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80036c8:	f241 5213 	movw	r2, #5395	; 0x1513
		*p16 = 240;
 80036cc:	f04f 01f0 	mov.w	r1, #240	; 0xf0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80036d0:	8022      	strh	r2, [r4, #0]
		*p16 = 240;
 80036d2:	4a58      	ldr	r2, [pc, #352]	; (8003834 <tft_init+0x344>)
		table8_ads = ILI9342_regValues_CPT24, table_size =
 80036d4:	2638      	movs	r6, #56	; 0x38
		*p16 = 240;
 80036d6:	8011      	strh	r1, [r2, #0]
		*p16 = 320;
 80036d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
		table8_ads = ILI9342_regValues_CPT24, table_size =
 80036dc:	4d59      	ldr	r5, [pc, #356]	; (8003844 <tft_init+0x354>)
		*p16 = 320;
 80036de:	801a      	strh	r2, [r3, #0]
		break;
 80036e0:	e027      	b.n	8003732 <tft_init+0x242>
	switch (_lcd_ID = ID) {
 80036e2:	f24b 5305 	movw	r3, #46341	; 0xb505
 80036e6:	4298      	cmp	r0, r3
 80036e8:	d012      	beq.n	8003710 <tft_init+0x220>
 80036ea:	d807      	bhi.n	80036fc <tft_init+0x20c>
 80036ec:	f64a 4311 	movw	r3, #44049	; 0xac11
 80036f0:	4298      	cmp	r0, r3
 80036f2:	f47f af22 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80036f6:	f241 4313 	movw	r3, #5139	; 0x1413
 80036fa:	e0d3      	b.n	80038a4 <tft_init+0x3b4>
	switch (_lcd_ID = ID) {
 80036fc:	f24b 5309 	movw	r3, #46345	; 0xb509
 8003700:	4298      	cmp	r0, r3
 8003702:	f000 80fd 	beq.w	8003900 <tft_init+0x410>
 8003706:	f24c 5305 	movw	r3, #50437	; 0xc505
 800370a:	4298      	cmp	r0, r3
 800370c:	f47f af15 	bne.w	800353a <tft_init+0x4a>
		_lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003710:	f241 0308 	movw	r3, #4104	; 0x1008
		init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003714:	21b0      	movs	r1, #176	; 0xb0
		_lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8003716:	8023      	strh	r3, [r4, #0]
		init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003718:	484b      	ldr	r0, [pc, #300]	; (8003848 <tft_init+0x358>)
 800371a:	e075      	b.n	8003808 <tft_init+0x318>
		*p16 = 480;
 800371c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8003720:	2603      	movs	r6, #3
		*p16 = 480;
 8003722:	4b44      	ldr	r3, [pc, #272]	; (8003834 <tft_init+0x344>)
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8003724:	8026      	strh	r6, [r4, #0]
		*p16 = 480;
 8003726:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 8003728:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <tft_init+0x338>)
		table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800372e:	4d47      	ldr	r5, [pc, #284]	; (800384c <tft_init+0x35c>)
		*p16 = 320;
 8003730:	801a      	strh	r2, [r3, #0]
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8003732:	8823      	ldrh	r3, [r4, #0]
 8003734:	4a46      	ldr	r2, [pc, #280]	; (8003850 <tft_init+0x360>)
 8003736:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800373a:	8013      	strh	r3, [r2, #0]
	if (table8_ads != NULL) {
 800373c:	b15d      	cbz	r5, 8003756 <tft_init+0x266>
		init_table(&reset_off, sizeof(reset_off));
 800373e:	2109      	movs	r1, #9
 8003740:	4844      	ldr	r0, [pc, #272]	; (8003854 <tft_init+0x364>)
 8003742:	f7fe fd7b 	bl	800223c <init_table>
		init_table(table8_ads, table_size);   //can change PIXFMT
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	f7fe fd77 	bl	800223c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800374e:	2106      	movs	r1, #6
 8003750:	4841      	ldr	r0, [pc, #260]	; (8003858 <tft_init+0x368>)
 8003752:	f7fe fd73 	bl	800223c <init_table>
	setRotation(0);             //PORTRAIT
 8003756:	2000      	movs	r0, #0
 8003758:	f7ff fcf8 	bl	800314c <setRotation>
	invertDisplay(false);
 800375c:	2000      	movs	r0, #0
 800375e:	f7ff fe83 	bl	8003468 <invertDisplay>
	if (_lcd_ID == 0x9488) {
 8003762:	f249 4388 	movw	r3, #38024	; 0x9488
 8003766:	883a      	ldrh	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d11e      	bne.n	80037aa <tft_init+0x2ba>
		is555 = 0;
 800376c:	2500      	movs	r5, #0
 800376e:	4e3b      	ldr	r6, [pc, #236]	; (800385c <tft_init+0x36c>)
		drawPixel(0, 0, 0xFFE0);
 8003770:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003774:	4629      	mov	r1, r5
 8003776:	4628      	mov	r0, r5
		is555 = 0;
 8003778:	7035      	strb	r5, [r6, #0]
		drawPixel(0, 0, 0xFFE0);
 800377a:	f7ff fc27 	bl	8002fcc <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 800377e:	4629      	mov	r1, r5
 8003780:	4628      	mov	r0, r5
 8003782:	f7ff fc17 	bl	8002fb4 <readPixel>
 8003786:	f64f 731f 	movw	r3, #65311	; 0xff1f
 800378a:	4298      	cmp	r0, r3
 800378c:	d10d      	bne.n	80037aa <tft_init+0x2ba>
			uint8_t pixfmt = 0x06;
 800378e:	2306      	movs	r3, #6
 8003790:	aa02      	add	r2, sp, #8
 8003792:	f802 3d01 	strb.w	r3, [r2, #-1]!
	WriteCmdParamN(cmd, N, block);
 8003796:	2101      	movs	r1, #1
 8003798:	203a      	movs	r0, #58	; 0x3a
 800379a:	f7fe fccb 	bl	8002134 <WriteCmdParamN>
			_lcd_capable &= ~READ_24BITS;
 800379e:	8823      	ldrh	r3, [r4, #0]
 80037a0:	f023 0310 	bic.w	r3, r3, #16
 80037a4:	8023      	strh	r3, [r4, #0]
			is555 = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	7033      	strb	r3, [r6, #0]
}
 80037aa:	b003      	add	sp, #12
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80037ae:	f240 4313 	movw	r3, #1043	; 0x413
		table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80037b2:	260c      	movs	r6, #12
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80037b4:	8023      	strh	r3, [r4, #0]
		table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80037b6:	4d2a      	ldr	r5, [pc, #168]	; (8003860 <tft_init+0x370>)
		break;
 80037b8:	e7bb      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80037ba:	f241 4313 	movw	r3, #5139	; 0x1413
		table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80037be:	2612      	movs	r6, #18
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80037c0:	8023      	strh	r3, [r4, #0]
		table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80037c2:	4d28      	ldr	r5, [pc, #160]	; (8003864 <tft_init+0x374>)
		break;
 80037c4:	e7b5      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80037c6:	f241 4303 	movw	r3, #5123	; 0x1403
		*p16 = 480;
 80037ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN
 80037ce:	8023      	strh	r3, [r4, #0]
		*p16 = 480;
 80037d0:	4b18      	ldr	r3, [pc, #96]	; (8003834 <tft_init+0x344>)
		table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80037d2:	2602      	movs	r6, #2
		*p16 = 480;
 80037d4:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 80037d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <tft_init+0x338>)
		table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80037dc:	4d22      	ldr	r5, [pc, #136]	; (8003868 <tft_init+0x378>)
		*p16 = 320;
 80037de:	801a      	strh	r2, [r3, #0]
		break;
 80037e0:	e7a7      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN
 80037e2:	f241 4313 	movw	r3, #5139	; 0x1413
		*p16 = 480;
 80037e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN
 80037ea:	8023      	strh	r3, [r4, #0]
		*p16 = 480;
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <tft_init+0x344>)
		table8_ads = HX8357_99_regValues, table_size =
 80037ee:	261d      	movs	r6, #29
		*p16 = 480;
 80037f0:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 80037f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <tft_init+0x338>)
		table8_ads = HX8357_99_regValues, table_size =
 80037f8:	4d1c      	ldr	r5, [pc, #112]	; (800386c <tft_init+0x37c>)
		*p16 = 320;
 80037fa:	801a      	strh	r2, [r3, #0]
		break;
 80037fc:	e799      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80037fe:	f44f 5388 	mov.w	r3, #4352	; 0x1100
		init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8003802:	21d8      	movs	r1, #216	; 0xd8
 8003804:	481a      	ldr	r0, [pc, #104]	; (8003870 <tft_init+0x380>)
		_lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8003806:	8023      	strh	r3, [r4, #0]
		init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003808:	f7fe fc7c 	bl	8002104 <init_table16>
	const uint8_t *table8_ads = NULL;
 800380c:	2500      	movs	r5, #0
		break;
 800380e:	e790      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003810:	f241 1302 	movw	r3, #4354	; 0x1102
		_lcd_capable = 0 | REV_SCREEN;
 8003814:	8023      	strh	r3, [r4, #0]
		init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003816:	21cc      	movs	r1, #204	; 0xcc
 8003818:	4816      	ldr	r0, [pc, #88]	; (8003874 <tft_init+0x384>)
 800381a:	e7f5      	b.n	8003808 <tft_init+0x318>
 800381c:	20000120 	.word	0x20000120
 8003820:	2000011e 	.word	0x2000011e
 8003824:	20000110 	.word	0x20000110
 8003828:	080022c5 	.word	0x080022c5
 800382c:	0800d8fb 	.word	0x0800d8fb
 8003830:	0800d94e 	.word	0x0800d94e
 8003834:	080022d1 	.word	0x080022d1
 8003838:	0800d785 	.word	0x0800d785
 800383c:	0800d90d 	.word	0x0800d90d
 8003840:	0800d75a 	.word	0x0800d75a
 8003844:	0800d6a2 	.word	0x0800d6a2
 8003848:	0800d788 	.word	0x0800d788
 800384c:	0800d8f8 	.word	0x0800d8f8
 8003850:	20000114 	.word	0x20000114
 8003854:	0800d954 	.word	0x0800d954
 8003858:	0800d95d 	.word	0x0800d95d
 800385c:	200000b5 	.word	0x200000b5
 8003860:	0800d901 	.word	0x0800d901
 8003864:	0800d446 	.word	0x0800d446
 8003868:	0800d458 	.word	0x0800d458
 800386c:	0800d45a 	.word	0x0800d45a
 8003870:	0800d478 	.word	0x0800d478
 8003874:	0800d550 	.word	0x0800d550
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8003878:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800387c:	e7ca      	b.n	8003814 <tft_init+0x324>
		_lcd_capable = 0 | REV_SCREEN;
 800387e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003882:	e7c7      	b.n	8003814 <tft_init+0x324>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003884:	f240 4303 	movw	r3, #1027	; 0x403
		*p16 = 400;
 8003888:	f44f 72c8 	mov.w	r2, #400	; 0x190
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800388c:	8023      	strh	r3, [r4, #0]
		*p16 = 400;
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <tft_init+0x428>)
		table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8003890:	261e      	movs	r6, #30
		*p16 = 400;
 8003892:	801a      	strh	r2, [r3, #0]
		*p16 = 240;
 8003894:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <tft_init+0x42c>)
		table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 800389a:	4d21      	ldr	r5, [pc, #132]	; (8003920 <tft_init+0x430>)
		*p16 = 240;
 800389c:	801a      	strh	r2, [r3, #0]
		break;
 800389e:	e748      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS
 80038a0:	f241 4317 	movw	r3, #5143	; 0x1417
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS
 80038a4:	8023      	strh	r3, [r4, #0]
		table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80038a6:	2603      	movs	r6, #3
 80038a8:	4d1e      	ldr	r5, [pc, #120]	; (8003924 <tft_init+0x434>)
 80038aa:	e742      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80038ac:	f240 4303 	movw	r3, #1027	; 0x403
 80038b0:	e7f8      	b.n	80038a4 <tft_init+0x3b4>
		common_9341: _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS
 80038b2:	f240 4313 	movw	r3, #1043	; 0x413
		table8_ads = ILI9341_regValues_2_4, table_size =
 80038b6:	2665      	movs	r6, #101	; 0x65
		common_9341: _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS
 80038b8:	8023      	strh	r3, [r4, #0]
		table8_ads = ILI9341_regValues_2_4, table_size =
 80038ba:	4d1b      	ldr	r5, [pc, #108]	; (8003928 <tft_init+0x438>)
		break;
 80038bc:	e739      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80038be:	f240 4313 	movw	r3, #1043	; 0x413
		*p16 = 480;
 80038c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80038c6:	8023      	strh	r3, [r4, #0]
		*p16 = 480;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <tft_init+0x428>)
		table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80038ca:	2645      	movs	r6, #69	; 0x45
		*p16 = 480;
 80038cc:	801a      	strh	r2, [r3, #0]
		*p16 = 320;
 80038ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <tft_init+0x42c>)
		table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80038d4:	4d15      	ldr	r5, [pc, #84]	; (800392c <tft_init+0x43c>)
		*p16 = 320;
 80038d6:	801a      	strh	r2, [r3, #0]
		break;
 80038d8:	e72b      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80038da:	f240 4307 	movw	r3, #1031	; 0x407
 80038de:	e7f0      	b.n	80038c2 <tft_init+0x3d2>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80038e0:	f240 4203 	movw	r2, #1027	; 0x403
		*p16 = 480;
 80038e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80038e8:	8022      	strh	r2, [r4, #0]
		*p16 = 480;
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <tft_init+0x428>)
		table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80038ec:	263b      	movs	r6, #59	; 0x3b
		*p16 = 480;
 80038ee:	8011      	strh	r1, [r2, #0]
		*p16 = 320;
 80038f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
		table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80038f4:	4d0e      	ldr	r5, [pc, #56]	; (8003930 <tft_init+0x440>)
		*p16 = 320;
 80038f6:	801a      	strh	r2, [r3, #0]
		break;
 80038f8:	e71b      	b.n	8003732 <tft_init+0x242>
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80038fa:	f240 4313 	movw	r3, #1043	; 0x413
 80038fe:	e676      	b.n	80035ee <tft_init+0xfe>
		_lcd_capable = REV_SCREEN;
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8003904:	21c0      	movs	r1, #192	; 0xc0
 8003906:	480b      	ldr	r0, [pc, #44]	; (8003934 <tft_init+0x444>)
		_lcd_capable = REV_SCREEN;
 8003908:	8023      	strh	r3, [r4, #0]
		init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800390a:	f7fe fbfb 	bl	8002104 <init_table16>
		*p16 = 400;
 800390e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003912:	4b01      	ldr	r3, [pc, #4]	; (8003918 <tft_init+0x428>)
		*p16 = 0;       //error value for width
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e779      	b.n	800380c <tft_init+0x31c>
 8003918:	080022d1 	.word	0x080022d1
 800391c:	080022c5 	.word	0x080022c5
 8003920:	0800d61c 	.word	0x0800d61c
 8003924:	0800d63a 	.word	0x0800d63a
 8003928:	0800d63d 	.word	0x0800d63d
 800392c:	0800d6da 	.word	0x0800d6da
 8003930:	0800d71f 	.word	0x0800d71f
 8003934:	0800d838 	.word	0x0800d838

08003938 <writeLine>:

void writePixel(int16_t x, int16_t y, uint16_t color) {
	drawPixel(x, y, color);
}

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	4616      	mov	r6, r2
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800393e:	1a5f      	subs	r7, r3, r1
 8003940:	eba6 0800 	sub.w	r8, r6, r0
 8003944:	2f00      	cmp	r7, #0
 8003946:	bfb8      	it	lt
 8003948:	427f      	neglt	r7, r7
 800394a:	f1b8 0f00 	cmp.w	r8, #0
 800394e:	bfb8      	it	lt
 8003950:	f1c8 0800 	rsblt	r8, r8, #0
	if (steep) {
 8003954:	4547      	cmp	r7, r8
void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003956:	4604      	mov	r4, r0
 8003958:	460d      	mov	r5, r1
 800395a:	461a      	mov	r2, r3
 800395c:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	if (steep) {
 8003960:	dd04      	ble.n	800396c <writeLine+0x34>
 8003962:	4633      	mov	r3, r6
		_swap_int16_t(x0, y0);
 8003964:	460c      	mov	r4, r1
		_swap_int16_t(x1, y1);
 8003966:	4616      	mov	r6, r2
		_swap_int16_t(x0, y0);
 8003968:	4605      	mov	r5, r0
		_swap_int16_t(x1, y1);
 800396a:	461a      	mov	r2, r3
	}

	if (x0 > x1) {
 800396c:	42b4      	cmp	r4, r6
 800396e:	dd05      	ble.n	800397c <writeLine+0x44>
 8003970:	462b      	mov	r3, r5
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
 8003972:	4615      	mov	r5, r2
 8003974:	461a      	mov	r2, r3
	if (x0 > x1) {
 8003976:	4623      	mov	r3, r4
 8003978:	4634      	mov	r4, r6
 800397a:	461e      	mov	r6, r3
	}

	int16_t dx, dy;
	dx = x1 - x0;
	dy = abs(y1 - y0);
 800397c:	eba2 0a05 	sub.w	sl, r2, r5
 8003980:	4653      	mov	r3, sl
 8003982:	2b00      	cmp	r3, #0
 8003984:	bfb8      	it	lt
 8003986:	425b      	neglt	r3, r3
 8003988:	9301      	str	r3, [sp, #4]

	int16_t err = dx / 2;
 800398a:	2302      	movs	r3, #2
	dx = x1 - x0;
 800398c:	eba6 0904 	sub.w	r9, r6, r4
 8003990:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 8003994:	fa0f f189 	sxth.w	r1, r9
 8003998:	fb91 faf3 	sdiv	sl, r1, r3
	int16_t ystep;

	if (y0 < y1) {
		ystep = 1;
	} else {
		ystep = -1;
 800399c:	4295      	cmp	r5, r2
 800399e:	bfb4      	ite	lt
 80039a0:	2301      	movlt	r3, #1
 80039a2:	f04f 33ff 	movge.w	r3, #4294967295
 80039a6:	9300      	str	r3, [sp, #0]
	}

	for (; x0 <= x1; x0++) {
 80039a8:	42b4      	cmp	r4, r6
 80039aa:	dd02      	ble.n	80039b2 <writeLine+0x7a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
 80039ac:	b003      	add	sp, #12
 80039ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (steep) {
 80039b2:	4547      	cmp	r7, r8
	drawPixel(x, y, color);
 80039b4:	465a      	mov	r2, fp
 80039b6:	bfc7      	ittee	gt
 80039b8:	4621      	movgt	r1, r4
 80039ba:	4628      	movgt	r0, r5
 80039bc:	4629      	movle	r1, r5
 80039be:	4620      	movle	r0, r4
 80039c0:	f7ff fb04 	bl	8002fcc <drawPixel>
		err -= dy;
 80039c4:	9b01      	ldr	r3, [sp, #4]
 80039c6:	ebaa 0303 	sub.w	r3, sl, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	fa0f fa82 	sxth.w	sl, r2
		if (err < 0) {
 80039d0:	f1ba 0f00 	cmp.w	sl, #0
 80039d4:	da06      	bge.n	80039e4 <writeLine+0xac>
			y0 += ystep;
 80039d6:	9b00      	ldr	r3, [sp, #0]
 80039d8:	441d      	add	r5, r3
			err += dx;
 80039da:	eb09 0302 	add.w	r3, r9, r2
			y0 += ystep;
 80039de:	b22d      	sxth	r5, r5
			err += dx;
 80039e0:	fa0f fa83 	sxth.w	sl, r3
 80039e4:	3401      	adds	r4, #1
 80039e6:	b224      	sxth	r4, r4
 80039e8:	e7de      	b.n	80039a8 <writeLine+0x70>
	...

080039ec <fillRect>:
	drawFastHLine(x, y + h - 1, w, color);
	drawFastVLine(x, y, h, color);
	drawFastVLine(x + w - 1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80039ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t end;
#if defined(SUPPORT_9488_555)
	if (is555)
 80039f0:	4c88      	ldr	r4, [pc, #544]	; (8003c14 <fillRect+0x228>)
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80039f2:	b087      	sub	sp, #28
	if (is555)
 80039f4:	7824      	ldrb	r4, [r4, #0]
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80039f6:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
	if (is555)
 80039fa:	b12c      	cbz	r4, 8003a08 <fillRect+0x1c>
	return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01)); //lose Green LSB, extend Blue LSB
 80039fc:	0074      	lsls	r4, r6, #1
 80039fe:	f004 043e 	and.w	r4, r4, #62	; 0x3e
 8003a02:	f026 063e 	bic.w	r6, r6, #62	; 0x3e
 8003a06:	4326      	orrs	r6, r4
		color = color565_to_555(color);
#endif
	if (w < 0) {
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	da04      	bge.n	8003a16 <fillRect+0x2a>
		w = -w;
 8003a0c:	b294      	uxth	r4, r2
 8003a0e:	4262      	negs	r2, r4
		x -= w;
 8003a10:	4420      	add	r0, r4
		w = -w;
 8003a12:	b212      	sxth	r2, r2
		x -= w;
 8003a14:	b200      	sxth	r0, r0
	return _width;
 8003a16:	4d80      	ldr	r5, [pc, #512]	; (8003c18 <fillRect+0x22c>)
	}                           //+ve w
	end = x + w;
 8003a18:	4402      	add	r2, r0
	return _width;
 8003a1a:	882c      	ldrh	r4, [r5, #0]
	end = x + w;
 8003a1c:	b212      	sxth	r2, r2
	if (x < 0)
		x = 0;
	if (end > width())
 8003a1e:	42a2      	cmp	r2, r4
		end = width();
 8003a20:	bfc8      	it	gt
 8003a22:	b222      	sxthgt	r2, r4
 8003a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	w = end - x;
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	1a17      	subs	r7, r2, r0
	if (h < 0) {
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	9504      	str	r5, [sp, #16]
	w = end - x;
 8003a30:	b23f      	sxth	r7, r7
	if (h < 0) {
 8003a32:	da04      	bge.n	8003a3e <fillRect+0x52>
		h = -h;
 8003a34:	b29c      	uxth	r4, r3
 8003a36:	4263      	negs	r3, r4
		y -= h;
 8003a38:	4421      	add	r1, r4
		h = -h;
 8003a3a:	b21b      	sxth	r3, r3
		y -= h;
 8003a3c:	b209      	sxth	r1, r1
	if (end > height())
		end = height();
	h = end - y;
	setAddrWindow(x, y, x + w - 1, y + h - 1);
	CS_ACTIVE;
	WriteCmd(_MW);
 8003a3e:	f44f 0af6 	mov.w	sl, #8060928	; 0x7b0000
	return _height;
 8003a42:	4c76      	ldr	r4, [pc, #472]	; (8003c1c <fillRect+0x230>)
	end = y + h;
 8003a44:	440b      	add	r3, r1
	return _height;
 8003a46:	8824      	ldrh	r4, [r4, #0]
	end = y + h;
 8003a48:	b21b      	sxth	r3, r3
	if (end > height())
 8003a4a:	42a3      	cmp	r3, r4
		end = height();
 8003a4c:	bfc8      	it	gt
 8003a4e:	b223      	sxthgt	r3, r4
 8003a50:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	h = end - y;
 8003a54:	b29b      	uxth	r3, r3
	CS_ACTIVE;
 8003a56:	4c72      	ldr	r4, [pc, #456]	; (8003c20 <fillRect+0x234>)
	h = end - y;
 8003a58:	1a5d      	subs	r5, r3, r1
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003a5a:	3a01      	subs	r2, #1
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	b212      	sxth	r2, r2
 8003a62:	f7fe fef7 	bl	8002854 <setAddrWindow>
	CS_ACTIVE;
 8003a66:	2102      	movs	r1, #2
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7fe fab3 	bl	8001fd4 <PIN_LOW>
	WriteCmd(_MW);
 8003a6e:	2104      	movs	r1, #4
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7fe faaf 	bl	8001fd4 <PIN_LOW>
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <fillRect+0x238>)
 8003a78:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003c34 <fillRect+0x248>
 8003a7c:	f8b3 8000 	ldrh.w	r8, [r3]
 8003a80:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8003c38 <fillRect+0x24c>
 8003a84:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8003a88:	035a      	lsls	r2, r3, #13
 8003a8a:	1099      	asrs	r1, r3, #2
 8003a8c:	f001 0120 	and.w	r1, r1, #32
 8003a90:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003a94:	430a      	orrs	r2, r1
 8003a96:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003a9a:	f8c4 b010 	str.w	fp, [r4, #16]
 8003a9e:	2108      	movs	r1, #8
 8003aa0:	f8c9 a010 	str.w	sl, [r9, #16]
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	6122      	str	r2, [r4, #16]
 8003aa8:	f8c9 3010 	str.w	r3, [r9, #16]
 8003aac:	f7fe fa92 	bl	8001fd4 <PIN_LOW>
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7fe fa91 	bl	8001fda <PIN_HIGH>
 8003ab8:	fa5f f888 	uxtb.w	r8, r8
 8003abc:	2108      	movs	r1, #8
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7fe fa8b 	bl	8001fda <PIN_HIGH>
 8003ac4:	ea4f 3348 	mov.w	r3, r8, lsl #13
 8003ac8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8003acc:	f002 0220 	and.w	r2, r2, #32
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c4 b010 	str.w	fp, [r4, #16]
 8003ada:	f8c9 a010 	str.w	sl, [r9, #16]
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	f008 037b 	and.w	r3, r8, #123	; 0x7b
 8003ae4:	f8c9 3010 	str.w	r3, [r9, #16]
 8003ae8:	2108      	movs	r1, #8
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fe fa72 	bl	8001fd4 <PIN_LOW>
 8003af0:	2108      	movs	r1, #8
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7fe fa71 	bl	8001fda <PIN_HIGH>
 8003af8:	2108      	movs	r1, #8
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7fe fa6d 	bl	8001fda <PIN_HIGH>
	h = end - y;
 8003b00:	b22d      	sxth	r5, r5
	WriteCmd(_MW);
 8003b02:	2104      	movs	r1, #4
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7fe fa68 	bl	8001fda <PIN_HIGH>
	if (h > w) {
 8003b0a:	42af      	cmp	r7, r5
 8003b0c:	bfbe      	ittt	lt
 8003b0e:	463b      	movlt	r3, r7
 8003b10:	462f      	movlt	r7, r5
 8003b12:	461d      	movlt	r5, r3
		end = h;
		h = w;
		w = end;
	}
	uint8_t hi = color >> 8, lo = color & 0xFF;
 8003b14:	0a33      	lsrs	r3, r6, #8
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	9201      	str	r2, [sp, #4]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
		do {
			write8(hi);
 8003b1a:	035a      	lsls	r2, r3, #13
 8003b1c:	109b      	asrs	r3, r3, #2
 8003b1e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003b22:	f003 0320 	and.w	r3, r3, #32
	uint8_t hi = color >> 8, lo = color & 0xFF;
 8003b26:	b2f6      	uxtb	r6, r6
			write8(hi);
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	9302      	str	r3, [sp, #8]
			write8(lo);
 8003b2c:	ea4f 3946 	mov.w	r9, r6, lsl #13
 8003b30:	10b3      	asrs	r3, r6, #2
 8003b32:	f409 4900 	and.w	r9, r9, #32768	; 0x8000
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	ea49 0303 	orr.w	r3, r9, r3
			write8(hi);
 8003b3e:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8003c38 <fillRect+0x24c>
 8003b42:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003c20 <fillRect+0x234>
 8003b46:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003c34 <fillRect+0x248>
			write8(lo);
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	b2ad      	uxth	r5, r5
	while (h-- > 0) {
 8003b4e:	b22a      	sxth	r2, r5
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	dc20      	bgt.n	8003b96 <fillRect+0x1aa>
		} while (--end != 0);
#endif
	}
	CS_IDLE;
 8003b54:	2102      	movs	r1, #2
 8003b56:	4832      	ldr	r0, [pc, #200]	; (8003c20 <fillRect+0x234>)
 8003b58:	f7fe fa3f 	bl	8001fda <PIN_HIGH>
	if (!(_lcd_capable & MIPI_DCS_REV1)
 8003b5c:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <fillRect+0x23c>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	07da      	lsls	r2, r3, #31
 8003b62:	d509      	bpl.n	8003b78 <fillRect+0x18c>
			|| ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <fillRect+0x240>)
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	f241 5326 	movw	r3, #5414	; 0x1526
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d14e      	bne.n	8003c0e <fillRect+0x222>
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <fillRect+0x244>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	07db      	lsls	r3, r3, #31
 8003b76:	d54a      	bpl.n	8003c0e <fillRect+0x222>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	9a04      	ldr	r2, [sp, #16]
	return _height;
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <fillRect+0x230>)
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	3a01      	subs	r2, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	b212      	sxth	r2, r2
}
 8003b8c:	b007      	add	sp, #28
 8003b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b92:	f7fe be5f 	b.w	8002854 <setAddrWindow>
 8003b96:	46ba      	mov	sl, r7
			write8(hi);
 8003b98:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003b9c:	9b02      	ldr	r3, [sp, #8]
 8003b9e:	f8c4 b010 	str.w	fp, [r4, #16]
 8003ba2:	f8c9 2010 	str.w	r2, [r9, #16]
 8003ba6:	9205      	str	r2, [sp, #20]
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	4640      	mov	r0, r8
 8003bae:	f003 017b 	and.w	r1, r3, #123	; 0x7b
 8003bb2:	f8c9 1010 	str.w	r1, [r9, #16]
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	f7fe fa0c 	bl	8001fd4 <PIN_LOW>
 8003bbc:	2108      	movs	r1, #8
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f7fe fa0b 	bl	8001fda <PIN_HIGH>
 8003bc4:	2108      	movs	r1, #8
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f7fe fa07 	bl	8001fda <PIN_HIGH>
			write8(lo);
 8003bcc:	9a05      	ldr	r2, [sp, #20]
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	f8c4 b010 	str.w	fp, [r4, #16]
 8003bd4:	f8c9 2010 	str.w	r2, [r9, #16]
 8003bd8:	f006 027b 	and.w	r2, r6, #123	; 0x7b
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	2108      	movs	r1, #8
 8003be0:	f8c9 2010 	str.w	r2, [r9, #16]
 8003be4:	4640      	mov	r0, r8
 8003be6:	f7fe f9f5 	bl	8001fd4 <PIN_LOW>
 8003bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bee:	2108      	movs	r1, #8
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	f7fe f9f2 	bl	8001fda <PIN_HIGH>
 8003bf6:	fa0f fa8a 	sxth.w	sl, sl
 8003bfa:	2108      	movs	r1, #8
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	f7fe f9ec 	bl	8001fda <PIN_HIGH>
		} while (--end != 0);
 8003c02:	f1ba 0f00 	cmp.w	sl, #0
 8003c06:	d1c7      	bne.n	8003b98 <fillRect+0x1ac>
 8003c08:	3d01      	subs	r5, #1
 8003c0a:	b2ad      	uxth	r5, r5
 8003c0c:	e79f      	b.n	8003b4e <fillRect+0x162>
}
 8003c0e:	b007      	add	sp, #28
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	200000b5 	.word	0x200000b5
 8003c18:	20000012 	.word	0x20000012
 8003c1c:	20000010 	.word	0x20000010
 8003c20:	40010800 	.word	0x40010800
 8003c24:	2000010e 	.word	0x2000010e
 8003c28:	20000110 	.word	0x20000110
 8003c2c:	2000011e 	.word	0x2000011e
 8003c30:	200000b6 	.word	0x200000b6
 8003c34:	40010c00 	.word	0x40010c00
 8003c38:	80200000 	.word	0x80200000

08003c3c <fillScreen>:
void fillScreen(uint16_t color) {
 8003c3c:	b507      	push	{r0, r1, r2, lr}
	fillRect(0, 0, _width, _height, color);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <fillScreen+0x20>)
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <fillScreen+0x24>)
 8003c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003c4c:	9000      	str	r0, [sp, #0]
 8003c4e:	4608      	mov	r0, r1
 8003c50:	f7ff fecc 	bl	80039ec <fillRect>
}
 8003c54:	b003      	add	sp, #12
 8003c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010
 8003c60:	20000012 	.word	0x20000012

08003c64 <drawFastVLine>:
void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8003c64:	b507      	push	{r0, r1, r2, lr}
	fillRect(x, y, 1, h, color);
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f7ff febe 	bl	80039ec <fillRect>
}
 8003c70:	b003      	add	sp, #12
 8003c72:	f85d fb04 	ldr.w	pc, [sp], #4

08003c76 <drawFastHLine>:
void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8003c76:	b507      	push	{r0, r1, r2, lr}
	fillRect(x, y, w, 1, color);
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f7ff feb6 	bl	80039ec <fillRect>
}
 8003c80:	b003      	add	sp, #12
 8003c82:	f85d fb04 	ldr.w	pc, [sp], #4

08003c86 <drawLine>:
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003c86:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (x0 == x1) {
 8003c88:	4290      	cmp	r0, r2
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	461d      	mov	r5, r3
 8003c92:	f8bd e014 	ldrh.w	lr, [sp, #20]
	if (x0 == x1) {
 8003c96:	d10d      	bne.n	8003cb4 <drawLine+0x2e>
		if (y0 > y1)
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	bfc2      	ittt	gt
 8003c9c:	460b      	movgt	r3, r1
 8003c9e:	462f      	movgt	r7, r5
 8003ca0:	461d      	movgt	r5, r3
		drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003ca2:	1c6a      	adds	r2, r5, #1
 8003ca4:	1bd2      	subs	r2, r2, r7
 8003ca6:	4673      	mov	r3, lr
 8003ca8:	4639      	mov	r1, r7
}
 8003caa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003cae:	b212      	sxth	r2, r2
 8003cb0:	f7ff bfd8 	b.w	8003c64 <drawFastVLine>
	} else if (y0 == y1) {
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d10d      	bne.n	8003cd4 <drawLine+0x4e>
		if (x0 > x1)
 8003cb8:	4290      	cmp	r0, r2
 8003cba:	bfc2      	ittt	gt
 8003cbc:	4603      	movgt	r3, r0
 8003cbe:	461c      	movgt	r4, r3
 8003cc0:	4616      	movgt	r6, r2
		drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003cc2:	1c62      	adds	r2, r4, #1
 8003cc4:	1b92      	subs	r2, r2, r6
 8003cc6:	4673      	mov	r3, lr
 8003cc8:	4630      	mov	r0, r6
}
 8003cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003cce:	b212      	sxth	r2, r2
 8003cd0:	f7ff bfd1 	b.w	8003c76 <drawFastHLine>
		writeLine(x0, y0, x1, y1, color);
 8003cd4:	f8cd e014 	str.w	lr, [sp, #20]
}
 8003cd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		writeLine(x0, y0, x1, y1, color);
 8003cdc:	f7ff be2c 	b.w	8003938 <writeLine>

08003ce0 <fillTriangle>:
	drawLine(x1, y1, x2, y2, color);
	drawLine(x2, y2, x0, y0, color);
}

void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2,
		int16_t y2, uint16_t color) {
 8003ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 8003ce4:	4299      	cmp	r1, r3
		int16_t y2, uint16_t color) {
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	460f      	mov	r7, r1
 8003cea:	461c      	mov	r4, r3
 8003cec:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
 8003cf0:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 8003cf4:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
	if (y0 > y1) {
 8003cf8:	dd6b      	ble.n	8003dd2 <fillTriangle+0xf2>
		_swap_int16_t(y0, y1);
		_swap_int16_t(x0, x1);
	}
	if (y1 > y2) {
 8003cfa:	42b1      	cmp	r1, r6
 8003cfc:	dc75      	bgt.n	8003dea <fillTriangle+0x10a>
		_swap_int16_t(y2, y1);
		_swap_int16_t(x2, x1);
	}
	if (y0 > y1) {
 8003cfe:	463b      	mov	r3, r7
 8003d00:	4627      	mov	r7, r4
 8003d02:	461c      	mov	r4, r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	4610      	mov	r0, r2
 8003d08:	461a      	mov	r2, r3
		_swap_int16_t(y0, y1);
		_swap_int16_t(x0, x1);
	}

	if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8003d0a:	42b7      	cmp	r7, r6
 8003d0c:	d116      	bne.n	8003d3c <fillTriangle+0x5c>
		a = b = x0;
		if (x1 < a)
 8003d0e:	4290      	cmp	r0, r2
 8003d10:	bfde      	ittt	le
 8003d12:	4613      	movle	r3, r2
 8003d14:	4602      	movle	r2, r0
 8003d16:	4618      	movle	r0, r3
			a = x1;
		else if (x1 > b)
			b = x1;
		if (x2 < a)
 8003d18:	42aa      	cmp	r2, r5
 8003d1a:	dc04      	bgt.n	8003d26 <fillTriangle+0x46>
 8003d1c:	4285      	cmp	r5, r0
 8003d1e:	bfb8      	it	lt
 8003d20:	4605      	movlt	r5, r0
 8003d22:	b228      	sxth	r0, r5
 8003d24:	4615      	mov	r5, r2
			a = x2;
		else if (x2 > b)
			b = x2;
		drawFastHLine(a, y0, b - a + 1, color);
 8003d26:	3001      	adds	r0, #1
 8003d28:	1b42      	subs	r2, r0, r5
 8003d2a:	465b      	mov	r3, fp
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	4628      	mov	r0, r5
 8003d30:	b212      	sxth	r2, r2
		 */
		if (a > b)
			_swap_int16_t(a, b);
		drawFastHLine(a, y, b - a + 1, color);
	}
}
 8003d32:	b009      	add	sp, #36	; 0x24
 8003d34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		drawFastHLine(a, y0, b - a + 1, color);
 8003d38:	f7ff bf9d 	b.w	8003c76 <drawFastHLine>
 8003d3c:	4633      	mov	r3, r6
 8003d3e:	463e      	mov	r6, r7
 8003d40:	461f      	mov	r7, r3
 8003d42:	462b      	mov	r3, r5
 8003d44:	4605      	mov	r5, r0
	if (y0 > y1) {
 8003d46:	4618      	mov	r0, r3
 8003d48:	e057      	b.n	8003dfa <fillTriangle+0x11a>
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	4602      	mov	r2, r0
 8003d50:	e7f9      	b.n	8003d46 <fillTriangle+0x66>
		a = x0 + sa / dy01;
 8003d52:	9b01      	ldr	r3, [sp, #4]
 8003d54:	9a06      	ldr	r2, [sp, #24]
 8003d56:	9905      	ldr	r1, [sp, #20]
 8003d58:	fb93 f0f2 	sdiv	r0, r3, r2
		b = x0 + sb / dy02;
 8003d5c:	9b03      	ldr	r3, [sp, #12]
		a = x0 + sa / dy01;
 8003d5e:	4428      	add	r0, r5
		b = x0 + sb / dy02;
 8003d60:	fb9a f2f3 	sdiv	r2, sl, r3
 8003d64:	9b01      	ldr	r3, [sp, #4]
 8003d66:	442a      	add	r2, r5
		a = x0 + sa / dy01;
 8003d68:	b200      	sxth	r0, r0
		b = x0 + sb / dy02;
 8003d6a:	b212      	sxth	r2, r2
 8003d6c:	440b      	add	r3, r1
		if (a > b)
 8003d6e:	4290      	cmp	r0, r2
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	bfc2      	ittt	gt
 8003d74:	4603      	movgt	r3, r0
 8003d76:	4610      	movgt	r0, r2
 8003d78:	461a      	movgt	r2, r3
		drawFastHLine(a, y, b - a + 1, color);
 8003d7a:	3201      	adds	r2, #1
 8003d7c:	1a12      	subs	r2, r2, r0
 8003d7e:	4641      	mov	r1, r8
 8003d80:	465b      	mov	r3, fp
 8003d82:	b212      	sxth	r2, r2
 8003d84:	f108 0801 	add.w	r8, r8, #1
 8003d88:	44ca      	add	sl, r9
 8003d8a:	f7ff ff74 	bl	8003c76 <drawFastHLine>
 8003d8e:	fa0f f888 	sxth.w	r8, r8
 8003d92:	e05d      	b.n	8003e50 <fillTriangle+0x170>
		a = x1 + sa / dy12;
 8003d94:	9b07      	ldr	r3, [sp, #28]
		drawFastHLine(a, y, b - a + 1, color);
 8003d96:	4641      	mov	r1, r8
		a = x1 + sa / dy12;
 8003d98:	fb94 f0f3 	sdiv	r0, r4, r3
 8003d9c:	9b00      	ldr	r3, [sp, #0]
 8003d9e:	f108 0801 	add.w	r8, r8, #1
 8003da2:	4418      	add	r0, r3
		b = x0 + sb / dy02;
 8003da4:	9b03      	ldr	r3, [sp, #12]
		a = x1 + sa / dy12;
 8003da6:	b200      	sxth	r0, r0
		b = x0 + sb / dy02;
 8003da8:	fb96 f2f3 	sdiv	r2, r6, r3
 8003dac:	442a      	add	r2, r5
		sa += dx12;
 8003dae:	9b04      	ldr	r3, [sp, #16]
		b = x0 + sb / dy02;
 8003db0:	b212      	sxth	r2, r2
		if (a > b)
 8003db2:	4290      	cmp	r0, r2
		sa += dx12;
 8003db4:	441c      	add	r4, r3
		if (a > b)
 8003db6:	bfc2      	ittt	gt
 8003db8:	4603      	movgt	r3, r0
 8003dba:	4610      	movgt	r0, r2
 8003dbc:	461a      	movgt	r2, r3
		drawFastHLine(a, y, b - a + 1, color);
 8003dbe:	3201      	adds	r2, #1
 8003dc0:	1a12      	subs	r2, r2, r0
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	b212      	sxth	r2, r2
		sb += dx02;
 8003dc6:	444e      	add	r6, r9
		drawFastHLine(a, y, b - a + 1, color);
 8003dc8:	f7ff ff55 	bl	8003c76 <drawFastHLine>
 8003dcc:	fa0f f888 	sxth.w	r8, r8
 8003dd0:	e04a      	b.n	8003e68 <fillTriangle+0x188>
	if (y1 > y2) {
 8003dd2:	42b3      	cmp	r3, r6
 8003dd4:	dd99      	ble.n	8003d0a <fillTriangle+0x2a>
	if (y0 > y1) {
 8003dd6:	42b1      	cmp	r1, r6
 8003dd8:	460c      	mov	r4, r1
 8003dda:	dcb6      	bgt.n	8003d4a <fillTriangle+0x6a>
 8003ddc:	4637      	mov	r7, r6
 8003dde:	461e      	mov	r6, r3
 8003de0:	4613      	mov	r3, r2
 8003de2:	4602      	mov	r2, r0
		_swap_int16_t(x2, x1);
 8003de4:	4628      	mov	r0, r5
	if (y0 > y1) {
 8003de6:	461d      	mov	r5, r3
 8003de8:	e789      	b.n	8003cfe <fillTriangle+0x1e>
 8003dea:	42b3      	cmp	r3, r6
 8003dec:	dc05      	bgt.n	8003dfa <fillTriangle+0x11a>
 8003dee:	4633      	mov	r3, r6
 8003df0:	4626      	mov	r6, r4
 8003df2:	461c      	mov	r4, r3
 8003df4:	462b      	mov	r3, r5
		_swap_int16_t(x0, x1);
 8003df6:	4615      	mov	r5, r2
		_swap_int16_t(x2, x1);
 8003df8:	461a      	mov	r2, r3
	int32_t sa = 0, sb = 0;
 8003dfa:	f04f 0a00 	mov.w	sl, #0
	for (y = y0; y <= last; y++) {
 8003dfe:	46b0      	mov	r8, r6
	int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8003e00:	b293      	uxth	r3, r2
 8003e02:	b2ad      	uxth	r5, r5
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	1b5b      	subs	r3, r3, r5
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	b2b2      	uxth	r2, r6
 8003e0c:	9305      	str	r3, [sp, #20]
 8003e0e:	b2a3      	uxth	r3, r4
 8003e10:	1a99      	subs	r1, r3, r2
 8003e12:	b209      	sxth	r1, r1
 8003e14:	9106      	str	r1, [sp, #24]
 8003e16:	b2b9      	uxth	r1, r7
 8003e18:	1a8a      	subs	r2, r1, r2
 8003e1a:	b212      	sxth	r2, r2
 8003e1c:	9203      	str	r2, [sp, #12]
			dx12 = x2 - x1, dy12 = y2 - y1;
 8003e1e:	9a00      	ldr	r2, [sp, #0]
	int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8003e20:	b280      	uxth	r0, r0
	if (y1 == y2)
 8003e22:	42bc      	cmp	r4, r7
	int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8003e24:	eba0 0905 	sub.w	r9, r0, r5
			dx12 = x2 - x1, dy12 = y2 - y1;
 8003e28:	eba0 0002 	sub.w	r0, r0, r2
 8003e2c:	eba1 0103 	sub.w	r1, r1, r3
 8003e30:	b202      	sxth	r2, r0
		last = y1 - 1; // Skip it
 8003e32:	bf18      	it	ne
 8003e34:	f103 33ff 	addne.w	r3, r3, #4294967295
			dx12 = x2 - x1, dy12 = y2 - y1;
 8003e38:	9204      	str	r2, [sp, #16]
		last = y1 - 1; // Skip it
 8003e3a:	bf18      	it	ne
 8003e3c:	b21b      	sxthne	r3, r3
			dx12 = x2 - x1, dy12 = y2 - y1;
 8003e3e:	b20a      	sxth	r2, r1
	int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8003e40:	fa0f f989 	sxth.w	r9, r9
			dx12 = x2 - x1, dy12 = y2 - y1;
 8003e44:	9207      	str	r2, [sp, #28]
		last = y1 - 1; // Skip it
 8003e46:	bf14      	ite	ne
 8003e48:	9302      	strne	r3, [sp, #8]
 8003e4a:	9402      	streq	r4, [sp, #8]
	int32_t sa = 0, sb = 0;
 8003e4c:	f8cd a004 	str.w	sl, [sp, #4]
	for (y = y0; y <= last; y++) {
 8003e50:	9b02      	ldr	r3, [sp, #8]
 8003e52:	4598      	cmp	r8, r3
 8003e54:	f77f af7d 	ble.w	8003d52 <fillTriangle+0x72>
	sa = (int32_t) dx12 * (y - y1);
 8003e58:	9b04      	ldr	r3, [sp, #16]
 8003e5a:	eba8 0404 	sub.w	r4, r8, r4
	sb = (int32_t) dx02 * (y - y0);
 8003e5e:	eba8 0606 	sub.w	r6, r8, r6
	sa = (int32_t) dx12 * (y - y1);
 8003e62:	435c      	muls	r4, r3
	sb = (int32_t) dx02 * (y - y0);
 8003e64:	fb09 f606 	mul.w	r6, r9, r6
	for (; y <= y2; y++) {
 8003e68:	45b8      	cmp	r8, r7
 8003e6a:	dd93      	ble.n	8003d94 <fillTriangle+0xb4>
}
 8003e6c:	b009      	add	sp, #36	; 0x24
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003e74 <drawChar>:
	}

}

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	b08f      	sub	sp, #60	; 0x3c
 8003e7a:	9306      	str	r3, [sp, #24]

		// Character is assumed previously filtered by write() to eliminate
		// newlines, returns, non-printable characters, etc.  Calling
		// drawChar() directly with 'bad' characters of font may cause mayhem!

		c -= (uint8_t) pgm_read_byte(&gfxFont->first);
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <drawChar+0x114>)
		uint16_t bg, uint8_t size) {
 8003e7e:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
		c -= (uint8_t) pgm_read_byte(&gfxFont->first);
 8003e82:	681d      	ldr	r5, [r3, #0]
		int8_t xo = pgm_read_byte(&glyph->xOffset), yo = pgm_read_byte(
				&glyph->yOffset);
		uint8_t xx, yy, bits = 0, bit = 0;
		int16_t xo16 = 0, yo16 = 0;

		if (size > 1) {
 8003e84:	f1b9 0f01 	cmp.w	r9, #1
		c -= (uint8_t) pgm_read_byte(&gfxFont->first);
 8003e88:	7a2b      	ldrb	r3, [r5, #8]
		int16_t xo16 = 0, yo16 = 0;
 8003e8a:	bf98      	it	ls
 8003e8c:	f04f 0a00 	movls.w	sl, #0
		c -= (uint8_t) pgm_read_byte(&gfxFont->first);
 8003e90:	eba2 0203 	sub.w	r2, r2, r3
		GFXglyph *glyph = &(((GFXglyph *) pgm_read_pointer(&gfxFont->glyph))[c]);
 8003e94:	f04f 030a 	mov.w	r3, #10
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	fb03 f202 	mul.w	r2, r3, r2
 8003e9e:	88ab      	ldrh	r3, [r5, #4]
		uint8_t *bitmap = (uint8_t *) pgm_read_pointer(&gfxFont->bitmap);
 8003ea0:	882d      	ldrh	r5, [r5, #0]
		GFXglyph *glyph = &(((GFXglyph *) pgm_read_pointer(&gfxFont->glyph))[c]);
 8003ea2:	eb02 0403 	add.w	r4, r2, r3
		uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8003ea6:	f832 b003 	ldrh.w	fp, [r2, r3]
		uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(
 8003eaa:	78a3      	ldrb	r3, [r4, #2]
		int8_t xo = pgm_read_byte(&glyph->xOffset), yo = pgm_read_byte(
 8003eac:	f994 2008 	ldrsb.w	r2, [r4, #8]
		uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	7923      	ldrb	r3, [r4, #4]
 8003eb4:	b280      	uxth	r0, r0
 8003eb6:	9309      	str	r3, [sp, #36]	; 0x24
		int8_t xo = pgm_read_byte(&glyph->xOffset), yo = pgm_read_byte(
 8003eb8:	f994 3007 	ldrsb.w	r3, [r4, #7]
				}
				if (bits & 0x80) {
					if (size == 1) {
						writePixel(x + xo + xx, y + yo + yy, color);
					} else {
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003ebc:	fa1f f489 	uxth.w	r4, r9
		int8_t xo = pgm_read_byte(&glyph->xOffset), yo = pgm_read_byte(
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	9005      	str	r0, [sp, #20]
		uint8_t *bitmap = (uint8_t *) pgm_read_pointer(&gfxFont->bitmap);
 8003ec4:	9508      	str	r5, [sp, #32]
 8003ec6:	4620      	mov	r0, r4
		uint8_t xx, yy, bits = 0, bit = 0;
 8003ec8:	f04f 0500 	mov.w	r5, #0
		int16_t xo16 = 0, yo16 = 0;
 8003ecc:	bf94      	ite	ls
 8003ece:	4653      	movls	r3, sl
			xo16 = xo;
 8003ed0:	f9bd 3010 	ldrshhi.w	r3, [sp, #16]
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003ed4:	9402      	str	r4, [sp, #8]
 8003ed6:	9c05      	ldr	r4, [sp, #20]
		uint8_t xx, yy, bits = 0, bit = 0;
 8003ed8:	462e      	mov	r6, r5
 8003eda:	fb03 4300 	mla	r3, r3, r0, r4
		for (yy = 0; yy < h; yy++) {
 8003ede:	462c      	mov	r4, r5
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	930b      	str	r3, [sp, #44]	; 0x2c
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003ee4:	b28b      	uxth	r3, r1
 8003ee6:	9307      	str	r3, [sp, #28]
						writePixel(x + xo + xx, y + yo + yy, color);
 8003ee8:	4413      	add	r3, r2
			yo16 = yo;
 8003eea:	bf88      	it	hi
 8003eec:	fa0f fa82 	sxthhi.w	sl, r2
						writePixel(x + xo + xx, y + yo + yy, color);
 8003ef0:	930d      	str	r3, [sp, #52]	; 0x34
		for (yy = 0; yy < h; yy++) {
 8003ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d243      	bcs.n	8003f80 <drawChar+0x10c>
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003ef8:	9a02      	ldr	r2, [sp, #8]
 8003efa:	9907      	ldr	r1, [sp, #28]
 8003efc:	eb0a 0304 	add.w	r3, sl, r4
 8003f00:	fb03 1302 	mla	r3, r3, r2, r1
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	930a      	str	r3, [sp, #40]	; 0x28
						writePixel(x + xo + xx, y + yo + yy, color);
 8003f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003f0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
						writePixel(x + xo + xx, y + yo + yy, color);
 8003f0c:	4423      	add	r3, r4
	drawPixel(x, y, color);
 8003f0e:	b21b      	sxth	r3, r3
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003f10:	f04f 0800 	mov.w	r8, #0
	drawPixel(x, y, color);
 8003f14:	930c      	str	r3, [sp, #48]	; 0x30
 8003f16:	e01d      	b.n	8003f54 <drawChar+0xe0>
				if (!(bit++ & 7)) {
 8003f18:	075a      	lsls	r2, r3, #29
					bits = pgm_read_byte(&bitmap[bo++]);
 8003f1a:	bf01      	itttt	eq
 8003f1c:	9a08      	ldreq	r2, [sp, #32]
 8003f1e:	f10b 0301 	addeq.w	r3, fp, #1
 8003f22:	f812 600b 	ldrbeq.w	r6, [r2, fp]
 8003f26:	fa1f fb83 	uxtheq.w	fp, r3
				if (bits & 0x80) {
 8003f2a:	0633      	lsls	r3, r6, #24
 8003f2c:	d50b      	bpl.n	8003f46 <drawChar+0xd2>
					if (size == 1) {
 8003f2e:	f1b9 0f01 	cmp.w	r9, #1
 8003f32:	d11b      	bne.n	8003f6c <drawChar+0xf8>
						writePixel(x + xo + xx, y + yo + yy, color);
 8003f34:	9a04      	ldr	r2, [sp, #16]
 8003f36:	9b05      	ldr	r3, [sp, #20]
	drawPixel(x, y, color);
 8003f38:	990c      	ldr	r1, [sp, #48]	; 0x30
						writePixel(x + xo + xx, y + yo + yy, color);
 8003f3a:	1898      	adds	r0, r3, r2
	drawPixel(x, y, color);
 8003f3c:	4440      	add	r0, r8
 8003f3e:	9a06      	ldr	r2, [sp, #24]
 8003f40:	b200      	sxth	r0, r0
 8003f42:	f7ff f843 	bl	8002fcc <drawPixel>
 8003f46:	9b02      	ldr	r3, [sp, #8]
								size, size, color);
					}
				}
				bits <<= 1;
 8003f48:	0076      	lsls	r6, r6, #1
 8003f4a:	441f      	add	r7, r3
 8003f4c:	b2f6      	uxtb	r6, r6
 8003f4e:	f108 0801 	add.w	r8, r8, #1
 8003f52:	b2bf      	uxth	r7, r7
			for (xx = 0; xx < w; xx++) {
 8003f54:	9903      	ldr	r1, [sp, #12]
 8003f56:	fa5f f288 	uxtb.w	r2, r8
 8003f5a:	18ab      	adds	r3, r5, r2
 8003f5c:	4291      	cmp	r1, r2
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	d8da      	bhi.n	8003f18 <drawChar+0xa4>
 8003f62:	440d      	add	r5, r1
		for (yy = 0; yy < h; yy++) {
 8003f64:	3401      	adds	r4, #1
 8003f66:	b2ed      	uxtb	r5, r5
 8003f68:	b2e4      	uxtb	r4, r4
 8003f6a:	e7c2      	b.n	8003ef2 <drawChar+0x7e>
						fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size,
 8003f6c:	9a06      	ldr	r2, [sp, #24]
 8003f6e:	fa0f f389 	sxth.w	r3, r9
 8003f72:	9200      	str	r2, [sp, #0]
 8003f74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f76:	461a      	mov	r2, r3
 8003f78:	b238      	sxth	r0, r7
 8003f7a:	f7ff fd37 	bl	80039ec <fillRect>
 8003f7e:	e7e2      	b.n	8003f46 <drawChar+0xd2>
			}
		}

	} // End classic vs custom font
}
 8003f80:	b00f      	add	sp, #60	; 0x3c
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	200000c4 	.word	0x200000c4

08003f8c <write>:
 */
/**************************************************************************/
size_t write(uint8_t c) {
	{

		if (c == '\n') {
 8003f8c:	280a      	cmp	r0, #10
size_t write(uint8_t c) {
 8003f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f90:	4602      	mov	r2, r0
		if (c == '\n') {
 8003f92:	d10f      	bne.n	8003fb4 <write+0x28>
			cursor_x = 0;
 8003f94:	2200      	movs	r2, #0
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <write+0xb4>)
 8003f98:	801a      	strh	r2, [r3, #0]
			cursor_y += (int16_t) textsize
					* (uint8_t) pgm_read_byte(&gfxFont->yAdvance);
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <write+0xb8>)
			cursor_y += (int16_t) textsize
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <write+0xbc>)
					* (uint8_t) pgm_read_byte(&gfxFont->yAdvance);
 8003f9e:	681b      	ldr	r3, [r3, #0]
			cursor_y += (int16_t) textsize
 8003fa0:	8811      	ldrh	r1, [r2, #0]
					* (uint8_t) pgm_read_byte(&gfxFont->yAdvance);
 8003fa2:	7a98      	ldrb	r0, [r3, #10]
 8003fa4:	4b29      	ldr	r3, [pc, #164]	; (800404c <write+0xc0>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
			cursor_y += (int16_t) textsize
 8003fa8:	fb00 1303 	mla	r3, r0, r3, r1
 8003fac:	8013      	strh	r3, [r2, #0]
			}
		}

	}
	return 1;
}
 8003fae:	2001      	movs	r0, #1
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (c != '\r') {
 8003fb4:	280d      	cmp	r0, #13
 8003fb6:	d0fa      	beq.n	8003fae <write+0x22>
			uint8_t first = pgm_read_byte(&gfxFont->first);
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <write+0xb8>)
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	7a04      	ldrb	r4, [r0, #8]
			if ((c >= first)
 8003fbe:	42a2      	cmp	r2, r4
 8003fc0:	d3f5      	bcc.n	8003fae <write+0x22>
					&& (c <= (uint8_t) pgm_read_byte(&gfxFont->last))) {
 8003fc2:	7a43      	ldrb	r3, [r0, #9]
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d3f2      	bcc.n	8003fae <write+0x22>
						&gfxFont->glyph))[c - first]);
 8003fc8:	210a      	movs	r1, #10
 8003fca:	8883      	ldrh	r3, [r0, #4]
 8003fcc:	1b14      	subs	r4, r2, r4
 8003fce:	fb01 3404 	mla	r4, r1, r4, r3
				uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(
 8003fd2:	f894 e002 	ldrb.w	lr, [r4, #2]
				if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8003fd6:	f1be 0f00 	cmp.w	lr, #0
 8003fda:	d0e8      	beq.n	8003fae <write+0x22>
 8003fdc:	7923      	ldrb	r3, [r4, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0e5      	beq.n	8003fae <write+0x22>
					if (wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <write+0xc4>)
 8003fe4:	4d16      	ldr	r5, [pc, #88]	; (8004040 <write+0xb4>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4f17      	ldr	r7, [pc, #92]	; (8004048 <write+0xbc>)
 8003fea:	4e18      	ldr	r6, [pc, #96]	; (800404c <write+0xc0>)
 8003fec:	b1a3      	cbz	r3, 8004018 <write+0x8c>
 8003fee:	f994 3007 	ldrsb.w	r3, [r4, #7]
 8003ff2:	7831      	ldrb	r1, [r6, #0]
 8003ff4:	4473      	add	r3, lr
 8003ff6:	f8b5 e000 	ldrh.w	lr, [r5]
 8003ffa:	fb01 e303 	mla	r3, r1, r3, lr
 8003ffe:	f8df e05c 	ldr.w	lr, [pc, #92]	; 800405c <write+0xd0>
 8004002:	f8be e000 	ldrh.w	lr, [lr]
 8004006:	4573      	cmp	r3, lr
 8004008:	dd06      	ble.n	8004018 <write+0x8c>
						cursor_x = 0;
 800400a:	2300      	movs	r3, #0
								* (uint8_t) pgm_read_byte(&gfxFont->yAdvance);
 800400c:	7a80      	ldrb	r0, [r0, #10]
						cursor_x = 0;
 800400e:	802b      	strh	r3, [r5, #0]
						cursor_y += (int16_t) textsize
 8004010:	883b      	ldrh	r3, [r7, #0]
 8004012:	fb00 3101 	mla	r1, r0, r1, r3
 8004016:	8039      	strh	r1, [r7, #0]
					drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor,
 8004018:	f9b7 1000 	ldrsh.w	r1, [r7]
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <write+0xc8>)
 800401e:	7837      	ldrb	r7, [r6, #0]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	9701      	str	r7, [sp, #4]
 8004024:	4f0c      	ldr	r7, [pc, #48]	; (8004058 <write+0xcc>)
 8004026:	f9b5 0000 	ldrsh.w	r0, [r5]
 800402a:	883f      	ldrh	r7, [r7, #0]
 800402c:	9700      	str	r7, [sp, #0]
 800402e:	f7ff ff21 	bl	8003e74 <drawChar>
					cursor_x += (uint8_t) pgm_read_byte(&glyph->xAdvance)
 8004032:	882a      	ldrh	r2, [r5, #0]
 8004034:	79a1      	ldrb	r1, [r4, #6]
											* (int16_t) textsize;
 8004036:	7833      	ldrb	r3, [r6, #0]
					cursor_x += (uint8_t) pgm_read_byte(&glyph->xAdvance)
 8004038:	fb01 2303 	mla	r3, r1, r3, r2
 800403c:	802b      	strh	r3, [r5, #0]
 800403e:	e7b6      	b.n	8003fae <write+0x22>
 8004040:	200000b0 	.word	0x200000b0
 8004044:	200000c4 	.word	0x200000c4
 8004048:	200000b2 	.word	0x200000b2
 800404c:	20000018 	.word	0x20000018
 8004050:	20000019 	.word	0x20000019
 8004054:	20000016 	.word	0x20000016
 8004058:	20000014 	.word	0x20000014
 800405c:	20000012 	.word	0x20000012

08004060 <setFont>:
/*!
 @brief Set the font to display when print()ing, either custom or default
 @param  f  The GFXfont object, if NULL use built in 6x8 font
 */
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <setFont+0x20>)
	if (f) {            // Font struct pointer passed in?
		if (!gfxFont) { // And no current font struct?
 8004062:	681a      	ldr	r2, [r3, #0]
	if (f) {            // Font struct pointer passed in?
 8004064:	b130      	cbz	r0, 8004074 <setFont+0x14>
		if (!gfxFont) { // And no current font struct?
 8004066:	b91a      	cbnz	r2, 8004070 <setFont+0x10>
			// Switching from classic to new font behavior.
			// Move cursor pos down 6 pixels so it's on baseline.
			cursor_y += 6;
 8004068:	4906      	ldr	r1, [pc, #24]	; (8004084 <setFont+0x24>)
 800406a:	880a      	ldrh	r2, [r1, #0]
 800406c:	3206      	adds	r2, #6
		}
	} else if (gfxFont) { // NULL passed.  Current font struct defined?
		// Switching from new to classic font behavior.
		// Move cursor pos up 6 pixels so it's at top-left of char.
		cursor_y -= 6;
 800406e:	800a      	strh	r2, [r1, #0]
	}
	gfxFont = (GFXfont *) f;
 8004070:	6018      	str	r0, [r3, #0]
 8004072:	4770      	bx	lr
	} else if (gfxFont) { // NULL passed.  Current font struct defined?
 8004074:	2a00      	cmp	r2, #0
 8004076:	d0fb      	beq.n	8004070 <setFont+0x10>
		cursor_y -= 6;
 8004078:	4902      	ldr	r1, [pc, #8]	; (8004084 <setFont+0x24>)
 800407a:	880a      	ldrh	r2, [r1, #0]
 800407c:	3a06      	subs	r2, #6
 800407e:	e7f6      	b.n	800406e <setFont+0xe>
 8004080:	200000c4 	.word	0x200000c4
 8004084:	200000b2 	.word	0x200000b2

08004088 <printnewtstr>:
		*y1 = miny;
		*h = maxy - miny + 1;
	}
}

void printnewtstr(int row, int col, uint16_t txtcolor, const GFXfont *f,uint8_t txtsize, uint8_t *str) {
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800408e:	4605      	mov	r5, r0
 8004090:	4617      	mov	r7, r2
	setFont(f);
 8004092:	4618      	mov	r0, r3
void printnewtstr(int row, int col, uint16_t txtcolor, const GFXfont *f,uint8_t txtsize, uint8_t *str) {
 8004094:	460e      	mov	r6, r1
	setFont(f);
 8004096:	f7ff ffe3 	bl	8004060 <setFont>
	textcolor = txtcolor;
	textsize = (txtsize > 0) ? txtsize : 1;
 800409a:	2c00      	cmp	r4, #0
 800409c:	bf08      	it	eq
 800409e:	2401      	moveq	r4, #1
	textcolor = txtcolor;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <printnewtstr+0x3c>)
 80040a2:	801f      	strh	r7, [r3, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <printnewtstr+0x40>)
 80040a6:	701c      	strb	r4, [r3, #0]
void setTextSize(uint8_t size) {
	textsize = size;
}

void setCursor(int16_t x, int16_t y) {
	cursor_x = x;
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <printnewtstr+0x44>)
 80040aa:	9c07      	ldr	r4, [sp, #28]
 80040ac:	801e      	strh	r6, [r3, #0]
	cursor_y = y;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <printnewtstr+0x48>)
 80040b0:	3c01      	subs	r4, #1
 80040b2:	801d      	strh	r5, [r3, #0]
	while (*str)
 80040b4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80040b8:	b900      	cbnz	r0, 80040bc <printnewtstr+0x34>
}
 80040ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		write(*str++);
 80040bc:	f7ff ff66 	bl	8003f8c <write>
 80040c0:	e7f8      	b.n	80040b4 <printnewtstr+0x2c>
 80040c2:	bf00      	nop
 80040c4:	20000016 	.word	0x20000016
 80040c8:	20000018 	.word	0x20000018
 80040cc:	200000b0 	.word	0x200000b0
 80040d0:	200000b2 	.word	0x200000b2

080040d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80040d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80040d6:	e003      	b.n	80040e0 <LoopCopyDataInit>

080040d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80040da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80040dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80040de:	3104      	adds	r1, #4

080040e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80040e0:	480a      	ldr	r0, [pc, #40]	; (800410c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80040e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80040e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80040e8:	d3f6      	bcc.n	80040d8 <CopyDataInit>
  ldr r2, =_sbss
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80040ec:	e002      	b.n	80040f4 <LoopFillZerobss>

080040ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80040f0:	f842 3b04 	str.w	r3, [r2], #4

080040f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80040f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80040f8:	d3f9      	bcc.n	80040ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040fa:	f7fd ff45 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040fe:	f000 f815 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004102:	f7fd fda3 	bl	8001c4c <main>
  bx lr
 8004106:	4770      	bx	lr
  ldr r3, =_sidata
 8004108:	0800dba0 	.word	0x0800dba0
  ldr r0, =_sdata
 800410c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004110:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8004114:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8004118:	2000012c 	.word	0x2000012c

0800411c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800411c:	e7fe      	b.n	800411c <ADC1_2_IRQHandler>
	...

08004120 <__errno>:
 8004120:	4b01      	ldr	r3, [pc, #4]	; (8004128 <__errno+0x8>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000001c 	.word	0x2000001c

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	2500      	movs	r5, #0
 8004130:	4e0c      	ldr	r6, [pc, #48]	; (8004164 <__libc_init_array+0x38>)
 8004132:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004134:	1ba4      	subs	r4, r4, r6
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	42a5      	cmp	r5, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	f001 fcf6 	bl	8005b2c <_init>
 8004140:	2500      	movs	r5, #0
 8004142:	4e0a      	ldr	r6, [pc, #40]	; (800416c <__libc_init_array+0x40>)
 8004144:	4c0a      	ldr	r4, [pc, #40]	; (8004170 <__libc_init_array+0x44>)
 8004146:	1ba4      	subs	r4, r4, r6
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	42a5      	cmp	r5, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004154:	4798      	blx	r3
 8004156:	3501      	adds	r5, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800415e:	4798      	blx	r3
 8004160:	3501      	adds	r5, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	0800db98 	.word	0x0800db98
 8004168:	0800db98 	.word	0x0800db98
 800416c:	0800db98 	.word	0x0800db98
 8004170:	0800db9c 	.word	0x0800db9c

08004174 <__itoa>:
 8004174:	1e93      	subs	r3, r2, #2
 8004176:	2b22      	cmp	r3, #34	; 0x22
 8004178:	b510      	push	{r4, lr}
 800417a:	460c      	mov	r4, r1
 800417c:	d904      	bls.n	8004188 <__itoa+0x14>
 800417e:	2300      	movs	r3, #0
 8004180:	461c      	mov	r4, r3
 8004182:	700b      	strb	r3, [r1, #0]
 8004184:	4620      	mov	r0, r4
 8004186:	bd10      	pop	{r4, pc}
 8004188:	2a0a      	cmp	r2, #10
 800418a:	d109      	bne.n	80041a0 <__itoa+0x2c>
 800418c:	2800      	cmp	r0, #0
 800418e:	da07      	bge.n	80041a0 <__itoa+0x2c>
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	700b      	strb	r3, [r1, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	4240      	negs	r0, r0
 8004198:	4421      	add	r1, r4
 800419a:	f000 f831 	bl	8004200 <__utoa>
 800419e:	e7f1      	b.n	8004184 <__itoa+0x10>
 80041a0:	2100      	movs	r1, #0
 80041a2:	e7f9      	b.n	8004198 <__itoa+0x24>

080041a4 <itoa>:
 80041a4:	f7ff bfe6 	b.w	8004174 <__itoa>

080041a8 <memset>:
 80041a8:	4603      	mov	r3, r0
 80041aa:	4402      	add	r2, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <siprintf>:
 80041b8:	b40e      	push	{r1, r2, r3}
 80041ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80041be:	b500      	push	{lr}
 80041c0:	b09c      	sub	sp, #112	; 0x70
 80041c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80041c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041ca:	9104      	str	r1, [sp, #16]
 80041cc:	9107      	str	r1, [sp, #28]
 80041ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041d2:	ab1d      	add	r3, sp, #116	; 0x74
 80041d4:	9002      	str	r0, [sp, #8]
 80041d6:	9006      	str	r0, [sp, #24]
 80041d8:	4808      	ldr	r0, [pc, #32]	; (80041fc <siprintf+0x44>)
 80041da:	f853 2b04 	ldr.w	r2, [r3], #4
 80041de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80041e2:	6800      	ldr	r0, [r0, #0]
 80041e4:	a902      	add	r1, sp, #8
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	f000 f8a6 	bl	8004338 <_svfiprintf_r>
 80041ec:	2200      	movs	r2, #0
 80041ee:	9b02      	ldr	r3, [sp, #8]
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	b01c      	add	sp, #112	; 0x70
 80041f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f8:	b003      	add	sp, #12
 80041fa:	4770      	bx	lr
 80041fc:	2000001c 	.word	0x2000001c

08004200 <__utoa>:
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	b08b      	sub	sp, #44	; 0x2c
 8004204:	4603      	mov	r3, r0
 8004206:	460f      	mov	r7, r1
 8004208:	466d      	mov	r5, sp
 800420a:	4c1c      	ldr	r4, [pc, #112]	; (800427c <__utoa+0x7c>)
 800420c:	f104 0e20 	add.w	lr, r4, #32
 8004210:	462e      	mov	r6, r5
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	6861      	ldr	r1, [r4, #4]
 8004216:	3408      	adds	r4, #8
 8004218:	c603      	stmia	r6!, {r0, r1}
 800421a:	4574      	cmp	r4, lr
 800421c:	4635      	mov	r5, r6
 800421e:	d1f7      	bne.n	8004210 <__utoa+0x10>
 8004220:	7921      	ldrb	r1, [r4, #4]
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	7131      	strb	r1, [r6, #4]
 8004226:	1e91      	subs	r1, r2, #2
 8004228:	2922      	cmp	r1, #34	; 0x22
 800422a:	6030      	str	r0, [r6, #0]
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	d904      	bls.n	800423c <__utoa+0x3c>
 8004232:	7039      	strb	r1, [r7, #0]
 8004234:	460f      	mov	r7, r1
 8004236:	4638      	mov	r0, r7
 8004238:	b00b      	add	sp, #44	; 0x2c
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423c:	1e78      	subs	r0, r7, #1
 800423e:	4606      	mov	r6, r0
 8004240:	fbb3 f5f2 	udiv	r5, r3, r2
 8004244:	fb02 3315 	mls	r3, r2, r5, r3
 8004248:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800424c:	4473      	add	r3, lr
 800424e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004252:	1c4c      	adds	r4, r1, #1
 8004254:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004258:	462b      	mov	r3, r5
 800425a:	b965      	cbnz	r5, 8004276 <__utoa+0x76>
 800425c:	553d      	strb	r5, [r7, r4]
 800425e:	187a      	adds	r2, r7, r1
 8004260:	1acc      	subs	r4, r1, r3
 8004262:	42a3      	cmp	r3, r4
 8004264:	dae7      	bge.n	8004236 <__utoa+0x36>
 8004266:	7844      	ldrb	r4, [r0, #1]
 8004268:	7815      	ldrb	r5, [r2, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004270:	f802 4901 	strb.w	r4, [r2], #-1
 8004274:	e7f4      	b.n	8004260 <__utoa+0x60>
 8004276:	4621      	mov	r1, r4
 8004278:	e7e2      	b.n	8004240 <__utoa+0x40>
 800427a:	bf00      	nop
 800427c:	0800d963 	.word	0x0800d963

08004280 <__ssputs_r>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	688e      	ldr	r6, [r1, #8]
 8004286:	4682      	mov	sl, r0
 8004288:	429e      	cmp	r6, r3
 800428a:	460c      	mov	r4, r1
 800428c:	4691      	mov	r9, r2
 800428e:	4698      	mov	r8, r3
 8004290:	d835      	bhi.n	80042fe <__ssputs_r+0x7e>
 8004292:	898a      	ldrh	r2, [r1, #12]
 8004294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004298:	d031      	beq.n	80042fe <__ssputs_r+0x7e>
 800429a:	2302      	movs	r3, #2
 800429c:	6825      	ldr	r5, [r4, #0]
 800429e:	6909      	ldr	r1, [r1, #16]
 80042a0:	1a6f      	subs	r7, r5, r1
 80042a2:	6965      	ldr	r5, [r4, #20]
 80042a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80042ac:	f108 0301 	add.w	r3, r8, #1
 80042b0:	443b      	add	r3, r7
 80042b2:	429d      	cmp	r5, r3
 80042b4:	bf38      	it	cc
 80042b6:	461d      	movcc	r5, r3
 80042b8:	0553      	lsls	r3, r2, #21
 80042ba:	d531      	bpl.n	8004320 <__ssputs_r+0xa0>
 80042bc:	4629      	mov	r1, r5
 80042be:	f000 fb47 	bl	8004950 <_malloc_r>
 80042c2:	4606      	mov	r6, r0
 80042c4:	b950      	cbnz	r0, 80042dc <__ssputs_r+0x5c>
 80042c6:	230c      	movs	r3, #12
 80042c8:	f8ca 3000 	str.w	r3, [sl]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042dc:	463a      	mov	r2, r7
 80042de:	6921      	ldr	r1, [r4, #16]
 80042e0:	f000 fac4 	bl	800486c <memcpy>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	6126      	str	r6, [r4, #16]
 80042f2:	443e      	add	r6, r7
 80042f4:	6026      	str	r6, [r4, #0]
 80042f6:	4646      	mov	r6, r8
 80042f8:	6165      	str	r5, [r4, #20]
 80042fa:	1bed      	subs	r5, r5, r7
 80042fc:	60a5      	str	r5, [r4, #8]
 80042fe:	4546      	cmp	r6, r8
 8004300:	bf28      	it	cs
 8004302:	4646      	movcs	r6, r8
 8004304:	4649      	mov	r1, r9
 8004306:	4632      	mov	r2, r6
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	f000 faba 	bl	8004882 <memmove>
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	2000      	movs	r0, #0
 8004312:	1b9b      	subs	r3, r3, r6
 8004314:	60a3      	str	r3, [r4, #8]
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	441e      	add	r6, r3
 800431a:	6026      	str	r6, [r4, #0]
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	462a      	mov	r2, r5
 8004322:	f000 fb73 	bl	8004a0c <_realloc_r>
 8004326:	4606      	mov	r6, r0
 8004328:	2800      	cmp	r0, #0
 800432a:	d1e1      	bne.n	80042f0 <__ssputs_r+0x70>
 800432c:	6921      	ldr	r1, [r4, #16]
 800432e:	4650      	mov	r0, sl
 8004330:	f000 fac2 	bl	80048b8 <_free_r>
 8004334:	e7c7      	b.n	80042c6 <__ssputs_r+0x46>
	...

08004338 <_svfiprintf_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	b09d      	sub	sp, #116	; 0x74
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	898b      	ldrh	r3, [r1, #12]
 8004342:	4680      	mov	r8, r0
 8004344:	061c      	lsls	r4, r3, #24
 8004346:	460d      	mov	r5, r1
 8004348:	4616      	mov	r6, r2
 800434a:	d50f      	bpl.n	800436c <_svfiprintf_r+0x34>
 800434c:	690b      	ldr	r3, [r1, #16]
 800434e:	b96b      	cbnz	r3, 800436c <_svfiprintf_r+0x34>
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	f000 fafd 	bl	8004950 <_malloc_r>
 8004356:	6028      	str	r0, [r5, #0]
 8004358:	6128      	str	r0, [r5, #16]
 800435a:	b928      	cbnz	r0, 8004368 <_svfiprintf_r+0x30>
 800435c:	230c      	movs	r3, #12
 800435e:	f8c8 3000 	str.w	r3, [r8]
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	e0c4      	b.n	80044f2 <_svfiprintf_r+0x1ba>
 8004368:	2340      	movs	r3, #64	; 0x40
 800436a:	616b      	str	r3, [r5, #20]
 800436c:	2300      	movs	r3, #0
 800436e:	9309      	str	r3, [sp, #36]	; 0x24
 8004370:	2320      	movs	r3, #32
 8004372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004376:	2330      	movs	r3, #48	; 0x30
 8004378:	f04f 0b01 	mov.w	fp, #1
 800437c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004380:	4637      	mov	r7, r6
 8004382:	463c      	mov	r4, r7
 8004384:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d13c      	bne.n	8004406 <_svfiprintf_r+0xce>
 800438c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004390:	d00b      	beq.n	80043aa <_svfiprintf_r+0x72>
 8004392:	4653      	mov	r3, sl
 8004394:	4632      	mov	r2, r6
 8004396:	4629      	mov	r1, r5
 8004398:	4640      	mov	r0, r8
 800439a:	f7ff ff71 	bl	8004280 <__ssputs_r>
 800439e:	3001      	adds	r0, #1
 80043a0:	f000 80a2 	beq.w	80044e8 <_svfiprintf_r+0x1b0>
 80043a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a6:	4453      	add	r3, sl
 80043a8:	9309      	str	r3, [sp, #36]	; 0x24
 80043aa:	783b      	ldrb	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 809b 	beq.w	80044e8 <_svfiprintf_r+0x1b0>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	9307      	str	r3, [sp, #28]
 80043bc:	9205      	str	r2, [sp, #20]
 80043be:	9306      	str	r3, [sp, #24]
 80043c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043c4:	931a      	str	r3, [sp, #104]	; 0x68
 80043c6:	2205      	movs	r2, #5
 80043c8:	7821      	ldrb	r1, [r4, #0]
 80043ca:	4850      	ldr	r0, [pc, #320]	; (800450c <_svfiprintf_r+0x1d4>)
 80043cc:	f000 fa40 	bl	8004850 <memchr>
 80043d0:	1c67      	adds	r7, r4, #1
 80043d2:	9b04      	ldr	r3, [sp, #16]
 80043d4:	b9d8      	cbnz	r0, 800440e <_svfiprintf_r+0xd6>
 80043d6:	06d9      	lsls	r1, r3, #27
 80043d8:	bf44      	itt	mi
 80043da:	2220      	movmi	r2, #32
 80043dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043e0:	071a      	lsls	r2, r3, #28
 80043e2:	bf44      	itt	mi
 80043e4:	222b      	movmi	r2, #43	; 0x2b
 80043e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043ea:	7822      	ldrb	r2, [r4, #0]
 80043ec:	2a2a      	cmp	r2, #42	; 0x2a
 80043ee:	d016      	beq.n	800441e <_svfiprintf_r+0xe6>
 80043f0:	2100      	movs	r1, #0
 80043f2:	200a      	movs	r0, #10
 80043f4:	9a07      	ldr	r2, [sp, #28]
 80043f6:	4627      	mov	r7, r4
 80043f8:	783b      	ldrb	r3, [r7, #0]
 80043fa:	3401      	adds	r4, #1
 80043fc:	3b30      	subs	r3, #48	; 0x30
 80043fe:	2b09      	cmp	r3, #9
 8004400:	d950      	bls.n	80044a4 <_svfiprintf_r+0x16c>
 8004402:	b1c9      	cbz	r1, 8004438 <_svfiprintf_r+0x100>
 8004404:	e011      	b.n	800442a <_svfiprintf_r+0xf2>
 8004406:	2b25      	cmp	r3, #37	; 0x25
 8004408:	d0c0      	beq.n	800438c <_svfiprintf_r+0x54>
 800440a:	4627      	mov	r7, r4
 800440c:	e7b9      	b.n	8004382 <_svfiprintf_r+0x4a>
 800440e:	4a3f      	ldr	r2, [pc, #252]	; (800450c <_svfiprintf_r+0x1d4>)
 8004410:	463c      	mov	r4, r7
 8004412:	1a80      	subs	r0, r0, r2
 8004414:	fa0b f000 	lsl.w	r0, fp, r0
 8004418:	4318      	orrs	r0, r3
 800441a:	9004      	str	r0, [sp, #16]
 800441c:	e7d3      	b.n	80043c6 <_svfiprintf_r+0x8e>
 800441e:	9a03      	ldr	r2, [sp, #12]
 8004420:	1d11      	adds	r1, r2, #4
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	2a00      	cmp	r2, #0
 8004428:	db01      	blt.n	800442e <_svfiprintf_r+0xf6>
 800442a:	9207      	str	r2, [sp, #28]
 800442c:	e004      	b.n	8004438 <_svfiprintf_r+0x100>
 800442e:	4252      	negs	r2, r2
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	9207      	str	r2, [sp, #28]
 8004436:	9304      	str	r3, [sp, #16]
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b2e      	cmp	r3, #46	; 0x2e
 800443c:	d10d      	bne.n	800445a <_svfiprintf_r+0x122>
 800443e:	787b      	ldrb	r3, [r7, #1]
 8004440:	1c79      	adds	r1, r7, #1
 8004442:	2b2a      	cmp	r3, #42	; 0x2a
 8004444:	d132      	bne.n	80044ac <_svfiprintf_r+0x174>
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	3702      	adds	r7, #2
 800444a:	1d1a      	adds	r2, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	9203      	str	r2, [sp, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	bfb8      	it	lt
 8004454:	f04f 33ff 	movlt.w	r3, #4294967295
 8004458:	9305      	str	r3, [sp, #20]
 800445a:	4c2d      	ldr	r4, [pc, #180]	; (8004510 <_svfiprintf_r+0x1d8>)
 800445c:	2203      	movs	r2, #3
 800445e:	7839      	ldrb	r1, [r7, #0]
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f9f5 	bl	8004850 <memchr>
 8004466:	b138      	cbz	r0, 8004478 <_svfiprintf_r+0x140>
 8004468:	2340      	movs	r3, #64	; 0x40
 800446a:	1b00      	subs	r0, r0, r4
 800446c:	fa03 f000 	lsl.w	r0, r3, r0
 8004470:	9b04      	ldr	r3, [sp, #16]
 8004472:	3701      	adds	r7, #1
 8004474:	4303      	orrs	r3, r0
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	7839      	ldrb	r1, [r7, #0]
 800447a:	2206      	movs	r2, #6
 800447c:	4825      	ldr	r0, [pc, #148]	; (8004514 <_svfiprintf_r+0x1dc>)
 800447e:	1c7e      	adds	r6, r7, #1
 8004480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004484:	f000 f9e4 	bl	8004850 <memchr>
 8004488:	2800      	cmp	r0, #0
 800448a:	d035      	beq.n	80044f8 <_svfiprintf_r+0x1c0>
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <_svfiprintf_r+0x1e0>)
 800448e:	b9fb      	cbnz	r3, 80044d0 <_svfiprintf_r+0x198>
 8004490:	9b03      	ldr	r3, [sp, #12]
 8004492:	3307      	adds	r3, #7
 8004494:	f023 0307 	bic.w	r3, r3, #7
 8004498:	3308      	adds	r3, #8
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449e:	444b      	add	r3, r9
 80044a0:	9309      	str	r3, [sp, #36]	; 0x24
 80044a2:	e76d      	b.n	8004380 <_svfiprintf_r+0x48>
 80044a4:	fb00 3202 	mla	r2, r0, r2, r3
 80044a8:	2101      	movs	r1, #1
 80044aa:	e7a4      	b.n	80043f6 <_svfiprintf_r+0xbe>
 80044ac:	2300      	movs	r3, #0
 80044ae:	240a      	movs	r4, #10
 80044b0:	4618      	mov	r0, r3
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	460f      	mov	r7, r1
 80044b6:	783a      	ldrb	r2, [r7, #0]
 80044b8:	3101      	adds	r1, #1
 80044ba:	3a30      	subs	r2, #48	; 0x30
 80044bc:	2a09      	cmp	r2, #9
 80044be:	d903      	bls.n	80044c8 <_svfiprintf_r+0x190>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ca      	beq.n	800445a <_svfiprintf_r+0x122>
 80044c4:	9005      	str	r0, [sp, #20]
 80044c6:	e7c8      	b.n	800445a <_svfiprintf_r+0x122>
 80044c8:	fb04 2000 	mla	r0, r4, r0, r2
 80044cc:	2301      	movs	r3, #1
 80044ce:	e7f1      	b.n	80044b4 <_svfiprintf_r+0x17c>
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	462a      	mov	r2, r5
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <_svfiprintf_r+0x1e4>)
 80044d8:	a904      	add	r1, sp, #16
 80044da:	4640      	mov	r0, r8
 80044dc:	f3af 8000 	nop.w
 80044e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044e4:	4681      	mov	r9, r0
 80044e6:	d1d9      	bne.n	800449c <_svfiprintf_r+0x164>
 80044e8:	89ab      	ldrh	r3, [r5, #12]
 80044ea:	065b      	lsls	r3, r3, #25
 80044ec:	f53f af39 	bmi.w	8004362 <_svfiprintf_r+0x2a>
 80044f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f2:	b01d      	add	sp, #116	; 0x74
 80044f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	462a      	mov	r2, r5
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <_svfiprintf_r+0x1e4>)
 8004500:	a904      	add	r1, sp, #16
 8004502:	4640      	mov	r0, r8
 8004504:	f000 f884 	bl	8004610 <_printf_i>
 8004508:	e7ea      	b.n	80044e0 <_svfiprintf_r+0x1a8>
 800450a:	bf00      	nop
 800450c:	0800d988 	.word	0x0800d988
 8004510:	0800d98e 	.word	0x0800d98e
 8004514:	0800d992 	.word	0x0800d992
 8004518:	00000000 	.word	0x00000000
 800451c:	08004281 	.word	0x08004281

08004520 <_printf_common>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	4691      	mov	r9, r2
 8004526:	461f      	mov	r7, r3
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	4606      	mov	r6, r0
 800452e:	4293      	cmp	r3, r2
 8004530:	bfb8      	it	lt
 8004532:	4613      	movlt	r3, r2
 8004534:	f8c9 3000 	str.w	r3, [r9]
 8004538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800453c:	460c      	mov	r4, r1
 800453e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004542:	b112      	cbz	r2, 800454a <_printf_common+0x2a>
 8004544:	3301      	adds	r3, #1
 8004546:	f8c9 3000 	str.w	r3, [r9]
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	0699      	lsls	r1, r3, #26
 800454e:	bf42      	ittt	mi
 8004550:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004554:	3302      	addmi	r3, #2
 8004556:	f8c9 3000 	strmi.w	r3, [r9]
 800455a:	6825      	ldr	r5, [r4, #0]
 800455c:	f015 0506 	ands.w	r5, r5, #6
 8004560:	d107      	bne.n	8004572 <_printf_common+0x52>
 8004562:	f104 0a19 	add.w	sl, r4, #25
 8004566:	68e3      	ldr	r3, [r4, #12]
 8004568:	f8d9 2000 	ldr.w	r2, [r9]
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	429d      	cmp	r5, r3
 8004570:	db2a      	blt.n	80045c8 <_printf_common+0xa8>
 8004572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	3300      	adds	r3, #0
 800457a:	bf18      	it	ne
 800457c:	2301      	movne	r3, #1
 800457e:	0692      	lsls	r2, r2, #26
 8004580:	d42f      	bmi.n	80045e2 <_printf_common+0xc2>
 8004582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004586:	4639      	mov	r1, r7
 8004588:	4630      	mov	r0, r6
 800458a:	47c0      	blx	r8
 800458c:	3001      	adds	r0, #1
 800458e:	d022      	beq.n	80045d6 <_printf_common+0xb6>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	68e5      	ldr	r5, [r4, #12]
 8004594:	f003 0306 	and.w	r3, r3, #6
 8004598:	2b04      	cmp	r3, #4
 800459a:	bf18      	it	ne
 800459c:	2500      	movne	r5, #0
 800459e:	f8d9 2000 	ldr.w	r2, [r9]
 80045a2:	f04f 0900 	mov.w	r9, #0
 80045a6:	bf08      	it	eq
 80045a8:	1aad      	subeq	r5, r5, r2
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	bf08      	it	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfc4      	itt	gt
 80045b8:	1a9b      	subgt	r3, r3, r2
 80045ba:	18ed      	addgt	r5, r5, r3
 80045bc:	341a      	adds	r4, #26
 80045be:	454d      	cmp	r5, r9
 80045c0:	d11b      	bne.n	80045fa <_printf_common+0xda>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	2301      	movs	r3, #1
 80045ca:	4652      	mov	r2, sl
 80045cc:	4639      	mov	r1, r7
 80045ce:	4630      	mov	r0, r6
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d103      	bne.n	80045de <_printf_common+0xbe>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	3501      	adds	r5, #1
 80045e0:	e7c1      	b.n	8004566 <_printf_common+0x46>
 80045e2:	2030      	movs	r0, #48	; 0x30
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f0:	4422      	add	r2, r4
 80045f2:	3302      	adds	r3, #2
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f8:	e7c3      	b.n	8004582 <_printf_common+0x62>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4622      	mov	r2, r4
 80045fe:	4639      	mov	r1, r7
 8004600:	4630      	mov	r0, r6
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d0e6      	beq.n	80045d6 <_printf_common+0xb6>
 8004608:	f109 0901 	add.w	r9, r9, #1
 800460c:	e7d7      	b.n	80045be <_printf_common+0x9e>
	...

08004610 <_printf_i>:
 8004610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004614:	4617      	mov	r7, r2
 8004616:	7e0a      	ldrb	r2, [r1, #24]
 8004618:	b085      	sub	sp, #20
 800461a:	2a6e      	cmp	r2, #110	; 0x6e
 800461c:	4698      	mov	r8, r3
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004624:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004628:	f000 80bc 	beq.w	80047a4 <_printf_i+0x194>
 800462c:	d81a      	bhi.n	8004664 <_printf_i+0x54>
 800462e:	2a63      	cmp	r2, #99	; 0x63
 8004630:	d02e      	beq.n	8004690 <_printf_i+0x80>
 8004632:	d80a      	bhi.n	800464a <_printf_i+0x3a>
 8004634:	2a00      	cmp	r2, #0
 8004636:	f000 80c8 	beq.w	80047ca <_printf_i+0x1ba>
 800463a:	2a58      	cmp	r2, #88	; 0x58
 800463c:	f000 808a 	beq.w	8004754 <_printf_i+0x144>
 8004640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004644:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004648:	e02a      	b.n	80046a0 <_printf_i+0x90>
 800464a:	2a64      	cmp	r2, #100	; 0x64
 800464c:	d001      	beq.n	8004652 <_printf_i+0x42>
 800464e:	2a69      	cmp	r2, #105	; 0x69
 8004650:	d1f6      	bne.n	8004640 <_printf_i+0x30>
 8004652:	6821      	ldr	r1, [r4, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f011 0f80 	tst.w	r1, #128	; 0x80
 800465a:	d023      	beq.n	80046a4 <_printf_i+0x94>
 800465c:	1d11      	adds	r1, r2, #4
 800465e:	6019      	str	r1, [r3, #0]
 8004660:	6813      	ldr	r3, [r2, #0]
 8004662:	e027      	b.n	80046b4 <_printf_i+0xa4>
 8004664:	2a73      	cmp	r2, #115	; 0x73
 8004666:	f000 80b4 	beq.w	80047d2 <_printf_i+0x1c2>
 800466a:	d808      	bhi.n	800467e <_printf_i+0x6e>
 800466c:	2a6f      	cmp	r2, #111	; 0x6f
 800466e:	d02a      	beq.n	80046c6 <_printf_i+0xb6>
 8004670:	2a70      	cmp	r2, #112	; 0x70
 8004672:	d1e5      	bne.n	8004640 <_printf_i+0x30>
 8004674:	680a      	ldr	r2, [r1, #0]
 8004676:	f042 0220 	orr.w	r2, r2, #32
 800467a:	600a      	str	r2, [r1, #0]
 800467c:	e003      	b.n	8004686 <_printf_i+0x76>
 800467e:	2a75      	cmp	r2, #117	; 0x75
 8004680:	d021      	beq.n	80046c6 <_printf_i+0xb6>
 8004682:	2a78      	cmp	r2, #120	; 0x78
 8004684:	d1dc      	bne.n	8004640 <_printf_i+0x30>
 8004686:	2278      	movs	r2, #120	; 0x78
 8004688:	496f      	ldr	r1, [pc, #444]	; (8004848 <_printf_i+0x238>)
 800468a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800468e:	e064      	b.n	800475a <_printf_i+0x14a>
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004696:	1d11      	adds	r1, r2, #4
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0a3      	b.n	80047ec <_printf_i+0x1dc>
 80046a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046a8:	f102 0104 	add.w	r1, r2, #4
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	d0d7      	beq.n	8004660 <_printf_i+0x50>
 80046b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da03      	bge.n	80046c0 <_printf_i+0xb0>
 80046b8:	222d      	movs	r2, #45	; 0x2d
 80046ba:	425b      	negs	r3, r3
 80046bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046c0:	4962      	ldr	r1, [pc, #392]	; (800484c <_printf_i+0x23c>)
 80046c2:	220a      	movs	r2, #10
 80046c4:	e017      	b.n	80046f6 <_printf_i+0xe6>
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80046ce:	d003      	beq.n	80046d8 <_printf_i+0xc8>
 80046d0:	1d08      	adds	r0, r1, #4
 80046d2:	6018      	str	r0, [r3, #0]
 80046d4:	680b      	ldr	r3, [r1, #0]
 80046d6:	e006      	b.n	80046e6 <_printf_i+0xd6>
 80046d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046dc:	f101 0004 	add.w	r0, r1, #4
 80046e0:	6018      	str	r0, [r3, #0]
 80046e2:	d0f7      	beq.n	80046d4 <_printf_i+0xc4>
 80046e4:	880b      	ldrh	r3, [r1, #0]
 80046e6:	2a6f      	cmp	r2, #111	; 0x6f
 80046e8:	bf14      	ite	ne
 80046ea:	220a      	movne	r2, #10
 80046ec:	2208      	moveq	r2, #8
 80046ee:	4957      	ldr	r1, [pc, #348]	; (800484c <_printf_i+0x23c>)
 80046f0:	2000      	movs	r0, #0
 80046f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80046f6:	6865      	ldr	r5, [r4, #4]
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	60a5      	str	r5, [r4, #8]
 80046fc:	f2c0 809c 	blt.w	8004838 <_printf_i+0x228>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	f020 0004 	bic.w	r0, r0, #4
 8004706:	6020      	str	r0, [r4, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d13f      	bne.n	800478c <_printf_i+0x17c>
 800470c:	2d00      	cmp	r5, #0
 800470e:	f040 8095 	bne.w	800483c <_printf_i+0x22c>
 8004712:	4675      	mov	r5, lr
 8004714:	2a08      	cmp	r2, #8
 8004716:	d10b      	bne.n	8004730 <_printf_i+0x120>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07da      	lsls	r2, r3, #31
 800471c:	d508      	bpl.n	8004730 <_printf_i+0x120>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	6862      	ldr	r2, [r4, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	bfde      	ittt	le
 8004726:	2330      	movle	r3, #48	; 0x30
 8004728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800472c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004730:	ebae 0305 	sub.w	r3, lr, r5
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	f8cd 8000 	str.w	r8, [sp]
 800473a:	463b      	mov	r3, r7
 800473c:	aa03      	add	r2, sp, #12
 800473e:	4621      	mov	r1, r4
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff feed 	bl	8004520 <_printf_common>
 8004746:	3001      	adds	r0, #1
 8004748:	d155      	bne.n	80047f6 <_printf_i+0x1e6>
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	b005      	add	sp, #20
 8004750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004754:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004758:	493c      	ldr	r1, [pc, #240]	; (800484c <_printf_i+0x23c>)
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004762:	f100 0504 	add.w	r5, r0, #4
 8004766:	601d      	str	r5, [r3, #0]
 8004768:	d001      	beq.n	800476e <_printf_i+0x15e>
 800476a:	6803      	ldr	r3, [r0, #0]
 800476c:	e002      	b.n	8004774 <_printf_i+0x164>
 800476e:	0655      	lsls	r5, r2, #25
 8004770:	d5fb      	bpl.n	800476a <_printf_i+0x15a>
 8004772:	8803      	ldrh	r3, [r0, #0]
 8004774:	07d0      	lsls	r0, r2, #31
 8004776:	bf44      	itt	mi
 8004778:	f042 0220 	orrmi.w	r2, r2, #32
 800477c:	6022      	strmi	r2, [r4, #0]
 800477e:	b91b      	cbnz	r3, 8004788 <_printf_i+0x178>
 8004780:	6822      	ldr	r2, [r4, #0]
 8004782:	f022 0220 	bic.w	r2, r2, #32
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	2210      	movs	r2, #16
 800478a:	e7b1      	b.n	80046f0 <_printf_i+0xe0>
 800478c:	4675      	mov	r5, lr
 800478e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004792:	fb02 3310 	mls	r3, r2, r0, r3
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800479c:	4603      	mov	r3, r0
 800479e:	2800      	cmp	r0, #0
 80047a0:	d1f5      	bne.n	800478e <_printf_i+0x17e>
 80047a2:	e7b7      	b.n	8004714 <_printf_i+0x104>
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80047ac:	6949      	ldr	r1, [r1, #20]
 80047ae:	d004      	beq.n	80047ba <_printf_i+0x1aa>
 80047b0:	1d10      	adds	r0, r2, #4
 80047b2:	6018      	str	r0, [r3, #0]
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	6019      	str	r1, [r3, #0]
 80047b8:	e007      	b.n	80047ca <_printf_i+0x1ba>
 80047ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047be:	f102 0004 	add.w	r0, r2, #4
 80047c2:	6018      	str	r0, [r3, #0]
 80047c4:	6813      	ldr	r3, [r2, #0]
 80047c6:	d0f6      	beq.n	80047b6 <_printf_i+0x1a6>
 80047c8:	8019      	strh	r1, [r3, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	4675      	mov	r5, lr
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	e7b1      	b.n	8004736 <_printf_i+0x126>
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	1d11      	adds	r1, r2, #4
 80047d6:	6019      	str	r1, [r3, #0]
 80047d8:	6815      	ldr	r5, [r2, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	6862      	ldr	r2, [r4, #4]
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f836 	bl	8004850 <memchr>
 80047e4:	b108      	cbz	r0, 80047ea <_printf_i+0x1da>
 80047e6:	1b40      	subs	r0, r0, r5
 80047e8:	6060      	str	r0, [r4, #4]
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	2300      	movs	r3, #0
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	e79f      	b.n	8004736 <_printf_i+0x126>
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	462a      	mov	r2, r5
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d0a2      	beq.n	800474a <_printf_i+0x13a>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	079b      	lsls	r3, r3, #30
 8004808:	d507      	bpl.n	800481a <_printf_i+0x20a>
 800480a:	2500      	movs	r5, #0
 800480c:	f104 0919 	add.w	r9, r4, #25
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	429d      	cmp	r5, r3
 8004818:	db05      	blt.n	8004826 <_printf_i+0x216>
 800481a:	68e0      	ldr	r0, [r4, #12]
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	4298      	cmp	r0, r3
 8004820:	bfb8      	it	lt
 8004822:	4618      	movlt	r0, r3
 8004824:	e793      	b.n	800474e <_printf_i+0x13e>
 8004826:	2301      	movs	r3, #1
 8004828:	464a      	mov	r2, r9
 800482a:	4639      	mov	r1, r7
 800482c:	4630      	mov	r0, r6
 800482e:	47c0      	blx	r8
 8004830:	3001      	adds	r0, #1
 8004832:	d08a      	beq.n	800474a <_printf_i+0x13a>
 8004834:	3501      	adds	r5, #1
 8004836:	e7eb      	b.n	8004810 <_printf_i+0x200>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1a7      	bne.n	800478c <_printf_i+0x17c>
 800483c:	780b      	ldrb	r3, [r1, #0]
 800483e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004846:	e765      	b.n	8004714 <_printf_i+0x104>
 8004848:	0800d9aa 	.word	0x0800d9aa
 800484c:	0800d999 	.word	0x0800d999

08004850 <memchr>:
 8004850:	b510      	push	{r4, lr}
 8004852:	b2c9      	uxtb	r1, r1
 8004854:	4402      	add	r2, r0
 8004856:	4290      	cmp	r0, r2
 8004858:	4603      	mov	r3, r0
 800485a:	d101      	bne.n	8004860 <memchr+0x10>
 800485c:	2000      	movs	r0, #0
 800485e:	bd10      	pop	{r4, pc}
 8004860:	781c      	ldrb	r4, [r3, #0]
 8004862:	3001      	adds	r0, #1
 8004864:	428c      	cmp	r4, r1
 8004866:	d1f6      	bne.n	8004856 <memchr+0x6>
 8004868:	4618      	mov	r0, r3
 800486a:	bd10      	pop	{r4, pc}

0800486c <memcpy>:
 800486c:	b510      	push	{r4, lr}
 800486e:	1e43      	subs	r3, r0, #1
 8004870:	440a      	add	r2, r1
 8004872:	4291      	cmp	r1, r2
 8004874:	d100      	bne.n	8004878 <memcpy+0xc>
 8004876:	bd10      	pop	{r4, pc}
 8004878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800487c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004880:	e7f7      	b.n	8004872 <memcpy+0x6>

08004882 <memmove>:
 8004882:	4288      	cmp	r0, r1
 8004884:	b510      	push	{r4, lr}
 8004886:	eb01 0302 	add.w	r3, r1, r2
 800488a:	d803      	bhi.n	8004894 <memmove+0x12>
 800488c:	1e42      	subs	r2, r0, #1
 800488e:	4299      	cmp	r1, r3
 8004890:	d10c      	bne.n	80048ac <memmove+0x2a>
 8004892:	bd10      	pop	{r4, pc}
 8004894:	4298      	cmp	r0, r3
 8004896:	d2f9      	bcs.n	800488c <memmove+0xa>
 8004898:	1881      	adds	r1, r0, r2
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	42d3      	cmn	r3, r2
 800489e:	d100      	bne.n	80048a2 <memmove+0x20>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048aa:	e7f7      	b.n	800489c <memmove+0x1a>
 80048ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048b4:	e7eb      	b.n	800488e <memmove+0xc>
	...

080048b8 <_free_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	d043      	beq.n	8004948 <_free_r+0x90>
 80048c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	18e4      	addlt	r4, r4, r3
 80048cc:	f000 f8d4 	bl	8004a78 <__malloc_lock>
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <_free_r+0x94>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	4610      	mov	r0, r2
 80048d6:	b933      	cbnz	r3, 80048e6 <_free_r+0x2e>
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6014      	str	r4, [r2, #0]
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e2:	f000 b8ca 	b.w	8004a7a <__malloc_unlock>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d90b      	bls.n	8004902 <_free_r+0x4a>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	1862      	adds	r2, r4, r1
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf01      	itttt	eq
 80048f2:	681a      	ldreq	r2, [r3, #0]
 80048f4:	685b      	ldreq	r3, [r3, #4]
 80048f6:	1852      	addeq	r2, r2, r1
 80048f8:	6022      	streq	r2, [r4, #0]
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	6004      	str	r4, [r0, #0]
 80048fe:	e7ed      	b.n	80048dc <_free_r+0x24>
 8004900:	4613      	mov	r3, r2
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	b10a      	cbz	r2, 800490a <_free_r+0x52>
 8004906:	42a2      	cmp	r2, r4
 8004908:	d9fa      	bls.n	8004900 <_free_r+0x48>
 800490a:	6819      	ldr	r1, [r3, #0]
 800490c:	1858      	adds	r0, r3, r1
 800490e:	42a0      	cmp	r0, r4
 8004910:	d10b      	bne.n	800492a <_free_r+0x72>
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	4401      	add	r1, r0
 8004916:	1858      	adds	r0, r3, r1
 8004918:	4282      	cmp	r2, r0
 800491a:	6019      	str	r1, [r3, #0]
 800491c:	d1de      	bne.n	80048dc <_free_r+0x24>
 800491e:	6810      	ldr	r0, [r2, #0]
 8004920:	6852      	ldr	r2, [r2, #4]
 8004922:	4401      	add	r1, r0
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	e7d8      	b.n	80048dc <_free_r+0x24>
 800492a:	d902      	bls.n	8004932 <_free_r+0x7a>
 800492c:	230c      	movs	r3, #12
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	e7d4      	b.n	80048dc <_free_r+0x24>
 8004932:	6820      	ldr	r0, [r4, #0]
 8004934:	1821      	adds	r1, r4, r0
 8004936:	428a      	cmp	r2, r1
 8004938:	bf01      	itttt	eq
 800493a:	6811      	ldreq	r1, [r2, #0]
 800493c:	6852      	ldreq	r2, [r2, #4]
 800493e:	1809      	addeq	r1, r1, r0
 8004940:	6021      	streq	r1, [r4, #0]
 8004942:	6062      	str	r2, [r4, #4]
 8004944:	605c      	str	r4, [r3, #4]
 8004946:	e7c9      	b.n	80048dc <_free_r+0x24>
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	200000b8 	.word	0x200000b8

08004950 <_malloc_r>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	1ccd      	adds	r5, r1, #3
 8004954:	f025 0503 	bic.w	r5, r5, #3
 8004958:	3508      	adds	r5, #8
 800495a:	2d0c      	cmp	r5, #12
 800495c:	bf38      	it	cc
 800495e:	250c      	movcc	r5, #12
 8004960:	2d00      	cmp	r5, #0
 8004962:	4606      	mov	r6, r0
 8004964:	db01      	blt.n	800496a <_malloc_r+0x1a>
 8004966:	42a9      	cmp	r1, r5
 8004968:	d903      	bls.n	8004972 <_malloc_r+0x22>
 800496a:	230c      	movs	r3, #12
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	2000      	movs	r0, #0
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	f000 f881 	bl	8004a78 <__malloc_lock>
 8004976:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <_malloc_r+0xb4>)
 8004978:	6814      	ldr	r4, [r2, #0]
 800497a:	4621      	mov	r1, r4
 800497c:	b991      	cbnz	r1, 80049a4 <_malloc_r+0x54>
 800497e:	4c22      	ldr	r4, [pc, #136]	; (8004a08 <_malloc_r+0xb8>)
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	b91b      	cbnz	r3, 800498c <_malloc_r+0x3c>
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f867 	bl	8004a58 <_sbrk_r>
 800498a:	6020      	str	r0, [r4, #0]
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	f000 f862 	bl	8004a58 <_sbrk_r>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d126      	bne.n	80049e6 <_malloc_r+0x96>
 8004998:	230c      	movs	r3, #12
 800499a:	4630      	mov	r0, r6
 800499c:	6033      	str	r3, [r6, #0]
 800499e:	f000 f86c 	bl	8004a7a <__malloc_unlock>
 80049a2:	e7e4      	b.n	800496e <_malloc_r+0x1e>
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	1b5b      	subs	r3, r3, r5
 80049a8:	d41a      	bmi.n	80049e0 <_malloc_r+0x90>
 80049aa:	2b0b      	cmp	r3, #11
 80049ac:	d90f      	bls.n	80049ce <_malloc_r+0x7e>
 80049ae:	600b      	str	r3, [r1, #0]
 80049b0:	18cc      	adds	r4, r1, r3
 80049b2:	50cd      	str	r5, [r1, r3]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f860 	bl	8004a7a <__malloc_unlock>
 80049ba:	f104 000b 	add.w	r0, r4, #11
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	f020 0007 	bic.w	r0, r0, #7
 80049c4:	1ac3      	subs	r3, r0, r3
 80049c6:	d01b      	beq.n	8004a00 <_malloc_r+0xb0>
 80049c8:	425a      	negs	r2, r3
 80049ca:	50e2      	str	r2, [r4, r3]
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	428c      	cmp	r4, r1
 80049d0:	bf0b      	itete	eq
 80049d2:	6863      	ldreq	r3, [r4, #4]
 80049d4:	684b      	ldrne	r3, [r1, #4]
 80049d6:	6013      	streq	r3, [r2, #0]
 80049d8:	6063      	strne	r3, [r4, #4]
 80049da:	bf18      	it	ne
 80049dc:	460c      	movne	r4, r1
 80049de:	e7e9      	b.n	80049b4 <_malloc_r+0x64>
 80049e0:	460c      	mov	r4, r1
 80049e2:	6849      	ldr	r1, [r1, #4]
 80049e4:	e7ca      	b.n	800497c <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d005      	beq.n	80049fc <_malloc_r+0xac>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f830 	bl	8004a58 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0cd      	beq.n	8004998 <_malloc_r+0x48>
 80049fc:	6025      	str	r5, [r4, #0]
 80049fe:	e7d9      	b.n	80049b4 <_malloc_r+0x64>
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	bf00      	nop
 8004a04:	200000b8 	.word	0x200000b8
 8004a08:	200000bc 	.word	0x200000bc

08004a0c <_realloc_r>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	4607      	mov	r7, r0
 8004a10:	4614      	mov	r4, r2
 8004a12:	460e      	mov	r6, r1
 8004a14:	b921      	cbnz	r1, 8004a20 <_realloc_r+0x14>
 8004a16:	4611      	mov	r1, r2
 8004a18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a1c:	f7ff bf98 	b.w	8004950 <_malloc_r>
 8004a20:	b922      	cbnz	r2, 8004a2c <_realloc_r+0x20>
 8004a22:	f7ff ff49 	bl	80048b8 <_free_r>
 8004a26:	4625      	mov	r5, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a2c:	f000 f826 	bl	8004a7c <_malloc_usable_size_r>
 8004a30:	4284      	cmp	r4, r0
 8004a32:	d90f      	bls.n	8004a54 <_realloc_r+0x48>
 8004a34:	4621      	mov	r1, r4
 8004a36:	4638      	mov	r0, r7
 8004a38:	f7ff ff8a 	bl	8004950 <_malloc_r>
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d0f2      	beq.n	8004a28 <_realloc_r+0x1c>
 8004a42:	4631      	mov	r1, r6
 8004a44:	4622      	mov	r2, r4
 8004a46:	f7ff ff11 	bl	800486c <memcpy>
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f7ff ff33 	bl	80048b8 <_free_r>
 8004a52:	e7e9      	b.n	8004a28 <_realloc_r+0x1c>
 8004a54:	4635      	mov	r5, r6
 8004a56:	e7e7      	b.n	8004a28 <_realloc_r+0x1c>

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4c05      	ldr	r4, [pc, #20]	; (8004a74 <_sbrk_r+0x1c>)
 8004a5e:	4605      	mov	r5, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	f7fd fa76 	bl	8001f54 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000128 	.word	0x20000128

08004a78 <__malloc_lock>:
 8004a78:	4770      	bx	lr

08004a7a <__malloc_unlock>:
 8004a7a:	4770      	bx	lr

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f1a0 0004 	sub.w	r0, r0, #4
 8004a86:	bfbc      	itt	lt
 8004a88:	580b      	ldrlt	r3, [r1, r0]
 8004a8a:	18c0      	addlt	r0, r0, r3
 8004a8c:	4770      	bx	lr
	...

08004a90 <cos>:
 8004a90:	b530      	push	{r4, r5, lr}
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <cos+0x64>)
 8004a94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	dc04      	bgt.n	8004aa8 <cos+0x18>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f000 fa59 	bl	8004f58 <__kernel_cos>
 8004aa6:	e006      	b.n	8004ab6 <cos+0x26>
 8004aa8:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <cos+0x68>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	dd05      	ble.n	8004aba <cos+0x2a>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	f7fb fb51 	bl	8000158 <__aeabi_dsub>
 8004ab6:	b007      	add	sp, #28
 8004ab8:	bd30      	pop	{r4, r5, pc}
 8004aba:	aa02      	add	r2, sp, #8
 8004abc:	f000 f858 	bl	8004b70 <__ieee754_rem_pio2>
 8004ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac4:	f000 0403 	and.w	r4, r0, #3
 8004ac8:	2c01      	cmp	r4, #1
 8004aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ace:	d008      	beq.n	8004ae2 <cos+0x52>
 8004ad0:	2c02      	cmp	r4, #2
 8004ad2:	d00c      	beq.n	8004aee <cos+0x5e>
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	d0e4      	beq.n	8004aa2 <cos+0x12>
 8004ad8:	2401      	movs	r4, #1
 8004ada:	9400      	str	r4, [sp, #0]
 8004adc:	f000 fe70 	bl	80057c0 <__kernel_sin>
 8004ae0:	e7e9      	b.n	8004ab6 <cos+0x26>
 8004ae2:	9400      	str	r4, [sp, #0]
 8004ae4:	f000 fe6c 	bl	80057c0 <__kernel_sin>
 8004ae8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004aec:	e7e3      	b.n	8004ab6 <cos+0x26>
 8004aee:	f000 fa33 	bl	8004f58 <__kernel_cos>
 8004af2:	e7f9      	b.n	8004ae8 <cos+0x58>
 8004af4:	3fe921fb 	.word	0x3fe921fb
 8004af8:	7fefffff 	.word	0x7fefffff

08004afc <sin>:
 8004afc:	b530      	push	{r4, r5, lr}
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <sin+0x6c>)
 8004b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b04:	4293      	cmp	r3, r2
 8004b06:	b087      	sub	sp, #28
 8004b08:	dc06      	bgt.n	8004b18 <sin+0x1c>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	f000 fe55 	bl	80057c0 <__kernel_sin>
 8004b16:	e006      	b.n	8004b26 <sin+0x2a>
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <sin+0x70>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	dd05      	ble.n	8004b2a <sin+0x2e>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	f7fb fb19 	bl	8000158 <__aeabi_dsub>
 8004b26:	b007      	add	sp, #28
 8004b28:	bd30      	pop	{r4, r5, pc}
 8004b2a:	aa02      	add	r2, sp, #8
 8004b2c:	f000 f820 	bl	8004b70 <__ieee754_rem_pio2>
 8004b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b34:	f000 0403 	and.w	r4, r0, #3
 8004b38:	2c01      	cmp	r4, #1
 8004b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3e:	d005      	beq.n	8004b4c <sin+0x50>
 8004b40:	2c02      	cmp	r4, #2
 8004b42:	d006      	beq.n	8004b52 <sin+0x56>
 8004b44:	b964      	cbnz	r4, 8004b60 <sin+0x64>
 8004b46:	2401      	movs	r4, #1
 8004b48:	9400      	str	r4, [sp, #0]
 8004b4a:	e7e2      	b.n	8004b12 <sin+0x16>
 8004b4c:	f000 fa04 	bl	8004f58 <__kernel_cos>
 8004b50:	e7e9      	b.n	8004b26 <sin+0x2a>
 8004b52:	2401      	movs	r4, #1
 8004b54:	9400      	str	r4, [sp, #0]
 8004b56:	f000 fe33 	bl	80057c0 <__kernel_sin>
 8004b5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004b5e:	e7e2      	b.n	8004b26 <sin+0x2a>
 8004b60:	f000 f9fa 	bl	8004f58 <__kernel_cos>
 8004b64:	e7f9      	b.n	8004b5a <sin+0x5e>
 8004b66:	bf00      	nop
 8004b68:	3fe921fb 	.word	0x3fe921fb
 8004b6c:	7fefffff 	.word	0x7fefffff

08004b70 <__ieee754_rem_pio2>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4614      	mov	r4, r2
 8004b76:	4ac4      	ldr	r2, [pc, #784]	; (8004e88 <__ieee754_rem_pio2+0x318>)
 8004b78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004b7c:	4592      	cmp	sl, r2
 8004b7e:	b08d      	sub	sp, #52	; 0x34
 8004b80:	468b      	mov	fp, r1
 8004b82:	dc07      	bgt.n	8004b94 <__ieee754_rem_pio2+0x24>
 8004b84:	2200      	movs	r2, #0
 8004b86:	2300      	movs	r3, #0
 8004b88:	e9c4 0100 	strd	r0, r1, [r4]
 8004b8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004b90:	2500      	movs	r5, #0
 8004b92:	e023      	b.n	8004bdc <__ieee754_rem_pio2+0x6c>
 8004b94:	4abd      	ldr	r2, [pc, #756]	; (8004e8c <__ieee754_rem_pio2+0x31c>)
 8004b96:	4592      	cmp	sl, r2
 8004b98:	dc71      	bgt.n	8004c7e <__ieee754_rem_pio2+0x10e>
 8004b9a:	a3ad      	add	r3, pc, #692	; (adr r3, 8004e50 <__ieee754_rem_pio2+0x2e0>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	4dbb      	ldr	r5, [pc, #748]	; (8004e90 <__ieee754_rem_pio2+0x320>)
 8004ba4:	dd36      	ble.n	8004c14 <__ieee754_rem_pio2+0xa4>
 8004ba6:	f7fb fad7 	bl	8000158 <__aeabi_dsub>
 8004baa:	45aa      	cmp	sl, r5
 8004bac:	4606      	mov	r6, r0
 8004bae:	460f      	mov	r7, r1
 8004bb0:	d018      	beq.n	8004be4 <__ieee754_rem_pio2+0x74>
 8004bb2:	a3a9      	add	r3, pc, #676	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x2e8>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb face 	bl	8000158 <__aeabi_dsub>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	e9c4 2300 	strd	r2, r3, [r4]
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f7fb fac6 	bl	8000158 <__aeabi_dsub>
 8004bcc:	a3a2      	add	r3, pc, #648	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x2e8>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb fac1 	bl	8000158 <__aeabi_dsub>
 8004bd6:	2501      	movs	r5, #1
 8004bd8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bdc:	4628      	mov	r0, r5
 8004bde:	b00d      	add	sp, #52	; 0x34
 8004be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	a39e      	add	r3, pc, #632	; (adr r3, 8004e60 <__ieee754_rem_pio2+0x2f0>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f7fb fab5 	bl	8000158 <__aeabi_dsub>
 8004bee:	a39e      	add	r3, pc, #632	; (adr r3, 8004e68 <__ieee754_rem_pio2+0x2f8>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	f7fb faae 	bl	8000158 <__aeabi_dsub>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4630      	mov	r0, r6
 8004c02:	e9c4 2300 	strd	r2, r3, [r4]
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb faa6 	bl	8000158 <__aeabi_dsub>
 8004c0c:	a396      	add	r3, pc, #600	; (adr r3, 8004e68 <__ieee754_rem_pio2+0x2f8>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	e7de      	b.n	8004bd2 <__ieee754_rem_pio2+0x62>
 8004c14:	f7fb faa2 	bl	800015c <__adddf3>
 8004c18:	45aa      	cmp	sl, r5
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460f      	mov	r7, r1
 8004c1e:	d016      	beq.n	8004c4e <__ieee754_rem_pio2+0xde>
 8004c20:	a38d      	add	r3, pc, #564	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x2e8>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb fa99 	bl	800015c <__adddf3>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4630      	mov	r0, r6
 8004c30:	e9c4 2300 	strd	r2, r3, [r4]
 8004c34:	4639      	mov	r1, r7
 8004c36:	f7fb fa8f 	bl	8000158 <__aeabi_dsub>
 8004c3a:	a387      	add	r3, pc, #540	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x2e8>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fa8c 	bl	800015c <__adddf3>
 8004c44:	f04f 35ff 	mov.w	r5, #4294967295
 8004c48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c4c:	e7c6      	b.n	8004bdc <__ieee754_rem_pio2+0x6c>
 8004c4e:	a384      	add	r3, pc, #528	; (adr r3, 8004e60 <__ieee754_rem_pio2+0x2f0>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fa82 	bl	800015c <__adddf3>
 8004c58:	a383      	add	r3, pc, #524	; (adr r3, 8004e68 <__ieee754_rem_pio2+0x2f8>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	f7fb fa7b 	bl	800015c <__adddf3>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	e9c4 2300 	strd	r2, r3, [r4]
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb fa71 	bl	8000158 <__aeabi_dsub>
 8004c76:	a37c      	add	r3, pc, #496	; (adr r3, 8004e68 <__ieee754_rem_pio2+0x2f8>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	e7e0      	b.n	8004c40 <__ieee754_rem_pio2+0xd0>
 8004c7e:	4a85      	ldr	r2, [pc, #532]	; (8004e94 <__ieee754_rem_pio2+0x324>)
 8004c80:	4592      	cmp	sl, r2
 8004c82:	f300 80d6 	bgt.w	8004e32 <__ieee754_rem_pio2+0x2c2>
 8004c86:	f000 fe51 	bl	800592c <fabs>
 8004c8a:	a379      	add	r3, pc, #484	; (adr r3, 8004e70 <__ieee754_rem_pio2+0x300>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	f7fb fc14 	bl	80004c0 <__aeabi_dmul>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <__ieee754_rem_pio2+0x328>)
 8004c9c:	f7fb fa5e 	bl	800015c <__adddf3>
 8004ca0:	f7fb fea8 	bl	80009f4 <__aeabi_d2iz>
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	f7fb fba5 	bl	80003f4 <__aeabi_i2d>
 8004caa:	a369      	add	r3, pc, #420	; (adr r3, 8004e50 <__ieee754_rem_pio2+0x2e0>)
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb4:	f7fb fc04 	bl	80004c0 <__aeabi_dmul>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb fa4a 	bl	8000158 <__aeabi_dsub>
 8004cc4:	a364      	add	r3, pc, #400	; (adr r3, 8004e58 <__ieee754_rem_pio2+0x2e8>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd2:	f7fb fbf5 	bl	80004c0 <__aeabi_dmul>
 8004cd6:	2d1f      	cmp	r5, #31
 8004cd8:	4680      	mov	r8, r0
 8004cda:	4689      	mov	r9, r1
 8004cdc:	dc2e      	bgt.n	8004d3c <__ieee754_rem_pio2+0x1cc>
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <__ieee754_rem_pio2+0x32c>)
 8004ce0:	1e6a      	subs	r2, r5, #1
 8004ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce6:	459a      	cmp	sl, r3
 8004ce8:	d028      	beq.n	8004d3c <__ieee754_rem_pio2+0x1cc>
 8004cea:	4642      	mov	r2, r8
 8004cec:	464b      	mov	r3, r9
 8004cee:	4630      	mov	r0, r6
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	f7fb fa31 	bl	8000158 <__aeabi_dsub>
 8004cf6:	e9c4 0100 	strd	r0, r1, [r4]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	9a02      	ldr	r2, [sp, #8]
 8004d04:	4653      	mov	r3, sl
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb fa25 	bl	8000158 <__aeabi_dsub>
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	f7fb fa21 	bl	8000158 <__aeabi_dsub>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	f1bb 0f00 	cmp.w	fp, #0
 8004d1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004d22:	f6bf af5b 	bge.w	8004bdc <__ieee754_rem_pio2+0x6c>
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	60a0      	str	r0, [r4, #8]
 8004d36:	60e1      	str	r1, [r4, #12]
 8004d38:	426d      	negs	r5, r5
 8004d3a:	e74f      	b.n	8004bdc <__ieee754_rem_pio2+0x6c>
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	4630      	mov	r0, r6
 8004d42:	4639      	mov	r1, r7
 8004d44:	f7fb fa08 	bl	8000158 <__aeabi_dsub>
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004d50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004d54:	ebaa 0101 	sub.w	r1, sl, r1
 8004d58:	2910      	cmp	r1, #16
 8004d5a:	e9c4 2300 	strd	r2, r3, [r4]
 8004d5e:	ddcc      	ble.n	8004cfa <__ieee754_rem_pio2+0x18a>
 8004d60:	a33f      	add	r3, pc, #252	; (adr r3, 8004e60 <__ieee754_rem_pio2+0x2f0>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6a:	f7fb fba9 	bl	80004c0 <__aeabi_dmul>
 8004d6e:	4680      	mov	r8, r0
 8004d70:	4689      	mov	r9, r1
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb f9ed 	bl	8000158 <__aeabi_dsub>
 8004d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb f9e5 	bl	8000158 <__aeabi_dsub>
 8004d8e:	4642      	mov	r2, r8
 8004d90:	464b      	mov	r3, r9
 8004d92:	f7fb f9e1 	bl	8000158 <__aeabi_dsub>
 8004d96:	a334      	add	r3, pc, #208	; (adr r3, 8004e68 <__ieee754_rem_pio2+0x2f8>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da4:	f7fb fb8c 	bl	80004c0 <__aeabi_dmul>
 8004da8:	4632      	mov	r2, r6
 8004daa:	463b      	mov	r3, r7
 8004dac:	f7fb f9d4 	bl	8000158 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4680      	mov	r8, r0
 8004db6:	4689      	mov	r9, r1
 8004db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dbc:	f7fb f9cc 	bl	8000158 <__aeabi_dsub>
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004dc8:	ebaa 0a01 	sub.w	sl, sl, r1
 8004dcc:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8004dd0:	e9c4 2300 	strd	r2, r3, [r4]
 8004dd4:	dd2a      	ble.n	8004e2c <__ieee754_rem_pio2+0x2bc>
 8004dd6:	a328      	add	r3, pc, #160	; (adr r3, 8004e78 <__ieee754_rem_pio2+0x308>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de0:	f7fb fb6e 	bl	80004c0 <__aeabi_dmul>
 8004de4:	4680      	mov	r8, r0
 8004de6:	4689      	mov	r9, r1
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004df0:	f7fb f9b2 	bl	8000158 <__aeabi_dsub>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4606      	mov	r6, r0
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e00:	f7fb f9aa 	bl	8000158 <__aeabi_dsub>
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	a31c      	add	r3, pc, #112	; (adr r3, 8004e80 <__ieee754_rem_pio2+0x310>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4680      	mov	r8, r0
 8004e14:	4689      	mov	r9, r1
 8004e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1a:	f7fb fb51 	bl	80004c0 <__aeabi_dmul>
 8004e1e:	4642      	mov	r2, r8
 8004e20:	464b      	mov	r3, r9
 8004e22:	f7fb f999 	bl	8000158 <__aeabi_dsub>
 8004e26:	4680      	mov	r8, r0
 8004e28:	4689      	mov	r9, r1
 8004e2a:	e75e      	b.n	8004cea <__ieee754_rem_pio2+0x17a>
 8004e2c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004e30:	e763      	b.n	8004cfa <__ieee754_rem_pio2+0x18a>
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <__ieee754_rem_pio2+0x330>)
 8004e34:	4592      	cmp	sl, r2
 8004e36:	dd35      	ble.n	8004ea4 <__ieee754_rem_pio2+0x334>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	f7fb f98c 	bl	8000158 <__aeabi_dsub>
 8004e40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e44:	e9c4 0100 	strd	r0, r1, [r4]
 8004e48:	e6a2      	b.n	8004b90 <__ieee754_rem_pio2+0x20>
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w
 8004e50:	54400000 	.word	0x54400000
 8004e54:	3ff921fb 	.word	0x3ff921fb
 8004e58:	1a626331 	.word	0x1a626331
 8004e5c:	3dd0b461 	.word	0x3dd0b461
 8004e60:	1a600000 	.word	0x1a600000
 8004e64:	3dd0b461 	.word	0x3dd0b461
 8004e68:	2e037073 	.word	0x2e037073
 8004e6c:	3ba3198a 	.word	0x3ba3198a
 8004e70:	6dc9c883 	.word	0x6dc9c883
 8004e74:	3fe45f30 	.word	0x3fe45f30
 8004e78:	2e000000 	.word	0x2e000000
 8004e7c:	3ba3198a 	.word	0x3ba3198a
 8004e80:	252049c1 	.word	0x252049c1
 8004e84:	397b839a 	.word	0x397b839a
 8004e88:	3fe921fb 	.word	0x3fe921fb
 8004e8c:	4002d97b 	.word	0x4002d97b
 8004e90:	3ff921fb 	.word	0x3ff921fb
 8004e94:	413921fb 	.word	0x413921fb
 8004e98:	3fe00000 	.word	0x3fe00000
 8004e9c:	0800d9bc 	.word	0x0800d9bc
 8004ea0:	7fefffff 	.word	0x7fefffff
 8004ea4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004ea8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004eac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	f7fb fd9e 	bl	80009f4 <__aeabi_d2iz>
 8004eb8:	f7fb fa9c 	bl	80003f4 <__aeabi_i2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ec8:	f7fb f946 	bl	8000158 <__aeabi_dsub>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <__ieee754_rem_pio2+0x3e0>)
 8004ed0:	f7fb faf6 	bl	80004c0 <__aeabi_dmul>
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	f7fb fd8c 	bl	80009f4 <__aeabi_d2iz>
 8004edc:	f7fb fa8a 	bl	80003f4 <__aeabi_i2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004eec:	f7fb f934 	bl	8000158 <__aeabi_dsub>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <__ieee754_rem_pio2+0x3e0>)
 8004ef4:	f7fb fae4 	bl	80004c0 <__aeabi_dmul>
 8004ef8:	f04f 0803 	mov.w	r8, #3
 8004efc:	2600      	movs	r6, #0
 8004efe:	2700      	movs	r7, #0
 8004f00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004f08:	4632      	mov	r2, r6
 8004f0a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004f0e:	463b      	mov	r3, r7
 8004f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8004f14:	f7fb fd3c 	bl	8000990 <__aeabi_dcmpeq>
 8004f18:	b9b8      	cbnz	r0, 8004f4a <__ieee754_rem_pio2+0x3da>
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <__ieee754_rem_pio2+0x3e4>)
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	2302      	movs	r3, #2
 8004f22:	4621      	mov	r1, r4
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	a806      	add	r0, sp, #24
 8004f28:	4643      	mov	r3, r8
 8004f2a:	f000 f8f3 	bl	8005114 <__kernel_rem_pio2>
 8004f2e:	f1bb 0f00 	cmp.w	fp, #0
 8004f32:	4605      	mov	r5, r0
 8004f34:	f6bf ae52 	bge.w	8004bdc <__ieee754_rem_pio2+0x6c>
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f3e:	6063      	str	r3, [r4, #4]
 8004f40:	68e3      	ldr	r3, [r4, #12]
 8004f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	60e3      	str	r3, [r4, #12]
 8004f48:	e6f6      	b.n	8004d38 <__ieee754_rem_pio2+0x1c8>
 8004f4a:	46d0      	mov	r8, sl
 8004f4c:	e7dc      	b.n	8004f08 <__ieee754_rem_pio2+0x398>
 8004f4e:	bf00      	nop
 8004f50:	41700000 	.word	0x41700000
 8004f54:	0800da3c 	.word	0x0800da3c

08004f58 <__kernel_cos>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004f60:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8004f64:	b085      	sub	sp, #20
 8004f66:	4605      	mov	r5, r0
 8004f68:	460c      	mov	r4, r1
 8004f6a:	4692      	mov	sl, r2
 8004f6c:	469b      	mov	fp, r3
 8004f6e:	da04      	bge.n	8004f7a <__kernel_cos+0x22>
 8004f70:	f7fb fd40 	bl	80009f4 <__aeabi_d2iz>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f000 80a8 	beq.w	80050ca <__kernel_cos+0x172>
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	4621      	mov	r1, r4
 8004f82:	f7fb fa9d 	bl	80004c0 <__aeabi_dmul>
 8004f86:	a352      	add	r3, pc, #328	; (adr r3, 80050d0 <__kernel_cos+0x178>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	4689      	mov	r9, r1
 8004f90:	f7fb fa96 	bl	80004c0 <__aeabi_dmul>
 8004f94:	a350      	add	r3, pc, #320	; (adr r3, 80050d8 <__kernel_cos+0x180>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f7fb f8df 	bl	800015c <__adddf3>
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	f7fb fa8d 	bl	80004c0 <__aeabi_dmul>
 8004fa6:	a34e      	add	r3, pc, #312	; (adr r3, 80050e0 <__kernel_cos+0x188>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f8d4 	bl	8000158 <__aeabi_dsub>
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f7fb fa84 	bl	80004c0 <__aeabi_dmul>
 8004fb8:	a34b      	add	r3, pc, #300	; (adr r3, 80050e8 <__kernel_cos+0x190>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb f8cd 	bl	800015c <__adddf3>
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	f7fb fa7b 	bl	80004c0 <__aeabi_dmul>
 8004fca:	a349      	add	r3, pc, #292	; (adr r3, 80050f0 <__kernel_cos+0x198>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb f8c2 	bl	8000158 <__aeabi_dsub>
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	f7fb fa72 	bl	80004c0 <__aeabi_dmul>
 8004fdc:	a346      	add	r3, pc, #280	; (adr r3, 80050f8 <__kernel_cos+0x1a0>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb f8bb 	bl	800015c <__adddf3>
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	4642      	mov	r2, r8
 8004fea:	f7fb fa69 	bl	80004c0 <__aeabi_dmul>
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <__kernel_cos+0x1a8>)
 8004ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ff4:	429f      	cmp	r7, r3
 8004ff6:	dc2a      	bgt.n	800504e <__kernel_cos+0xf6>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4b42      	ldr	r3, [pc, #264]	; (8005104 <__kernel_cos+0x1ac>)
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fa5e 	bl	80004c0 <__aeabi_dmul>
 8005004:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005008:	4606      	mov	r6, r0
 800500a:	460f      	mov	r7, r1
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fa56 	bl	80004c0 <__aeabi_dmul>
 8005014:	4652      	mov	r2, sl
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	465b      	mov	r3, fp
 800501c:	4628      	mov	r0, r5
 800501e:	4621      	mov	r1, r4
 8005020:	f7fb fa4e 	bl	80004c0 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb f894 	bl	8000158 <__aeabi_dsub>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4630      	mov	r0, r6
 8005036:	4639      	mov	r1, r7
 8005038:	f7fb f88e 	bl	8000158 <__aeabi_dsub>
 800503c:	4602      	mov	r2, r0
 800503e:	2000      	movs	r0, #0
 8005040:	460b      	mov	r3, r1
 8005042:	4931      	ldr	r1, [pc, #196]	; (8005108 <__kernel_cos+0x1b0>)
 8005044:	f7fb f888 	bl	8000158 <__aeabi_dsub>
 8005048:	b005      	add	sp, #20
 800504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <__kernel_cos+0x1b4>)
 8005050:	2000      	movs	r0, #0
 8005052:	429f      	cmp	r7, r3
 8005054:	bfdf      	itttt	le
 8005056:	2200      	movle	r2, #0
 8005058:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800505c:	4616      	movle	r6, r2
 800505e:	461f      	movle	r7, r3
 8005060:	bfc4      	itt	gt
 8005062:	2600      	movgt	r6, #0
 8005064:	4f2a      	ldrgt	r7, [pc, #168]	; (8005110 <__kernel_cos+0x1b8>)
 8005066:	4632      	mov	r2, r6
 8005068:	463b      	mov	r3, r7
 800506a:	4927      	ldr	r1, [pc, #156]	; (8005108 <__kernel_cos+0x1b0>)
 800506c:	f7fb f874 	bl	8000158 <__aeabi_dsub>
 8005070:	2200      	movs	r2, #0
 8005072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <__kernel_cos+0x1ac>)
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	f7fb fa20 	bl	80004c0 <__aeabi_dmul>
 8005080:	4632      	mov	r2, r6
 8005082:	463b      	mov	r3, r7
 8005084:	f7fb f868 	bl	8000158 <__aeabi_dsub>
 8005088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800508c:	4606      	mov	r6, r0
 800508e:	460f      	mov	r7, r1
 8005090:	4640      	mov	r0, r8
 8005092:	4649      	mov	r1, r9
 8005094:	f7fb fa14 	bl	80004c0 <__aeabi_dmul>
 8005098:	4652      	mov	r2, sl
 800509a:	4680      	mov	r8, r0
 800509c:	4689      	mov	r9, r1
 800509e:	465b      	mov	r3, fp
 80050a0:	4628      	mov	r0, r5
 80050a2:	4621      	mov	r1, r4
 80050a4:	f7fb fa0c 	bl	80004c0 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb f852 	bl	8000158 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb f84c 	bl	8000158 <__aeabi_dsub>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c8:	e7bc      	b.n	8005044 <__kernel_cos+0xec>
 80050ca:	2000      	movs	r0, #0
 80050cc:	490e      	ldr	r1, [pc, #56]	; (8005108 <__kernel_cos+0x1b0>)
 80050ce:	e7bb      	b.n	8005048 <__kernel_cos+0xf0>
 80050d0:	be8838d4 	.word	0xbe8838d4
 80050d4:	bda8fae9 	.word	0xbda8fae9
 80050d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80050dc:	3e21ee9e 	.word	0x3e21ee9e
 80050e0:	809c52ad 	.word	0x809c52ad
 80050e4:	3e927e4f 	.word	0x3e927e4f
 80050e8:	19cb1590 	.word	0x19cb1590
 80050ec:	3efa01a0 	.word	0x3efa01a0
 80050f0:	16c15177 	.word	0x16c15177
 80050f4:	3f56c16c 	.word	0x3f56c16c
 80050f8:	5555554c 	.word	0x5555554c
 80050fc:	3fa55555 	.word	0x3fa55555
 8005100:	3fd33332 	.word	0x3fd33332
 8005104:	3fe00000 	.word	0x3fe00000
 8005108:	3ff00000 	.word	0x3ff00000
 800510c:	3fe90000 	.word	0x3fe90000
 8005110:	3fd20000 	.word	0x3fd20000

08005114 <__kernel_rem_pio2>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800511c:	9306      	str	r3, [sp, #24]
 800511e:	9101      	str	r1, [sp, #4]
 8005120:	4bc0      	ldr	r3, [pc, #768]	; (8005424 <__kernel_rem_pio2+0x310>)
 8005122:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005124:	1ed4      	subs	r4, r2, #3
 8005126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800512a:	2500      	movs	r5, #0
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	9b06      	ldr	r3, [sp, #24]
 8005130:	900a      	str	r0, [sp, #40]	; 0x28
 8005132:	3b01      	subs	r3, #1
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	2318      	movs	r3, #24
 8005138:	fb94 f4f3 	sdiv	r4, r4, r3
 800513c:	f06f 0317 	mvn.w	r3, #23
 8005140:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005144:	fb04 3303 	mla	r3, r4, r3, r3
 8005148:	eb03 0a02 	add.w	sl, r3, r2
 800514c:	9a08      	ldr	r2, [sp, #32]
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	1aa7      	subs	r7, r4, r2
 8005152:	eb03 0802 	add.w	r8, r3, r2
 8005156:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005158:	2200      	movs	r2, #0
 800515a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800515e:	2300      	movs	r3, #0
 8005160:	ae20      	add	r6, sp, #128	; 0x80
 8005162:	4545      	cmp	r5, r8
 8005164:	dd14      	ble.n	8005190 <__kernel_rem_pio2+0x7c>
 8005166:	2600      	movs	r6, #0
 8005168:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	429e      	cmp	r6, r3
 8005170:	dc39      	bgt.n	80051e6 <__kernel_rem_pio2+0xd2>
 8005172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005174:	f04f 0800 	mov.w	r8, #0
 8005178:	3b08      	subs	r3, #8
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	9b06      	ldr	r3, [sp, #24]
 800517e:	f04f 0900 	mov.w	r9, #0
 8005182:	199d      	adds	r5, r3, r6
 8005184:	ab22      	add	r3, sp, #136	; 0x88
 8005186:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800518a:	9309      	str	r3, [sp, #36]	; 0x24
 800518c:	2700      	movs	r7, #0
 800518e:	e023      	b.n	80051d8 <__kernel_rem_pio2+0xc4>
 8005190:	42ef      	cmn	r7, r5
 8005192:	d40b      	bmi.n	80051ac <__kernel_rem_pio2+0x98>
 8005194:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005198:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800519c:	f7fb f92a 	bl	80003f4 <__aeabi_i2d>
 80051a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7da      	b.n	8005162 <__kernel_rem_pio2+0x4e>
 80051ac:	4610      	mov	r0, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	e7f8      	b.n	80051a4 <__kernel_rem_pio2+0x90>
 80051b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051b4:	9d04      	ldr	r5, [sp, #16]
 80051b6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80051ba:	9109      	str	r1, [sp, #36]	; 0x24
 80051bc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80051c0:	9504      	str	r5, [sp, #16]
 80051c2:	f7fb f97d 	bl	80004c0 <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fa ffc5 	bl	800015c <__adddf3>
 80051d2:	4680      	mov	r8, r0
 80051d4:	4689      	mov	r9, r1
 80051d6:	3701      	adds	r7, #1
 80051d8:	9b08      	ldr	r3, [sp, #32]
 80051da:	429f      	cmp	r7, r3
 80051dc:	dde9      	ble.n	80051b2 <__kernel_rem_pio2+0x9e>
 80051de:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7c2      	b.n	800516c <__kernel_rem_pio2+0x58>
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	aa0e      	add	r2, sp, #56	; 0x38
 80051ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051ee:	930d      	str	r3, [sp, #52]	; 0x34
 80051f0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80051f2:	9f02      	ldr	r7, [sp, #8]
 80051f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051f8:	930c      	str	r3, [sp, #48]	; 0x30
 80051fa:	2600      	movs	r6, #0
 80051fc:	ab9a      	add	r3, sp, #616	; 0x268
 80051fe:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8005202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005206:	f10b 3bff 	add.w	fp, fp, #4294967295
 800520a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800520e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005216:	ab9a      	add	r3, sp, #616	; 0x268
 8005218:	4413      	add	r3, r2
 800521a:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800521e:	1bbb      	subs	r3, r7, r6
 8005220:	2b00      	cmp	r3, #0
 8005222:	dc70      	bgt.n	8005306 <__kernel_rem_pio2+0x1f2>
 8005224:	4652      	mov	r2, sl
 8005226:	4640      	mov	r0, r8
 8005228:	4649      	mov	r1, r9
 800522a:	f000 fc09 	bl	8005a40 <scalbn>
 800522e:	2200      	movs	r2, #0
 8005230:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005234:	4604      	mov	r4, r0
 8005236:	460d      	mov	r5, r1
 8005238:	f7fb f942 	bl	80004c0 <__aeabi_dmul>
 800523c:	f000 fb7c 	bl	8005938 <floor>
 8005240:	2200      	movs	r2, #0
 8005242:	4b79      	ldr	r3, [pc, #484]	; (8005428 <__kernel_rem_pio2+0x314>)
 8005244:	f7fb f93c 	bl	80004c0 <__aeabi_dmul>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	f7fa ff82 	bl	8000158 <__aeabi_dsub>
 8005254:	460d      	mov	r5, r1
 8005256:	4604      	mov	r4, r0
 8005258:	f7fb fbcc 	bl	80009f4 <__aeabi_d2iz>
 800525c:	9004      	str	r0, [sp, #16]
 800525e:	f7fb f8c9 	bl	80003f4 <__aeabi_i2d>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fa ff75 	bl	8000158 <__aeabi_dsub>
 800526e:	f1ba 0f00 	cmp.w	sl, #0
 8005272:	4680      	mov	r8, r0
 8005274:	4689      	mov	r9, r1
 8005276:	dd6b      	ble.n	8005350 <__kernel_rem_pio2+0x23c>
 8005278:	1e7a      	subs	r2, r7, #1
 800527a:	ab0e      	add	r3, sp, #56	; 0x38
 800527c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005280:	f1ca 0118 	rsb	r1, sl, #24
 8005284:	9c04      	ldr	r4, [sp, #16]
 8005286:	fa40 f301 	asr.w	r3, r0, r1
 800528a:	441c      	add	r4, r3
 800528c:	408b      	lsls	r3, r1
 800528e:	1ac0      	subs	r0, r0, r3
 8005290:	ab0e      	add	r3, sp, #56	; 0x38
 8005292:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005296:	f1ca 0317 	rsb	r3, sl, #23
 800529a:	9404      	str	r4, [sp, #16]
 800529c:	fa40 fb03 	asr.w	fp, r0, r3
 80052a0:	f1bb 0f00 	cmp.w	fp, #0
 80052a4:	dd62      	ble.n	800536c <__kernel_rem_pio2+0x258>
 80052a6:	2200      	movs	r2, #0
 80052a8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80052ac:	4614      	mov	r4, r2
 80052ae:	9b04      	ldr	r3, [sp, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	4297      	cmp	r7, r2
 80052b6:	f300 8088 	bgt.w	80053ca <__kernel_rem_pio2+0x2b6>
 80052ba:	f1ba 0f00 	cmp.w	sl, #0
 80052be:	dd07      	ble.n	80052d0 <__kernel_rem_pio2+0x1bc>
 80052c0:	f1ba 0f01 	cmp.w	sl, #1
 80052c4:	f000 8095 	beq.w	80053f2 <__kernel_rem_pio2+0x2de>
 80052c8:	f1ba 0f02 	cmp.w	sl, #2
 80052cc:	f000 809b 	beq.w	8005406 <__kernel_rem_pio2+0x2f2>
 80052d0:	f1bb 0f02 	cmp.w	fp, #2
 80052d4:	d14a      	bne.n	800536c <__kernel_rem_pio2+0x258>
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	2000      	movs	r0, #0
 80052dc:	4953      	ldr	r1, [pc, #332]	; (800542c <__kernel_rem_pio2+0x318>)
 80052de:	f7fa ff3b 	bl	8000158 <__aeabi_dsub>
 80052e2:	4680      	mov	r8, r0
 80052e4:	4689      	mov	r9, r1
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	d040      	beq.n	800536c <__kernel_rem_pio2+0x258>
 80052ea:	4652      	mov	r2, sl
 80052ec:	2000      	movs	r0, #0
 80052ee:	494f      	ldr	r1, [pc, #316]	; (800542c <__kernel_rem_pio2+0x318>)
 80052f0:	f000 fba6 	bl	8005a40 <scalbn>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fa ff2c 	bl	8000158 <__aeabi_dsub>
 8005300:	4680      	mov	r8, r0
 8005302:	4689      	mov	r9, r1
 8005304:	e032      	b.n	800536c <__kernel_rem_pio2+0x258>
 8005306:	2200      	movs	r2, #0
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <__kernel_rem_pio2+0x31c>)
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f7fb f8d7 	bl	80004c0 <__aeabi_dmul>
 8005312:	f7fb fb6f 	bl	80009f4 <__aeabi_d2iz>
 8005316:	f7fb f86d 	bl	80003f4 <__aeabi_i2d>
 800531a:	2200      	movs	r2, #0
 800531c:	4b45      	ldr	r3, [pc, #276]	; (8005434 <__kernel_rem_pio2+0x320>)
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	f7fb f8cd 	bl	80004c0 <__aeabi_dmul>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fa ff13 	bl	8000158 <__aeabi_dsub>
 8005332:	f7fb fb5f 	bl	80009f4 <__aeabi_d2iz>
 8005336:	ab0e      	add	r3, sp, #56	; 0x38
 8005338:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800533c:	4629      	mov	r1, r5
 800533e:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005342:	4620      	mov	r0, r4
 8005344:	f7fa ff0a 	bl	800015c <__adddf3>
 8005348:	3601      	adds	r6, #1
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	e766      	b.n	800521e <__kernel_rem_pio2+0x10a>
 8005350:	d106      	bne.n	8005360 <__kernel_rem_pio2+0x24c>
 8005352:	1e7b      	subs	r3, r7, #1
 8005354:	aa0e      	add	r2, sp, #56	; 0x38
 8005356:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800535a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800535e:	e79f      	b.n	80052a0 <__kernel_rem_pio2+0x18c>
 8005360:	2200      	movs	r2, #0
 8005362:	4b35      	ldr	r3, [pc, #212]	; (8005438 <__kernel_rem_pio2+0x324>)
 8005364:	f7fb fb32 	bl	80009cc <__aeabi_dcmpge>
 8005368:	bb60      	cbnz	r0, 80053c4 <__kernel_rem_pio2+0x2b0>
 800536a:	4683      	mov	fp, r0
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb fb0c 	bl	8000990 <__aeabi_dcmpeq>
 8005378:	2800      	cmp	r0, #0
 800537a:	f000 80c4 	beq.w	8005506 <__kernel_rem_pio2+0x3f2>
 800537e:	1e7c      	subs	r4, r7, #1
 8005380:	4623      	mov	r3, r4
 8005382:	2200      	movs	r2, #0
 8005384:	9902      	ldr	r1, [sp, #8]
 8005386:	428b      	cmp	r3, r1
 8005388:	da44      	bge.n	8005414 <__kernel_rem_pio2+0x300>
 800538a:	2a00      	cmp	r2, #0
 800538c:	f040 8088 	bne.w	80054a0 <__kernel_rem_pio2+0x38c>
 8005390:	2401      	movs	r4, #1
 8005392:	f06f 0203 	mvn.w	r2, #3
 8005396:	fb02 f304 	mul.w	r3, r2, r4
 800539a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800539c:	58cb      	ldr	r3, [r1, r3]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03e      	beq.n	8005420 <__kernel_rem_pio2+0x30c>
 80053a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a4:	aa9a      	add	r2, sp, #616	; 0x268
 80053a6:	4413      	add	r3, r2
 80053a8:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80053ac:	9b06      	ldr	r3, [sp, #24]
 80053ae:	1c7e      	adds	r6, r7, #1
 80053b0:	19dd      	adds	r5, r3, r7
 80053b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80053b6:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80053ba:	443c      	add	r4, r7
 80053bc:	42a6      	cmp	r6, r4
 80053be:	dd3d      	ble.n	800543c <__kernel_rem_pio2+0x328>
 80053c0:	4627      	mov	r7, r4
 80053c2:	e71a      	b.n	80051fa <__kernel_rem_pio2+0xe6>
 80053c4:	f04f 0b02 	mov.w	fp, #2
 80053c8:	e76d      	b.n	80052a6 <__kernel_rem_pio2+0x192>
 80053ca:	ab0e      	add	r3, sp, #56	; 0x38
 80053cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d0:	b94c      	cbnz	r4, 80053e6 <__kernel_rem_pio2+0x2d2>
 80053d2:	b12b      	cbz	r3, 80053e0 <__kernel_rem_pio2+0x2cc>
 80053d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80053d8:	a80e      	add	r0, sp, #56	; 0x38
 80053da:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80053de:	2301      	movs	r3, #1
 80053e0:	3201      	adds	r2, #1
 80053e2:	461c      	mov	r4, r3
 80053e4:	e766      	b.n	80052b4 <__kernel_rem_pio2+0x1a0>
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	a80e      	add	r0, sp, #56	; 0x38
 80053ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80053ee:	4623      	mov	r3, r4
 80053f0:	e7f6      	b.n	80053e0 <__kernel_rem_pio2+0x2cc>
 80053f2:	1e7a      	subs	r2, r7, #1
 80053f4:	ab0e      	add	r3, sp, #56	; 0x38
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80053fe:	a90e      	add	r1, sp, #56	; 0x38
 8005400:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005404:	e764      	b.n	80052d0 <__kernel_rem_pio2+0x1bc>
 8005406:	1e7a      	subs	r2, r7, #1
 8005408:	ab0e      	add	r3, sp, #56	; 0x38
 800540a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005412:	e7f4      	b.n	80053fe <__kernel_rem_pio2+0x2ea>
 8005414:	a90e      	add	r1, sp, #56	; 0x38
 8005416:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800541a:	3b01      	subs	r3, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	e7b1      	b.n	8005384 <__kernel_rem_pio2+0x270>
 8005420:	3401      	adds	r4, #1
 8005422:	e7b8      	b.n	8005396 <__kernel_rem_pio2+0x282>
 8005424:	0800db88 	.word	0x0800db88
 8005428:	40200000 	.word	0x40200000
 800542c:	3ff00000 	.word	0x3ff00000
 8005430:	3e700000 	.word	0x3e700000
 8005434:	41700000 	.word	0x41700000
 8005438:	3fe00000 	.word	0x3fe00000
 800543c:	f105 0308 	add.w	r3, r5, #8
 8005440:	930b      	str	r3, [sp, #44]	; 0x2c
 8005442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005444:	2700      	movs	r7, #0
 8005446:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800544a:	f7fa ffd3 	bl	80003f4 <__aeabi_i2d>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	f04f 0900 	mov.w	r9, #0
 8005456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005458:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800545c:	3b08      	subs	r3, #8
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	f105 0310 	add.w	r3, r5, #16
 8005464:	9309      	str	r3, [sp, #36]	; 0x24
 8005466:	9b08      	ldr	r3, [sp, #32]
 8005468:	429f      	cmp	r7, r3
 800546a:	dd04      	ble.n	8005476 <__kernel_rem_pio2+0x362>
 800546c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005470:	3601      	adds	r6, #1
 8005472:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005474:	e7a2      	b.n	80053bc <__kernel_rem_pio2+0x2a8>
 8005476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005478:	9d04      	ldr	r5, [sp, #16]
 800547a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800547e:	9109      	str	r1, [sp, #36]	; 0x24
 8005480:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005484:	9504      	str	r5, [sp, #16]
 8005486:	f7fb f81b 	bl	80004c0 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fa fe63 	bl	800015c <__adddf3>
 8005496:	3701      	adds	r7, #1
 8005498:	4680      	mov	r8, r0
 800549a:	4689      	mov	r9, r1
 800549c:	e7e3      	b.n	8005466 <__kernel_rem_pio2+0x352>
 800549e:	3c01      	subs	r4, #1
 80054a0:	ab0e      	add	r3, sp, #56	; 0x38
 80054a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80054a6:	f1aa 0a18 	sub.w	sl, sl, #24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f7      	beq.n	800549e <__kernel_rem_pio2+0x38a>
 80054ae:	4652      	mov	r2, sl
 80054b0:	2000      	movs	r0, #0
 80054b2:	49b5      	ldr	r1, [pc, #724]	; (8005788 <__kernel_rem_pio2+0x674>)
 80054b4:	f000 fac4 	bl	8005a40 <scalbn>
 80054b8:	4625      	mov	r5, r4
 80054ba:	4606      	mov	r6, r0
 80054bc:	460f      	mov	r7, r1
 80054be:	f04f 0900 	mov.w	r9, #0
 80054c2:	00e3      	lsls	r3, r4, #3
 80054c4:	aa9a      	add	r2, sp, #616	; 0x268
 80054c6:	eb02 0803 	add.w	r8, r2, r3
 80054ca:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8005790 <__kernel_rem_pio2+0x67c>
 80054ce:	9308      	str	r3, [sp, #32]
 80054d0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	da4c      	bge.n	8005572 <__kernel_rem_pio2+0x45e>
 80054d8:	2500      	movs	r5, #0
 80054da:	f104 5800 	add.w	r8, r4, #536870912	; 0x20000000
 80054de:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 80054e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e6:	1b63      	subs	r3, r4, r5
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db71      	blt.n	80055d0 <__kernel_rem_pio2+0x4bc>
 80054ec:	ab72      	add	r3, sp, #456	; 0x1c8
 80054ee:	eba8 0705 	sub.w	r7, r8, r5
 80054f2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80054f6:	2200      	movs	r2, #0
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005794 <__kernel_rem_pio2+0x680>
 80054fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005502:	2600      	movs	r6, #0
 8005504:	e059      	b.n	80055ba <__kernel_rem_pio2+0x4a6>
 8005506:	f1ca 0200 	rsb	r2, sl, #0
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f000 fa97 	bl	8005a40 <scalbn>
 8005512:	2200      	movs	r2, #0
 8005514:	4b9d      	ldr	r3, [pc, #628]	; (800578c <__kernel_rem_pio2+0x678>)
 8005516:	4604      	mov	r4, r0
 8005518:	460d      	mov	r5, r1
 800551a:	f7fb fa57 	bl	80009cc <__aeabi_dcmpge>
 800551e:	b1f8      	cbz	r0, 8005560 <__kernel_rem_pio2+0x44c>
 8005520:	2200      	movs	r2, #0
 8005522:	4b9b      	ldr	r3, [pc, #620]	; (8005790 <__kernel_rem_pio2+0x67c>)
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	f7fa ffca 	bl	80004c0 <__aeabi_dmul>
 800552c:	f7fb fa62 	bl	80009f4 <__aeabi_d2iz>
 8005530:	4606      	mov	r6, r0
 8005532:	f7fa ff5f 	bl	80003f4 <__aeabi_i2d>
 8005536:	2200      	movs	r2, #0
 8005538:	4b94      	ldr	r3, [pc, #592]	; (800578c <__kernel_rem_pio2+0x678>)
 800553a:	f7fa ffc1 	bl	80004c0 <__aeabi_dmul>
 800553e:	460b      	mov	r3, r1
 8005540:	4602      	mov	r2, r0
 8005542:	4629      	mov	r1, r5
 8005544:	4620      	mov	r0, r4
 8005546:	f7fa fe07 	bl	8000158 <__aeabi_dsub>
 800554a:	f7fb fa53 	bl	80009f4 <__aeabi_d2iz>
 800554e:	1c7c      	adds	r4, r7, #1
 8005550:	ab0e      	add	r3, sp, #56	; 0x38
 8005552:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005556:	f10a 0a18 	add.w	sl, sl, #24
 800555a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800555e:	e7a6      	b.n	80054ae <__kernel_rem_pio2+0x39a>
 8005560:	4620      	mov	r0, r4
 8005562:	4629      	mov	r1, r5
 8005564:	f7fb fa46 	bl	80009f4 <__aeabi_d2iz>
 8005568:	ab0e      	add	r3, sp, #56	; 0x38
 800556a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800556e:	463c      	mov	r4, r7
 8005570:	e79d      	b.n	80054ae <__kernel_rem_pio2+0x39a>
 8005572:	ab0e      	add	r3, sp, #56	; 0x38
 8005574:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005578:	f7fa ff3c 	bl	80003f4 <__aeabi_i2d>
 800557c:	4632      	mov	r2, r6
 800557e:	463b      	mov	r3, r7
 8005580:	f7fa ff9e 	bl	80004c0 <__aeabi_dmul>
 8005584:	464a      	mov	r2, r9
 8005586:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800558a:	4653      	mov	r3, sl
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	f7fa ff96 	bl	80004c0 <__aeabi_dmul>
 8005594:	3d01      	subs	r5, #1
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	e79b      	b.n	80054d4 <__kernel_rem_pio2+0x3c0>
 800559c:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 80055a0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80055a4:	f7fa ff8c 	bl	80004c0 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b0:	f7fa fdd4 	bl	800015c <__adddf3>
 80055b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055b8:	3601      	adds	r6, #1
 80055ba:	9b02      	ldr	r3, [sp, #8]
 80055bc:	429e      	cmp	r6, r3
 80055be:	dc01      	bgt.n	80055c4 <__kernel_rem_pio2+0x4b0>
 80055c0:	42ae      	cmp	r6, r5
 80055c2:	ddeb      	ble.n	800559c <__kernel_rem_pio2+0x488>
 80055c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055c8:	3501      	adds	r5, #1
 80055ca:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 80055ce:	e78a      	b.n	80054e6 <__kernel_rem_pio2+0x3d2>
 80055d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d86c      	bhi.n	80056b0 <__kernel_rem_pio2+0x59c>
 80055d6:	e8df f003 	tbb	[pc, r3]
 80055da:	2c58      	.short	0x2c58
 80055dc:	022c      	.short	0x022c
 80055de:	9a08      	ldr	r2, [sp, #32]
 80055e0:	ab4a      	add	r3, sp, #296	; 0x128
 80055e2:	189d      	adds	r5, r3, r2
 80055e4:	46aa      	mov	sl, r5
 80055e6:	4626      	mov	r6, r4
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	f300 8088 	bgt.w	80056fe <__kernel_rem_pio2+0x5ea>
 80055ee:	46a2      	mov	sl, r4
 80055f0:	f1ba 0f01 	cmp.w	sl, #1
 80055f4:	f300 80a1 	bgt.w	800573a <__kernel_rem_pio2+0x626>
 80055f8:	2700      	movs	r7, #0
 80055fa:	463e      	mov	r6, r7
 80055fc:	9d08      	ldr	r5, [sp, #32]
 80055fe:	ab4a      	add	r3, sp, #296	; 0x128
 8005600:	3508      	adds	r5, #8
 8005602:	441d      	add	r5, r3
 8005604:	2c01      	cmp	r4, #1
 8005606:	f300 80b5 	bgt.w	8005774 <__kernel_rem_pio2+0x660>
 800560a:	f1bb 0f00 	cmp.w	fp, #0
 800560e:	f040 80c3 	bne.w	8005798 <__kernel_rem_pio2+0x684>
 8005612:	9901      	ldr	r1, [sp, #4]
 8005614:	ab4a      	add	r3, sp, #296	; 0x128
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	e9c1 2300 	strd	r2, r3, [r1]
 800561e:	ab4c      	add	r3, sp, #304	; 0x130
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005628:	463a      	mov	r2, r7
 800562a:	4633      	mov	r3, r6
 800562c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005630:	e03e      	b.n	80056b0 <__kernel_rem_pio2+0x59c>
 8005632:	f04f 0e00 	mov.w	lr, #0
 8005636:	4626      	mov	r6, r4
 8005638:	4677      	mov	r7, lr
 800563a:	9d08      	ldr	r5, [sp, #32]
 800563c:	ab4a      	add	r3, sp, #296	; 0x128
 800563e:	3508      	adds	r5, #8
 8005640:	441d      	add	r5, r3
 8005642:	2e00      	cmp	r6, #0
 8005644:	da45      	bge.n	80056d2 <__kernel_rem_pio2+0x5be>
 8005646:	f1bb 0f00 	cmp.w	fp, #0
 800564a:	d04c      	beq.n	80056e6 <__kernel_rem_pio2+0x5d2>
 800564c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8005650:	4672      	mov	r2, lr
 8005652:	460b      	mov	r3, r1
 8005654:	9901      	ldr	r1, [sp, #4]
 8005656:	2601      	movs	r6, #1
 8005658:	e9c1 2300 	strd	r2, r3, [r1]
 800565c:	a94a      	add	r1, sp, #296	; 0x128
 800565e:	4672      	mov	r2, lr
 8005660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005664:	463b      	mov	r3, r7
 8005666:	f7fa fd77 	bl	8000158 <__aeabi_dsub>
 800566a:	4686      	mov	lr, r0
 800566c:	460f      	mov	r7, r1
 800566e:	ad4a      	add	r5, sp, #296	; 0x128
 8005670:	42b4      	cmp	r4, r6
 8005672:	da3a      	bge.n	80056ea <__kernel_rem_pio2+0x5d6>
 8005674:	f1bb 0f00 	cmp.w	fp, #0
 8005678:	d001      	beq.n	800567e <__kernel_rem_pio2+0x56a>
 800567a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800567e:	4672      	mov	r2, lr
 8005680:	463b      	mov	r3, r7
 8005682:	9901      	ldr	r1, [sp, #4]
 8005684:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005688:	e012      	b.n	80056b0 <__kernel_rem_pio2+0x59c>
 800568a:	2700      	movs	r7, #0
 800568c:	463d      	mov	r5, r7
 800568e:	9b08      	ldr	r3, [sp, #32]
 8005690:	aa9a      	add	r2, sp, #616	; 0x268
 8005692:	4413      	add	r3, r2
 8005694:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8005698:	2c00      	cmp	r4, #0
 800569a:	da10      	bge.n	80056be <__kernel_rem_pio2+0x5aa>
 800569c:	f1bb 0f00 	cmp.w	fp, #0
 80056a0:	d001      	beq.n	80056a6 <__kernel_rem_pio2+0x592>
 80056a2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80056a6:	463a      	mov	r2, r7
 80056a8:	462b      	mov	r3, r5
 80056aa:	9901      	ldr	r1, [sp, #4]
 80056ac:	e9c1 2300 	strd	r2, r3, [r1]
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	f003 0007 	and.w	r0, r3, #7
 80056b6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80056ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056be:	4638      	mov	r0, r7
 80056c0:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80056c4:	4629      	mov	r1, r5
 80056c6:	f7fa fd49 	bl	800015c <__adddf3>
 80056ca:	3c01      	subs	r4, #1
 80056cc:	4607      	mov	r7, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	e7e2      	b.n	8005698 <__kernel_rem_pio2+0x584>
 80056d2:	4670      	mov	r0, lr
 80056d4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80056d8:	4639      	mov	r1, r7
 80056da:	f7fa fd3f 	bl	800015c <__adddf3>
 80056de:	3e01      	subs	r6, #1
 80056e0:	4686      	mov	lr, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	e7ad      	b.n	8005642 <__kernel_rem_pio2+0x52e>
 80056e6:	4639      	mov	r1, r7
 80056e8:	e7b2      	b.n	8005650 <__kernel_rem_pio2+0x53c>
 80056ea:	4670      	mov	r0, lr
 80056ec:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fa fd33 	bl	800015c <__adddf3>
 80056f6:	3601      	adds	r6, #1
 80056f8:	4686      	mov	lr, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	e7b8      	b.n	8005670 <__kernel_rem_pio2+0x55c>
 80056fe:	e9da 2300 	ldrd	r2, r3, [sl]
 8005702:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005706:	4640      	mov	r0, r8
 8005708:	4649      	mov	r1, r9
 800570a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800570e:	f7fa fd25 	bl	800015c <__adddf3>
 8005712:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa fd1b 	bl	8000158 <__aeabi_dsub>
 8005722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005726:	f7fa fd19 	bl	800015c <__adddf3>
 800572a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800572e:	e9ca 0100 	strd	r0, r1, [sl]
 8005732:	3e01      	subs	r6, #1
 8005734:	e96a 2302 	strd	r2, r3, [sl, #-8]!
 8005738:	e756      	b.n	80055e8 <__kernel_rem_pio2+0x4d4>
 800573a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800573e:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800574a:	f7fa fd07 	bl	800015c <__adddf3>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4680      	mov	r8, r0
 8005754:	4689      	mov	r9, r1
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fa fcfd 	bl	8000158 <__aeabi_dsub>
 800575e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005762:	f7fa fcfb 	bl	800015c <__adddf3>
 8005766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800576a:	e9c5 0100 	strd	r0, r1, [r5]
 800576e:	e965 8902 	strd	r8, r9, [r5, #-8]!
 8005772:	e73d      	b.n	80055f0 <__kernel_rem_pio2+0x4dc>
 8005774:	4638      	mov	r0, r7
 8005776:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800577a:	4631      	mov	r1, r6
 800577c:	f7fa fcee 	bl	800015c <__adddf3>
 8005780:	3c01      	subs	r4, #1
 8005782:	4607      	mov	r7, r0
 8005784:	460e      	mov	r6, r1
 8005786:	e73d      	b.n	8005604 <__kernel_rem_pio2+0x4f0>
 8005788:	3ff00000 	.word	0x3ff00000
 800578c:	41700000 	.word	0x41700000
 8005790:	3e700000 	.word	0x3e700000
 8005794:	0800db40 	.word	0x0800db40
 8005798:	9a01      	ldr	r2, [sp, #4]
 800579a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800579c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 80057a4:	6117      	str	r7, [r2, #16]
 80057a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 80057ae:	6156      	str	r6, [r2, #20]
 80057b0:	6093      	str	r3, [r2, #8]
 80057b2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80057b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	60d3      	str	r3, [r2, #12]
 80057ba:	e779      	b.n	80056b0 <__kernel_rem_pio2+0x59c>
 80057bc:	0000      	movs	r0, r0
	...

080057c0 <__kernel_sin>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	e9cd 2300 	strd	r2, r3, [sp]
 80057ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80057d2:	4682      	mov	sl, r0
 80057d4:	460c      	mov	r4, r1
 80057d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80057d8:	da03      	bge.n	80057e2 <__kernel_sin+0x22>
 80057da:	f7fb f90b 	bl	80009f4 <__aeabi_d2iz>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d050      	beq.n	8005884 <__kernel_sin+0xc4>
 80057e2:	4652      	mov	r2, sl
 80057e4:	4623      	mov	r3, r4
 80057e6:	4650      	mov	r0, sl
 80057e8:	4621      	mov	r1, r4
 80057ea:	f7fa fe69 	bl	80004c0 <__aeabi_dmul>
 80057ee:	4606      	mov	r6, r0
 80057f0:	460f      	mov	r7, r1
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4650      	mov	r0, sl
 80057f8:	4621      	mov	r1, r4
 80057fa:	f7fa fe61 	bl	80004c0 <__aeabi_dmul>
 80057fe:	a33e      	add	r3, pc, #248	; (adr r3, 80058f8 <__kernel_sin+0x138>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	4680      	mov	r8, r0
 8005806:	4689      	mov	r9, r1
 8005808:	4630      	mov	r0, r6
 800580a:	4639      	mov	r1, r7
 800580c:	f7fa fe58 	bl	80004c0 <__aeabi_dmul>
 8005810:	a33b      	add	r3, pc, #236	; (adr r3, 8005900 <__kernel_sin+0x140>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fa fc9f 	bl	8000158 <__aeabi_dsub>
 800581a:	4632      	mov	r2, r6
 800581c:	463b      	mov	r3, r7
 800581e:	f7fa fe4f 	bl	80004c0 <__aeabi_dmul>
 8005822:	a339      	add	r3, pc, #228	; (adr r3, 8005908 <__kernel_sin+0x148>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fc98 	bl	800015c <__adddf3>
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	f7fa fe46 	bl	80004c0 <__aeabi_dmul>
 8005834:	a336      	add	r3, pc, #216	; (adr r3, 8005910 <__kernel_sin+0x150>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fc8d 	bl	8000158 <__aeabi_dsub>
 800583e:	4632      	mov	r2, r6
 8005840:	463b      	mov	r3, r7
 8005842:	f7fa fe3d 	bl	80004c0 <__aeabi_dmul>
 8005846:	a334      	add	r3, pc, #208	; (adr r3, 8005918 <__kernel_sin+0x158>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa fc86 	bl	800015c <__adddf3>
 8005850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005854:	b9dd      	cbnz	r5, 800588e <__kernel_sin+0xce>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4630      	mov	r0, r6
 800585c:	4639      	mov	r1, r7
 800585e:	f7fa fe2f 	bl	80004c0 <__aeabi_dmul>
 8005862:	a32f      	add	r3, pc, #188	; (adr r3, 8005920 <__kernel_sin+0x160>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f7fa fc76 	bl	8000158 <__aeabi_dsub>
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	f7fa fe26 	bl	80004c0 <__aeabi_dmul>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4650      	mov	r0, sl
 800587a:	4621      	mov	r1, r4
 800587c:	f7fa fc6e 	bl	800015c <__adddf3>
 8005880:	4682      	mov	sl, r0
 8005882:	460c      	mov	r4, r1
 8005884:	4650      	mov	r0, sl
 8005886:	4621      	mov	r1, r4
 8005888:	b006      	add	sp, #24
 800588a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588e:	2200      	movs	r2, #0
 8005890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <__kernel_sin+0x168>)
 8005896:	f7fa fe13 	bl	80004c0 <__aeabi_dmul>
 800589a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058a2:	4640      	mov	r0, r8
 80058a4:	4649      	mov	r1, r9
 80058a6:	f7fa fe0b 	bl	80004c0 <__aeabi_dmul>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058b2:	f7fa fc51 	bl	8000158 <__aeabi_dsub>
 80058b6:	4632      	mov	r2, r6
 80058b8:	463b      	mov	r3, r7
 80058ba:	f7fa fe01 	bl	80004c0 <__aeabi_dmul>
 80058be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c2:	f7fa fc49 	bl	8000158 <__aeabi_dsub>
 80058c6:	a316      	add	r3, pc, #88	; (adr r3, 8005920 <__kernel_sin+0x160>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fdf4 	bl	80004c0 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fc3c 	bl	800015c <__adddf3>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4650      	mov	r0, sl
 80058ea:	4621      	mov	r1, r4
 80058ec:	f7fa fc34 	bl	8000158 <__aeabi_dsub>
 80058f0:	e7c6      	b.n	8005880 <__kernel_sin+0xc0>
 80058f2:	bf00      	nop
 80058f4:	f3af 8000 	nop.w
 80058f8:	5acfd57c 	.word	0x5acfd57c
 80058fc:	3de5d93a 	.word	0x3de5d93a
 8005900:	8a2b9ceb 	.word	0x8a2b9ceb
 8005904:	3e5ae5e6 	.word	0x3e5ae5e6
 8005908:	57b1fe7d 	.word	0x57b1fe7d
 800590c:	3ec71de3 	.word	0x3ec71de3
 8005910:	19c161d5 	.word	0x19c161d5
 8005914:	3f2a01a0 	.word	0x3f2a01a0
 8005918:	1110f8a6 	.word	0x1110f8a6
 800591c:	3f811111 	.word	0x3f811111
 8005920:	55555549 	.word	0x55555549
 8005924:	3fc55555 	.word	0x3fc55555
 8005928:	3fe00000 	.word	0x3fe00000

0800592c <fabs>:
 800592c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005930:	4770      	bx	lr
 8005932:	0000      	movs	r0, r0
 8005934:	0000      	movs	r0, r0
	...

08005938 <floor>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005940:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005944:	2e13      	cmp	r6, #19
 8005946:	4607      	mov	r7, r0
 8005948:	460b      	mov	r3, r1
 800594a:	460c      	mov	r4, r1
 800594c:	4605      	mov	r5, r0
 800594e:	dc35      	bgt.n	80059bc <floor+0x84>
 8005950:	2e00      	cmp	r6, #0
 8005952:	da16      	bge.n	8005982 <floor+0x4a>
 8005954:	a336      	add	r3, pc, #216	; (adr r3, 8005a30 <floor+0xf8>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fbff 	bl	800015c <__adddf3>
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	f7fb f83d 	bl	80009e0 <__aeabi_dcmpgt>
 8005966:	b148      	cbz	r0, 800597c <floor+0x44>
 8005968:	2c00      	cmp	r4, #0
 800596a:	da5c      	bge.n	8005a26 <floor+0xee>
 800596c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005970:	433b      	orrs	r3, r7
 8005972:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <floor+0x100>)
 8005974:	f04f 0500 	mov.w	r5, #0
 8005978:	bf18      	it	ne
 800597a:	461c      	movne	r4, r3
 800597c:	4623      	mov	r3, r4
 800597e:	462f      	mov	r7, r5
 8005980:	e027      	b.n	80059d2 <floor+0x9a>
 8005982:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <floor+0x104>)
 8005984:	fa42 f806 	asr.w	r8, r2, r6
 8005988:	ea01 0208 	and.w	r2, r1, r8
 800598c:	4302      	orrs	r2, r0
 800598e:	d020      	beq.n	80059d2 <floor+0x9a>
 8005990:	a327      	add	r3, pc, #156	; (adr r3, 8005a30 <floor+0xf8>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fbe1 	bl	800015c <__adddf3>
 800599a:	2200      	movs	r2, #0
 800599c:	2300      	movs	r3, #0
 800599e:	f7fb f81f 	bl	80009e0 <__aeabi_dcmpgt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0ea      	beq.n	800597c <floor+0x44>
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	bfbe      	ittt	lt
 80059aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80059ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80059b2:	19a4      	addlt	r4, r4, r6
 80059b4:	ea24 0408 	bic.w	r4, r4, r8
 80059b8:	2500      	movs	r5, #0
 80059ba:	e7df      	b.n	800597c <floor+0x44>
 80059bc:	2e33      	cmp	r6, #51	; 0x33
 80059be:	dd0c      	ble.n	80059da <floor+0xa2>
 80059c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80059c4:	d105      	bne.n	80059d2 <floor+0x9a>
 80059c6:	460b      	mov	r3, r1
 80059c8:	4602      	mov	r2, r0
 80059ca:	f7fa fbc7 	bl	800015c <__adddf3>
 80059ce:	4607      	mov	r7, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4638      	mov	r0, r7
 80059d4:	4619      	mov	r1, r3
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80059e2:	fa22 f808 	lsr.w	r8, r2, r8
 80059e6:	ea10 0f08 	tst.w	r0, r8
 80059ea:	d0f2      	beq.n	80059d2 <floor+0x9a>
 80059ec:	a310      	add	r3, pc, #64	; (adr r3, 8005a30 <floor+0xf8>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fbb3 	bl	800015c <__adddf3>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	f7fa fff1 	bl	80009e0 <__aeabi_dcmpgt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0bc      	beq.n	800597c <floor+0x44>
 8005a02:	2c00      	cmp	r4, #0
 8005a04:	da02      	bge.n	8005a0c <floor+0xd4>
 8005a06:	2e14      	cmp	r6, #20
 8005a08:	d103      	bne.n	8005a12 <floor+0xda>
 8005a0a:	3401      	adds	r4, #1
 8005a0c:	ea25 0508 	bic.w	r5, r5, r8
 8005a10:	e7b4      	b.n	800597c <floor+0x44>
 8005a12:	2301      	movs	r3, #1
 8005a14:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005a18:	fa03 f606 	lsl.w	r6, r3, r6
 8005a1c:	4435      	add	r5, r6
 8005a1e:	42af      	cmp	r7, r5
 8005a20:	bf88      	it	hi
 8005a22:	18e4      	addhi	r4, r4, r3
 8005a24:	e7f2      	b.n	8005a0c <floor+0xd4>
 8005a26:	2500      	movs	r5, #0
 8005a28:	462c      	mov	r4, r5
 8005a2a:	e7a7      	b.n	800597c <floor+0x44>
 8005a2c:	f3af 8000 	nop.w
 8005a30:	8800759c 	.word	0x8800759c
 8005a34:	7e37e43c 	.word	0x7e37e43c
 8005a38:	bff00000 	.word	0xbff00000
 8005a3c:	000fffff 	.word	0x000fffff

08005a40 <scalbn>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	4616      	mov	r6, r2
 8005a44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	b98a      	cbnz	r2, 8005a74 <scalbn+0x34>
 8005a50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a54:	4303      	orrs	r3, r0
 8005a56:	d035      	beq.n	8005ac4 <scalbn+0x84>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <scalbn+0xd0>)
 8005a5c:	f7fa fd30 	bl	80004c0 <__aeabi_dmul>
 8005a60:	4a2c      	ldr	r2, [pc, #176]	; (8005b14 <scalbn+0xd4>)
 8005a62:	4604      	mov	r4, r0
 8005a64:	4296      	cmp	r6, r2
 8005a66:	460d      	mov	r5, r1
 8005a68:	460b      	mov	r3, r1
 8005a6a:	da0e      	bge.n	8005a8a <scalbn+0x4a>
 8005a6c:	a324      	add	r3, pc, #144	; (adr r3, 8005b00 <scalbn+0xc0>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	e01c      	b.n	8005aae <scalbn+0x6e>
 8005a74:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005a78:	42ba      	cmp	r2, r7
 8005a7a:	d109      	bne.n	8005a90 <scalbn+0x50>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	f7fa fb6c 	bl	800015c <__adddf3>
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	e01c      	b.n	8005ac4 <scalbn+0x84>
 8005a8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a8e:	3a36      	subs	r2, #54	; 0x36
 8005a90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a94:	4432      	add	r2, r6
 8005a96:	428a      	cmp	r2, r1
 8005a98:	dd0c      	ble.n	8005ab4 <scalbn+0x74>
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	a11a      	add	r1, pc, #104	; (adr r1, 8005b08 <scalbn+0xc8>)
 8005aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa4:	f000 f83a 	bl	8005b1c <copysign>
 8005aa8:	a317      	add	r3, pc, #92	; (adr r3, 8005b08 <scalbn+0xc8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fd07 	bl	80004c0 <__aeabi_dmul>
 8005ab2:	e7e7      	b.n	8005a84 <scalbn+0x44>
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	dd08      	ble.n	8005aca <scalbn+0x8a>
 8005ab8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005abc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ac0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aca:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ace:	da0b      	bge.n	8005ae8 <scalbn+0xa8>
 8005ad0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ad4:	429e      	cmp	r6, r3
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	dce0      	bgt.n	8005a9e <scalbn+0x5e>
 8005adc:	a108      	add	r1, pc, #32	; (adr r1, 8005b00 <scalbn+0xc0>)
 8005ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ae2:	f000 f81b 	bl	8005b1c <copysign>
 8005ae6:	e7c1      	b.n	8005a6c <scalbn+0x2c>
 8005ae8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005aec:	3236      	adds	r2, #54	; 0x36
 8005aee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005af2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <scalbn+0xd8>)
 8005afe:	e7d6      	b.n	8005aae <scalbn+0x6e>
 8005b00:	c2f8f359 	.word	0xc2f8f359
 8005b04:	01a56e1f 	.word	0x01a56e1f
 8005b08:	8800759c 	.word	0x8800759c
 8005b0c:	7e37e43c 	.word	0x7e37e43c
 8005b10:	43500000 	.word	0x43500000
 8005b14:	ffff3cb0 	.word	0xffff3cb0
 8005b18:	3c900000 	.word	0x3c900000

08005b1c <copysign>:
 8005b1c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	ea42 0103 	orr.w	r1, r2, r3
 8005b28:	4770      	bx	lr
	...

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
